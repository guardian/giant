var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// ../../../node_modules/moment/moment.js
var require_moment = __commonJS({
  "../../../node_modules/moment/moment.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format4, locale2, strict) {
        return createLocalOrUTC(input, format4, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key, argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format4) {
        var array = format4.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format4) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format4) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format4 = expandFormat(format4, m.localeData());
        formatFunctions[format4] = formatFunctions[format4] || makeFormatFunction(format4);
        return formatFunctions[format4](m);
      }
      function expandFormat(format4, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format4)) {
          format4 = format4.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format4;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format4 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format4 || !formatUpper) {
          return format4;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format4 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format4) ? format4(output) : format4.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format4) {
        return this.localeData().monthsShort(this, format4);
      });
      addFormatToken("MMMM", 0, 0, function(format4) {
        return this.localeData().months(this, format4);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format4) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format4) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format4) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format4) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format4, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format4 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format4 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format4, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format4, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
            this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format4 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format4 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format4) {
        return this.localeData().weekdaysMin(this, format4);
      });
      addFormatToken("ddd", 0, 0, function(format4) {
        return this.localeData().weekdaysShort(this, format4);
      });
      addFormatToken("dddd", 0, 0, function(format4) {
        return this.localeData().weekdays(this, format4);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format4) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format4) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format4, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format4 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format4 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format4 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format4 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format4, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format4, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
            this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
            this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format4 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format4 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format4 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return name.match("^[^/\\\\]*$") != null;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("Locale " + key + " not found. Did you forget to load it?");
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
      });
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i = 0; i < tokenLen; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function(obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format4 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format4 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format4)) {
          configFromStringAndArray(config);
        } else if (format4) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format4, locale2, strict, isUTC) {
        var c = {};
        if (format4 === true || format4 === false) {
          strict = format4;
          format4 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format4;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format4, locale2, strict) {
        return createLocalOrUTC(input, format4, locale2, strict, false);
      }
      var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, "m"), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property, propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format4 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format4]) ? formats[format4].call(this, now2) : formats[format4]);
        return this.format(output || this.localeData().calendar(format4, this, createLocal(now2)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format3(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format4) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format4, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format4) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format3;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
      proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
      proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
      proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
      proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format4, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format4);
      }
      function listMonthsImpl(format4, index, field) {
        if (isNumber(format4)) {
          index = format4;
          format4 = void 0;
        }
        format4 = format4 || "";
        if (index != null) {
          return get$1(format4, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format4, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format4, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format4)) {
            index = format4;
            format4 = void 0;
          }
          format4 = format4 || "";
        } else {
          format4 = localeSorted;
          index = format4;
          localeSorted = false;
          if (isNumber(format4)) {
            index = format4;
            format4 = void 0;
          }
          format4 = format4 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format4, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format4, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format4, index) {
        return listMonthsImpl(format4, index, "months");
      }
      function listMonthsShort(format4, index) {
        return listMonthsImpl(format4, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format4, index) {
        return listWeekdaysImpl(localeSorted, format4, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format4, index) {
        return listWeekdaysImpl(localeSorted, format4, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format4, index) {
        return listWeekdaysImpl(localeSorted, format4, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
      hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.4";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      return hooks;
    });
  }
});

// ../../../node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "../../../node_modules/lodash/lodash.js"(exports, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _3.defaults(root.Object(), context, _3.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate,
          "variable": "",
          "imports": {
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _3 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _3;
        define(function() {
          return _3;
        });
      } else if (freeModule) {
        (freeModule.exports = _3)._ = _3;
        freeExports._ = _3;
      } else {
        root._ = _3;
      }
    }).call(exports);
  }
});

// ../../../node_modules/shimmer/index.js
var require_shimmer = __commonJS({
  "../../../node_modules/shimmer/index.js"(exports, module2) {
    "use strict";
    function isFunction(funktion) {
      return typeof funktion === "function";
    }
    var logger = console.error.bind(console);
    function defineProperty(obj, name, value) {
      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    }
    function shimmer(options) {
      if (options && options.logger) {
        if (!isFunction(options.logger))
          logger("new logger isn't a function, not replacing");
        else
          logger = options.logger;
      }
    }
    function wrap(nodule, name, wrapper) {
      if (!nodule || !nodule[name]) {
        logger("no original function " + name + " to wrap");
        return;
      }
      if (!wrapper) {
        logger("no wrapper function");
        logger(new Error().stack);
        return;
      }
      if (!isFunction(nodule[name]) || !isFunction(wrapper)) {
        logger("original object and wrapper must be functions");
        return;
      }
      var original = nodule[name];
      var wrapped = wrapper(original, name);
      defineProperty(wrapped, "__original", original);
      defineProperty(wrapped, "__unwrap", function() {
        if (nodule[name] === wrapped)
          defineProperty(nodule, name, original);
      });
      defineProperty(wrapped, "__wrapped", true);
      defineProperty(nodule, name, wrapped);
      return wrapped;
    }
    function massWrap(nodules, names, wrapper) {
      if (!nodules) {
        logger("must provide one or more modules to patch");
        logger(new Error().stack);
        return;
      } else if (!Array.isArray(nodules)) {
        nodules = [nodules];
      }
      if (!(names && Array.isArray(names))) {
        logger("must provide one or more functions to wrap on modules");
        return;
      }
      nodules.forEach(function(nodule) {
        names.forEach(function(name) {
          wrap(nodule, name, wrapper);
        });
      });
    }
    function unwrap(nodule, name) {
      if (!nodule || !nodule[name]) {
        logger("no function to unwrap.");
        logger(new Error().stack);
        return;
      }
      if (!nodule[name].__unwrap) {
        logger("no original to unwrap to -- has " + name + " already been unwrapped?");
      } else {
        return nodule[name].__unwrap();
      }
    }
    function massUnwrap(nodules, names) {
      if (!nodules) {
        logger("must provide one or more modules to patch");
        logger(new Error().stack);
        return;
      } else if (!Array.isArray(nodules)) {
        nodules = [nodules];
      }
      if (!(names && Array.isArray(names))) {
        logger("must provide one or more functions to unwrap on modules");
        return;
      }
      nodules.forEach(function(nodule) {
        names.forEach(function(name) {
          unwrap(nodule, name);
        });
      });
    }
    shimmer.wrap = wrap;
    shimmer.massWrap = massWrap;
    shimmer.unwrap = unwrap;
    shimmer.massUnwrap = massUnwrap;
    module2.exports = shimmer;
  }
});

// ../../../node_modules/emitter-listener/listener.js
var require_listener = __commonJS({
  "../../../node_modules/emitter-listener/listener.js"(exports, module2) {
    "use strict";
    var shimmer = require_shimmer();
    var wrap = shimmer.wrap;
    var unwrap = shimmer.unwrap;
    var SYMBOL = "wrap@before";
    function defineProperty(obj, name, value) {
      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);
      Object.defineProperty(obj, name, {
        configurable: true,
        enumerable,
        writable: true,
        value
      });
    }
    function _process(self2, listeners) {
      var l = listeners.length;
      for (var p = 0; p < l; p++) {
        var listener = listeners[p];
        var before = self2[SYMBOL];
        if (typeof before === "function") {
          before(listener);
        } else if (Array.isArray(before)) {
          var length = before.length;
          for (var i = 0; i < length; i++)
            before[i](listener);
        }
      }
    }
    function _listeners(self2, event) {
      var listeners;
      listeners = self2._events && self2._events[event];
      if (!Array.isArray(listeners)) {
        if (listeners) {
          listeners = [listeners];
        } else {
          listeners = [];
        }
      }
      return listeners;
    }
    function _findAndProcess(self2, event, before) {
      var after = _listeners(self2, event);
      var unprocessed = after.filter(function(fn) {
        return before.indexOf(fn) === -1;
      });
      if (unprocessed.length > 0)
        _process(self2, unprocessed);
    }
    function _wrap(unwrapped, visit) {
      if (!unwrapped)
        return;
      var wrapped = unwrapped;
      if (typeof unwrapped === "function") {
        wrapped = visit(unwrapped);
      } else if (Array.isArray(unwrapped)) {
        wrapped = [];
        for (var i = 0; i < unwrapped.length; i++) {
          wrapped[i] = visit(unwrapped[i]);
        }
      }
      return wrapped;
    }
    module2.exports = function wrapEmitter(emitter, onAddListener, onEmit) {
      if (!emitter || !emitter.on || !emitter.addListener || !emitter.removeListener || !emitter.emit) {
        throw new Error("can only wrap real EEs");
      }
      if (!onAddListener)
        throw new Error("must have function to run on listener addition");
      if (!onEmit)
        throw new Error("must have function to wrap listeners when emitting");
      function adding(on) {
        return function added(event, listener) {
          var existing = _listeners(this, event).slice();
          try {
            var returned = on.call(this, event, listener);
            _findAndProcess(this, event, existing);
            return returned;
          } finally {
            if (!this.on.__wrapped)
              wrap(this, "on", adding);
            if (!this.addListener.__wrapped)
              wrap(this, "addListener", adding);
          }
        };
      }
      function emitting(emit) {
        return function emitted(event) {
          if (!this._events || !this._events[event])
            return emit.apply(this, arguments);
          var unwrapped = this._events[event];
          function remover(removeListener) {
            return function removed() {
              this._events[event] = unwrapped;
              try {
                return removeListener.apply(this, arguments);
              } finally {
                unwrapped = this._events[event];
                this._events[event] = _wrap(unwrapped, onEmit);
              }
            };
          }
          wrap(this, "removeListener", remover);
          try {
            this._events[event] = _wrap(unwrapped, onEmit);
            return emit.apply(this, arguments);
          } finally {
            unwrap(this, "removeListener");
            this._events[event] = unwrapped;
          }
        };
      }
      if (!emitter[SYMBOL]) {
        defineProperty(emitter, SYMBOL, onAddListener);
      } else if (typeof emitter[SYMBOL] === "function") {
        defineProperty(emitter, SYMBOL, [emitter[SYMBOL], onAddListener]);
      } else if (Array.isArray(emitter[SYMBOL])) {
        emitter[SYMBOL].push(onAddListener);
      }
      if (!emitter.__wrapped) {
        wrap(emitter, "addListener", adding);
        wrap(emitter, "on", adding);
        wrap(emitter, "emit", emitting);
        defineProperty(emitter, "__unwrap", function() {
          unwrap(emitter, "addListener");
          unwrap(emitter, "on");
          unwrap(emitter, "emit");
          delete emitter[SYMBOL];
          delete emitter.__wrapped;
        });
        defineProperty(emitter, "__wrapped", true);
      }
    };
  }
});

// ../../../node_modules/cls-hooked/context.js
var require_context = __commonJS({
  "../../../node_modules/cls-hooked/context.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var assert3 = require("assert");
    var wrapEmitter = require_listener();
    var async_hooks = require("async_hooks");
    var CONTEXTS_SYMBOL = "cls@contexts";
    var ERROR_SYMBOL = "error@context";
    var DEBUG_CLS_HOOKED = process.env.DEBUG_CLS_HOOKED;
    var currentUid = -1;
    module2.exports = {
      getNamespace,
      createNamespace,
      destroyNamespace,
      reset,
      ERROR_SYMBOL
    };
    function Namespace(name) {
      this.name = name;
      this.active = null;
      this._set = [];
      this.id = null;
      this._contexts = /* @__PURE__ */ new Map();
      this._indent = 0;
    }
    Namespace.prototype.set = function set(key, value) {
      if (!this.active) {
        throw new Error("No context available. ns.run() or ns.bind() must be called first.");
      }
      this.active[key] = value;
      if (DEBUG_CLS_HOOKED) {
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(indentStr + "CONTEXT-SET KEY:" + key + "=" + value + " in ns:" + this.name + " currentUid:" + currentUid + " active:" + util.inspect(this.active, { showHidden: true, depth: 2, colors: true }));
      }
      return value;
    };
    Namespace.prototype.get = function get(key) {
      if (!this.active) {
        if (DEBUG_CLS_HOOKED) {
          const asyncHooksCurrentId = async_hooks.currentId();
          const triggerId = async_hooks.triggerAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-GETTING KEY NO ACTIVE NS: (${this.name}) ${key}=undefined currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length}`);
        }
        return void 0;
      }
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(indentStr + "CONTEXT-GETTING KEY:" + key + "=" + this.active[key] + " (" + this.name + ") currentUid:" + currentUid + " active:" + util.inspect(this.active, { showHidden: true, depth: 2, colors: true }));
        debug2(`${indentStr}CONTEXT-GETTING KEY: (${this.name}) ${key}=${this.active[key]} currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length} active:${util.inspect(this.active)}`);
      }
      return this.active[key];
    };
    Namespace.prototype.createContext = function createContext() {
      let context = Object.create(this.active ? this.active : Object.prototype);
      context._ns_name = this.name;
      context.id = currentUid;
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-CREATED Context: (${this.name}) currentUid:${currentUid} asyncHooksCurrentId:${asyncHooksCurrentId} triggerId:${triggerId} len:${this._set.length} context:${util.inspect(context, { showHidden: true, depth: 2, colors: true })}`);
      }
      return context;
    };
    Namespace.prototype.run = function run(fn) {
      let context = this.createContext();
      this.enter(context);
      try {
        if (DEBUG_CLS_HOOKED) {
          const triggerId = async_hooks.triggerAsyncId();
          const asyncHooksCurrentId = async_hooks.executionAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-RUN BEGIN: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} context:${util.inspect(context)}`);
        }
        fn(context);
        return context;
      } catch (exception) {
        if (exception) {
          exception[ERROR_SYMBOL] = context;
        }
        throw exception;
      } finally {
        if (DEBUG_CLS_HOOKED) {
          const triggerId = async_hooks.triggerAsyncId();
          const asyncHooksCurrentId = async_hooks.executionAsyncId();
          const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
          debug2(`${indentStr}CONTEXT-RUN END: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
        }
        this.exit(context);
      }
    };
    Namespace.prototype.runAndReturn = function runAndReturn(fn) {
      let value;
      this.run(function(context) {
        value = fn(context);
      });
      return value;
    };
    Namespace.prototype.runPromise = function runPromise(fn) {
      let context = this.createContext();
      this.enter(context);
      let promise = fn(context);
      if (!promise || !promise.then || !promise.catch) {
        throw new Error("fn must return a promise.");
      }
      if (DEBUG_CLS_HOOKED) {
        debug2("CONTEXT-runPromise BEFORE: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
      }
      return promise.then((result) => {
        if (DEBUG_CLS_HOOKED) {
          debug2("CONTEXT-runPromise AFTER then: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
        }
        this.exit(context);
        return result;
      }).catch((err) => {
        err[ERROR_SYMBOL] = context;
        if (DEBUG_CLS_HOOKED) {
          debug2("CONTEXT-runPromise AFTER catch: (" + this.name + ") currentUid:" + currentUid + " len:" + this._set.length + " " + util.inspect(context));
        }
        this.exit(context);
        throw err;
      });
    };
    Namespace.prototype.bind = function bindFactory(fn, context) {
      if (!context) {
        if (!this.active) {
          context = this.createContext();
        } else {
          context = this.active;
        }
      }
      let self2 = this;
      return function clsBind() {
        self2.enter(context);
        try {
          return fn.apply(this, arguments);
        } catch (exception) {
          if (exception) {
            exception[ERROR_SYMBOL] = context;
          }
          throw exception;
        } finally {
          self2.exit(context);
        }
      };
    };
    Namespace.prototype.enter = function enter(context) {
      assert3.ok(context, "context must be provided for entering");
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-ENTER: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
      }
      this._set.push(this.active);
      this.active = context;
    };
    Namespace.prototype.exit = function exit(context) {
      assert3.ok(context, "context must be provided for exiting");
      if (DEBUG_CLS_HOOKED) {
        const asyncHooksCurrentId = async_hooks.executionAsyncId();
        const triggerId = async_hooks.triggerAsyncId();
        const indentStr = " ".repeat(this._indent < 0 ? 0 : this._indent);
        debug2(`${indentStr}CONTEXT-EXIT: (${this.name}) currentUid:${currentUid} triggerId:${triggerId} asyncHooksCurrentId:${asyncHooksCurrentId} len:${this._set.length} ${util.inspect(context)}`);
      }
      if (this.active === context) {
        assert3.ok(this._set.length, "can't remove top context");
        this.active = this._set.pop();
        return;
      }
      let index = this._set.lastIndexOf(context);
      if (index < 0) {
        if (DEBUG_CLS_HOOKED) {
          debug2("??ERROR?? context exiting but not entered - ignoring: " + util.inspect(context));
        }
        assert3.ok(index >= 0, "context not currently entered; can't exit. \n" + util.inspect(this) + "\n" + util.inspect(context));
      } else {
        assert3.ok(index, "can't remove top context");
        this._set.splice(index, 1);
      }
    };
    Namespace.prototype.bindEmitter = function bindEmitter(emitter) {
      assert3.ok(emitter.on && emitter.addListener && emitter.emit, "can only bind real EEs");
      let namespace = this;
      let thisSymbol = "context@" + this.name;
      function attach(listener) {
        if (!listener) {
          return;
        }
        if (!listener[CONTEXTS_SYMBOL]) {
          listener[CONTEXTS_SYMBOL] = /* @__PURE__ */ Object.create(null);
        }
        listener[CONTEXTS_SYMBOL][thisSymbol] = {
          namespace,
          context: namespace.active
        };
      }
      function bind(unwrapped) {
        if (!(unwrapped && unwrapped[CONTEXTS_SYMBOL])) {
          return unwrapped;
        }
        let wrapped = unwrapped;
        let unwrappedContexts = unwrapped[CONTEXTS_SYMBOL];
        Object.keys(unwrappedContexts).forEach(function(name) {
          let thunk = unwrappedContexts[name];
          wrapped = thunk.namespace.bind(wrapped, thunk.context);
        });
        return wrapped;
      }
      wrapEmitter(emitter, attach, bind);
    };
    Namespace.prototype.fromException = function fromException(exception) {
      return exception[ERROR_SYMBOL];
    };
    function getNamespace(name) {
      return process.namespaces[name];
    }
    function createNamespace(name) {
      assert3.ok(name, "namespace must be given a name.");
      if (DEBUG_CLS_HOOKED) {
        debug2(`NS-CREATING NAMESPACE (${name})`);
      }
      let namespace = new Namespace(name);
      namespace.id = currentUid;
      const hook = async_hooks.createHook({
        init(asyncId, type, triggerId, resource) {
          currentUid = async_hooks.executionAsyncId();
          if (namespace.active) {
            namespace._contexts.set(asyncId, namespace.active);
            if (DEBUG_CLS_HOOKED) {
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}INIT [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
            }
          } else if (currentUid === 0) {
            const triggerId2 = async_hooks.triggerAsyncId();
            const triggerIdContext = namespace._contexts.get(triggerId2);
            if (triggerIdContext) {
              namespace._contexts.set(asyncId, triggerIdContext);
              if (DEBUG_CLS_HOOKED) {
                const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
                debug2(`${indentStr}INIT USING CONTEXT FROM TRIGGERID [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId2} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
              }
            } else if (DEBUG_CLS_HOOKED) {
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}INIT MISSING CONTEXT [${type}] (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId2} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
            }
          }
          if (DEBUG_CLS_HOOKED && type === "PROMISE") {
            debug2(util.inspect(resource, { showHidden: true }));
            const parentId = resource.parentId;
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}INIT RESOURCE-PROMISE [${type}] (${name}) parentId:${parentId} asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} resource:${resource}`);
          }
        },
        before(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          let context;
          context = namespace._contexts.get(asyncId) || namespace._contexts.get(currentUid);
          if (context) {
            if (DEBUG_CLS_HOOKED) {
              const triggerId = async_hooks.triggerAsyncId();
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}BEFORE (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
              namespace._indent += 2;
            }
            namespace.enter(context);
          } else if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}BEFORE MISSING CONTEXT (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} namespace._contexts:${util.inspect(namespace._contexts, { showHidden: true, depth: 2, colors: true })}`);
            namespace._indent += 2;
          }
        },
        after(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          let context;
          context = namespace._contexts.get(asyncId) || namespace._contexts.get(currentUid);
          if (context) {
            if (DEBUG_CLS_HOOKED) {
              const triggerId = async_hooks.triggerAsyncId();
              namespace._indent -= 2;
              const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
              debug2(`${indentStr}AFTER (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
            }
            namespace.exit(context);
          } else if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            namespace._indent -= 2;
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}AFTER MISSING CONTEXT (${name}) asyncId:${asyncId} currentUid:${currentUid} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(context)}`);
          }
        },
        destroy(asyncId) {
          currentUid = async_hooks.executionAsyncId();
          if (DEBUG_CLS_HOOKED) {
            const triggerId = async_hooks.triggerAsyncId();
            const indentStr = " ".repeat(namespace._indent < 0 ? 0 : namespace._indent);
            debug2(`${indentStr}DESTROY (${name}) currentUid:${currentUid} asyncId:${asyncId} triggerId:${triggerId} active:${util.inspect(namespace.active, { showHidden: true, depth: 2, colors: true })} context:${util.inspect(namespace._contexts.get(currentUid))}`);
          }
          namespace._contexts.delete(asyncId);
        }
      });
      hook.enable();
      process.namespaces[name] = namespace;
      return namespace;
    }
    function destroyNamespace(name) {
      let namespace = getNamespace(name);
      assert3.ok(namespace, `can't delete nonexistent namespace! "` + name + '"');
      assert3.ok(namespace.id, "don't assign to process.namespaces directly! " + util.inspect(namespace));
      process.namespaces[name] = null;
    }
    function reset() {
      if (process.namespaces) {
        Object.keys(process.namespaces).forEach(function(name) {
          destroyNamespace(name);
        });
      }
      process.namespaces = /* @__PURE__ */ Object.create(null);
    }
    process.namespaces = {};
    function debug2(...args) {
      if (DEBUG_CLS_HOOKED) {
        process._rawDebug(`${util.format(...args)}`);
      }
    }
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/logger.js
var require_logger = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/logger.js"(exports, module2) {
    "use strict";
    var validLogLevels = ["debug", "info", "warn", "error", "silent"];
    var defaultLogLevel = validLogLevels.indexOf("error");
    var logLevel = calculateLogLevel(process.env.AWS_XRAY_DEBUG_MODE ? "debug" : process.env.AWS_XRAY_LOG_LEVEL);
    var logger = {
      error: createLoggerForLevel("error"),
      info: createLoggerForLevel("info"),
      warn: createLoggerForLevel("warn"),
      debug: createLoggerForLevel("debug")
    };
    function createLoggerForLevel(level) {
      var loggerLevel = validLogLevels.indexOf(level);
      var consoleMethod = console[level] || console.log || (() => {
      });
      if (loggerLevel >= logLevel) {
        return (message, meta) => {
          if (message || meta) {
            consoleMethod(formatLogMessage(level, message, meta));
          }
        };
      } else {
        return () => {
        };
      }
    }
    function calculateLogLevel(level) {
      if (level) {
        var normalisedLevel = level.toLowerCase();
        var index = validLogLevels.indexOf(normalisedLevel);
        return index >= 0 ? index : defaultLogLevel;
      }
      return defaultLogLevel;
    }
    function createTimestamp(date) {
      var tzo = -date.getTimezoneOffset(), dif = tzo >= 0 ? "+" : "-", pad = function(num) {
        var norm = Math.floor(Math.abs(num));
        return (norm < 10 ? "0" : "") + norm;
      };
      return new Date(date.getTime() + tzo * 60 * 1e3).toISOString().replace(/T/, " ").replace(/Z/, " ") + dif + pad(tzo / 60) + ":" + pad(tzo % 60);
    }
    function isLambdaFunction() {
      return process.env.LAMBDA_TASK_ROOT !== void 0;
    }
    function formatLogMessage(level, message, meta) {
      var messageParts = [];
      if (!isLambdaFunction()) {
        messageParts.push(createTimestamp(new Date()));
        messageParts.push(`[${level.toUpperCase()}]`);
      }
      if (message) {
        messageParts.push(message);
      }
      var logString = messageParts.join(" ");
      var metaDataString = formatMetaData(meta);
      return [logString, metaDataString].filter((str) => str.length > 0).join("\n  ");
    }
    function formatMetaData(meta) {
      if (!meta) {
        return "";
      }
      return typeof meta === "string" ? meta : JSON.stringify(meta);
    }
    var logging = {
      setLogger: function setLogger(logObj) {
        logger = logObj;
      },
      getLogger: function getLogger() {
        return logger;
      }
    };
    module2.exports = logging;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/captured_exception.js
var require_captured_exception = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/captured_exception.js"(exports, module2) {
    "use strict";
    var crypto = require("crypto");
    function CapturedException(err, remote) {
      this.init(err, remote);
    }
    CapturedException.prototype.init = function init(err, remote) {
      var e = typeof err === "string" || err instanceof String ? { message: err, name: "" } : err;
      this.message = e.message;
      this.type = e.name;
      this.stack = [];
      this.remote = !!remote;
      this.id = crypto.randomBytes(8).toString("hex");
      if (e.stack) {
        var stack = e.stack.split("\n");
        stack.shift();
        stack.forEach((stackline) => {
          var line = stackline.trim().replace(/\(|\)/g, "");
          line = line.substring(line.indexOf(" ") + 1);
          var label = line.lastIndexOf(" ") >= 0 ? line.slice(0, line.lastIndexOf(" ")) : null;
          var path = Array.isArray(label) && !label.length ? line : line.slice(line.lastIndexOf(" ") + 1);
          path = path.split(":");
          var entry = {
            path: path[0],
            line: parseInt(path[1]),
            label: label || "anonymous"
          };
          this.stack.push(entry);
        }, this);
      }
    };
    module2.exports = CapturedException;
  }
});

// ../../../node_modules/atomic-batcher/index.js
var require_atomic_batcher = __commonJS({
  "../../../node_modules/atomic-batcher/index.js"(exports, module2) {
    module2.exports = batcher;
    function batcher(run) {
      var running = false;
      var pendingBatch = null;
      var pendingCallbacks = null;
      var callbacks = null;
      return append;
      function done(err) {
        if (callbacks)
          callAll(callbacks, err);
        running = false;
        callbacks = pendingCallbacks;
        var nextBatch = pendingBatch;
        pendingBatch = null;
        pendingCallbacks = null;
        if (!nextBatch || !nextBatch.length) {
          if (!callbacks || !callbacks.length) {
            callbacks = null;
            return;
          }
          if (!nextBatch)
            nextBatch = [];
        }
        running = true;
        run(nextBatch, done);
      }
      function append(val, cb) {
        if (running) {
          if (!pendingBatch) {
            pendingBatch = [];
            pendingCallbacks = [];
          }
          pushAll(pendingBatch, val);
          if (cb)
            pendingCallbacks.push(cb);
        } else {
          if (cb)
            callbacks = [cb];
          running = true;
          run(Array.isArray(val) ? val : [val], done);
        }
      }
    }
    function pushAll(list, val) {
      if (Array.isArray(val))
        pushArray(list, val);
      else
        list.push(val);
    }
    function pushArray(list, val) {
      for (var i = 0; i < val.length; i++)
        list.push(val[i]);
    }
    function callAll(list, err) {
      for (var i = 0; i < list.length; i++)
        list[i](err);
    }
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js
var require_daemon_config = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js"(exports, module2) {
    "use strict";
    var logger = require_logger();
    var DaemonConfig = {
      udp_ip: "127.0.0.1",
      udp_port: 2e3,
      tcp_ip: "127.0.0.1",
      tcp_port: 2e3,
      setDaemonAddress: function setDaemonAddress(address) {
        if (!process.env.AWS_XRAY_DAEMON_ADDRESS) {
          processAddress(address);
          logger.getLogger().info("Configured daemon address to " + address + ".");
        } else {
          logger.getLogger().warn("Ignoring call to setDaemonAddress as AWS_XRAY_DAEMON_ADDRESS is set. The current daemon address will not be changed.");
        }
      }
    };
    var processAddress = function processAddress2(address) {
      if (address.indexOf(":") === -1) {
        throw new Error("Invalid Daemon Address. You must specify an ip and port.");
      } else {
        var splitAddress = address.split(" ");
        if (splitAddress.length === 1) {
          if (address.indexOf("udp") > -1 || address.indexOf("tcp") > -1) {
            throw new Error("Invalid Daemon Address. You must specify both tcp and udp addresses.");
          }
          var addr = address.split(":");
          if (!addr[0]) {
            throw new Error("Invalid Daemon Address. You must specify an ip.");
          }
          DaemonConfig.udp_ip = addr[0];
          DaemonConfig.tcp_ip = addr[0];
          DaemonConfig.udp_port = addr[1];
          DaemonConfig.tcp_port = addr[1];
        } else if (splitAddress.length === 2) {
          var part_1 = splitAddress[0].split(":");
          var part_2 = splitAddress[1].split(":");
          var addr_map = {};
          addr_map[part_1[0]] = part_1;
          addr_map[part_2[0]] = part_2;
          DaemonConfig.udp_ip = addr_map["udp"][1];
          DaemonConfig.udp_port = parseInt(addr_map["udp"][2]);
          DaemonConfig.tcp_ip = addr_map["tcp"][1];
          DaemonConfig.tcp_port = parseInt(addr_map["tcp"][2]);
          if (!DaemonConfig.udp_port || !DaemonConfig.tcp_port) {
            throw new Error("Invalid Daemon Address. You must specify port number.");
          }
        }
      }
    };
    if (process.env.AWS_XRAY_DAEMON_ADDRESS) {
      processAddress(process.env.AWS_XRAY_DAEMON_ADDRESS);
    }
    module2.exports = DaemonConfig;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segment_emitter.js
var require_segment_emitter = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segment_emitter.js"(exports, module2) {
    "use strict";
    var dgram = require("dgram");
    var batcher = require_atomic_batcher();
    var logger = require_logger();
    var PROTOCOL_HEADER = '{"format":"json","version":1}';
    var PROTOCOL_DELIMITER = "\n";
    function batchSendData(ops, callback) {
      var client = dgram.createSocket("udp4");
      executeSendData(client, ops, 0, function() {
        try {
          client.close();
        } finally {
          callback();
        }
      });
    }
    function executeSendData(client, ops, index, callback) {
      if (index >= ops.length) {
        callback();
        return;
      }
      sendMessage(client, ops[index], function() {
        executeSendData(client, ops, index + 1, callback);
      });
    }
    function sendMessage(client, data, batchCallback) {
      var msg = data.msg;
      var offset = data.offset;
      var length = data.length;
      var port = data.port;
      var address = data.address;
      var callback = data.callback;
      client.send(msg, offset, length, port, address, function(err) {
        try {
          callback(err);
        } finally {
          batchCallback();
        }
      });
    }
    function BatchingTemporarySocket() {
      this.batchSend = batcher(batchSendData);
    }
    BatchingTemporarySocket.prototype.send = function(msg, offset, length, port, address, callback) {
      var work = {
        msg,
        offset,
        length,
        port,
        address,
        callback
      };
      this.batchSend(work);
    };
    var SegmentEmitter = {
      daemonConfig: require_daemon_config(),
      format: function format3(segment) {
        return PROTOCOL_HEADER + PROTOCOL_DELIMITER + segment.toString();
      },
      send: function send(segment) {
        if (!this.socket) {
          if (this.useBatchingTemporarySocket) {
            this.socket = new BatchingTemporarySocket();
          } else {
            this.socket = dgram.createSocket("udp4").unref();
          }
        }
        var client = this.socket;
        var formatted = segment.format();
        var data = PROTOCOL_HEADER + PROTOCOL_DELIMITER + formatted;
        var message = Buffer.from(data);
        var short = '{"trace_id:"' + segment.trace_id + '","id":"' + segment.id + '"}';
        var type = segment.type === "subsegment" ? "Subsegment" : "Segment";
        client.send(message, 0, message.length, this.daemonConfig.udp_port, this.daemonConfig.udp_ip, function(err) {
          if (err) {
            if (err.code === "EMSGSIZE") {
              logger.getLogger().error(type + " too large to send: " + short + " (" + message.length + " bytes).");
            } else {
              logger.getLogger().error("Error occured sending segment: ", err);
            }
          } else {
            logger.getLogger().debug(type + ' sent: {"trace_id:"' + segment.trace_id + '","id":"' + segment.id + '"}');
            logger.getLogger().debug("UDP message sent: " + segment);
          }
        });
      },
      setDaemonAddress: function setDaemonAddress(address) {
        this.daemonConfig.setDaemonAddress(address);
      },
      getIp: function getIp() {
        return this.daemonConfig.udp_ip;
      },
      getPort: function getPort() {
        return this.daemonConfig.udp_port;
      },
      disableReusableSocket: function() {
        this.useBatchingTemporarySocket = true;
      }
    };
    module2.exports = SegmentEmitter;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/trace_id.js
var require_trace_id = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/trace_id.js"(exports, module2) {
    "use strict";
    var crypto = require("crypto");
    var logger = require_logger();
    var TraceID = class {
      constructor(tsHex, numberhex) {
        this.version = 1;
        this.timestamp = tsHex || Math.round(new Date().getTime() / 1e3).toString(16);
        this.id = numberhex || crypto.randomBytes(12).toString("hex");
      }
      static Invalid() {
        return new TraceID("00000000", "000000000000000000000000");
      }
      static FromString(rawID) {
        const DELIMITER = "-";
        var traceID = new TraceID();
        var version2, timestamp;
        if (!rawID || typeof rawID !== "string") {
          logger.getLogger().error("Empty or non-string trace ID provided");
          return traceID;
        }
        const parts = rawID.trim().split(DELIMITER);
        if (parts.length !== 3) {
          logger.getLogger().error("Unrecognized trace ID format");
          return traceID;
        }
        version2 = parseInt(parts[0]);
        if (isNaN(version2) || version2 < 1) {
          logger.getLogger().error("Trace ID version must be positive integer");
          return traceID;
        }
        timestamp = parseInt(parts[1], 16).toString(16);
        if (timestamp === "NaN") {
          logger.getLogger().error("Trace ID timestamp must be a hex-encoded value");
          return traceID;
        }
        traceID.version = version2;
        traceID.timestamp = timestamp;
        traceID.id = parts[2];
        return traceID;
      }
      toString() {
        return `${this.version.toString()}-${this.timestamp}-${this.id}`;
      }
    };
    module2.exports = TraceID;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/utils.js
var require_utils = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/utils.js"(exports, module2) {
    "use strict";
    var crypto = require("crypto");
    var logger = require_logger();
    var TraceID = require_trace_id();
    var utils = {
      getCauseTypeFromHttpStatus: function getCauseTypeFromHttpStatus(status) {
        var stat = status.toString();
        if (stat.match(/^[4][0-9]{2}$/) !== null) {
          return "error";
        } else if (stat.match(/^[5][0-9]{2}$/) !== null) {
          return "fault";
        }
      },
      stripQueryStringFromPath: function stripQueryStringFromPath(path) {
        return path ? path.split("?")[0] : "";
      },
      wildcardMatch: function wildcardMatch(pattern, text) {
        if (pattern === void 0 || text === void 0) {
          return false;
        }
        if (pattern.length === 1 && pattern.charAt(0) === "*") {
          return true;
        }
        var patternLength = pattern.length;
        var textLength = text.length;
        var indexOfGlob = pattern.indexOf("*");
        pattern = pattern.toLowerCase();
        text = text.toLowerCase();
        if (indexOfGlob === -1 || indexOfGlob === patternLength - 1) {
          var match = function simpleWildcardMatch() {
            var j2 = 0;
            for (var i2 = 0; i2 < patternLength; i2++) {
              var patternChar2 = pattern.charAt(i2);
              if (patternChar2 === "*") {
                return true;
              } else if (patternChar2 === "?") {
                if (j2 === textLength) {
                  return false;
                }
                j2++;
              } else {
                if (j2 >= textLength || patternChar2 != text.charAt(j2)) {
                  return false;
                }
                j2++;
              }
            }
            return j2 === textLength;
          };
          return match();
        }
        var matchArray = [];
        matchArray[0] = true;
        for (var j = 0; j < patternLength; j++) {
          var i;
          var patternChar = pattern.charAt(j);
          if (patternChar != "*") {
            for (i = textLength - 1; i >= 0; i--) {
              matchArray[i + 1] = !!matchArray[i] && (patternChar === "?" || patternChar === text.charAt(i));
            }
          } else {
            i = 0;
            while (i <= textLength && !matchArray[i]) {
              i++;
            }
            for (i; i <= textLength; i++) {
              matchArray[i] = true;
            }
          }
          matchArray[0] = matchArray[0] && patternChar === "*";
        }
        return matchArray[textLength];
      },
      LambdaUtils: {
        validTraceData: function(xAmznTraceId) {
          var valid = false;
          if (xAmznTraceId) {
            var data = utils.processTraceData(xAmznTraceId);
            valid = !!(data && data.root && data.parent && data.sampled);
          }
          return valid;
        },
        populateTraceData: function(segment, xAmznTraceId) {
          logger.getLogger().debug("Lambda trace data found: " + xAmznTraceId);
          let traceData = utils.processTraceData(xAmznTraceId);
          var valid = false;
          if (!traceData) {
            traceData = {};
            logger.getLogger().error("_X_AMZN_TRACE_ID is empty or has an invalid format");
          } else if (!traceData.root || !traceData.parent || !traceData.sampled) {
            logger.getLogger().error("_X_AMZN_TRACE_ID is missing required information");
          } else {
            valid = true;
          }
          segment.trace_id = TraceID.FromString(traceData.root).toString();
          segment.id = traceData.parent || crypto.randomBytes(8).toString("hex");
          if (traceData.root && segment.trace_id !== traceData.root) {
            logger.getLogger().error("_X_AMZN_TRACE_ID contains invalid trace ID");
            valid = false;
          }
          if (!parseInt(traceData.sampled)) {
            segment.notTraced = true;
          } else {
            delete segment.notTraced;
          }
          if (traceData.data) {
            segment.userData = traceData.data;
          }
          logger.getLogger().debug("Segment started: " + JSON.stringify(traceData));
          return valid;
        }
      },
      processTraceData: function processTraceData(traceData) {
        var amznTraceData = {};
        var data = {};
        var reservedKeywords = ["root", "parent", "sampled", "self"];
        var remainingBytes = 256;
        if (!(typeof traceData === "string" && traceData)) {
          return amznTraceData;
        }
        traceData.split(";").forEach(function(header) {
          if (!header) {
            return;
          }
          var pair = header.split("=");
          if (pair[0] && pair[1]) {
            let key = pair[0].trim();
            let value = pair[1].trim();
            let lowerCaseKey = key.toLowerCase();
            let reserved = reservedKeywords.indexOf(lowerCaseKey) !== -1;
            if (reserved) {
              amznTraceData[lowerCaseKey] = value;
            } else if (!reserved && remainingBytes - (lowerCaseKey.length + value.length) >= 0) {
              data[key] = value;
              remainingBytes -= key.length + value.length;
            }
          }
        });
        amznTraceData["data"] = data;
        return amznTraceData;
      },
      objectWithoutProperties: function objectWithoutProperties(obj, keys, preservePrototype) {
        keys = Array.isArray(keys) ? keys : [];
        preservePrototype = typeof preservePrototype === "boolean" ? preservePrototype : false;
        var target = preservePrototype ? Object.create(Object.getPrototypeOf(obj)) : {};
        for (var property in obj) {
          if (keys.indexOf(property) >= 0) {
            continue;
          }
          if (!Object.prototype.hasOwnProperty.call(obj, property)) {
            continue;
          }
          target[property] = obj[property];
        }
        return target;
      },
      safeParseInt: (val) => {
        if (!val || isNaN(val)) {
          return 0;
        }
        return parseInt(val);
      }
    };
    module2.exports = utils;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js
var require_segment_utils = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js"(exports, module2) {
    "use strict";
    var { safeParseInt } = require_utils();
    var logger = require_logger();
    var DEFAULT_STREAMING_THRESHOLD = 100;
    var utils = {
      streamingThreshold: DEFAULT_STREAMING_THRESHOLD,
      getCurrentTime: function getCurrentTime() {
        return Date.now() / 1e3;
      },
      setOrigin: function setOrigin(origin) {
        this.origin = origin;
      },
      setPluginData: function setPluginData(pluginData) {
        this.pluginData = pluginData;
      },
      setSDKData: function setSDKData(sdkData) {
        this.sdkData = sdkData;
      },
      setServiceData: function setServiceData(serviceData) {
        this.serviceData = serviceData;
      },
      setStreamingThreshold: function setStreamingThreshold(threshold) {
        if (isFinite(threshold) && threshold >= 0) {
          utils.streamingThreshold = threshold;
          logger.getLogger().debug("Subsegment streaming threshold set to: " + threshold);
        } else {
          logger.getLogger().error("Invalid threshold: " + threshold + ". Must be a whole number >= 0.");
        }
      },
      getStreamingThreshold: function getStreamingThreshold() {
        return utils.streamingThreshold;
      },
      getHttpResponseData: (res) => {
        const ret = {};
        if (!res) {
          return ret;
        }
        const status = safeParseInt(res.statusCode);
        if (status !== 0) {
          ret.status = status;
        }
        if (res.headers && res.headers["content-length"]) {
          ret.content_length = safeParseInt(res.headers["content-length"]);
        }
        return ret;
      }
    };
    module2.exports = utils;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/remote_request_data.js
var require_remote_request_data = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/remote_request_data.js"(exports, module2) {
    "use strict";
    var { getHttpResponseData } = require_segment_utils();
    var { stripQueryStringFromPath } = require_utils();
    function RemoteRequestData(req, res, downstreamXRayEnabled) {
      this.init(req, res, downstreamXRayEnabled);
    }
    RemoteRequestData.prototype.init = function init(req, res, downstreamXRayEnabled) {
      this.request = {
        url: req.agent && req.agent.protocol ? req.agent.protocol + "//" + (req.host || req.getHeader("host")) + stripQueryStringFromPath(req.path) : "",
        method: req.method || ""
      };
      if (downstreamXRayEnabled) {
        this.request.traced = true;
      }
      if (res) {
        this.response = getHttpResponseData(res);
      }
    };
    module2.exports = RemoteRequestData;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/subsegment.js
var require_subsegment = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/subsegment.js"(exports, module2) {
    "use strict";
    var crypto = require("crypto");
    var CapturedException = require_captured_exception();
    var RemoteRequestData = require_remote_request_data();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var Utils = require_utils();
    var logger = require_logger();
    function Subsegment(name) {
      this.init(name);
    }
    Subsegment.prototype.init = function init(name) {
      if (typeof name != "string") {
        throw new Error("Subsegment name must be of type string.");
      }
      this.id = crypto.randomBytes(8).toString("hex");
      this.name = name;
      this.start_time = SegmentUtils.getCurrentTime();
      this.in_progress = true;
      this.counter = 0;
      this.notTraced = false;
    };
    Subsegment.prototype.addNewSubsegment = function addNewSubsegment(name) {
      const subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      return subsegment;
    };
    Subsegment.prototype.addSubsegmentWithoutSampling = function addSubsegmentWithoutSampling(subsegment) {
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
    };
    Subsegment.prototype.addNewSubsegmentWithoutSampling = function addNewSubsegmentWithoutSampling(name) {
      const subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
      return subsegment;
    };
    Subsegment.prototype.addSubsegment = function(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to add subsegment:" + subsegment + ' to subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments === void 0) {
        this.subsegments = [];
      }
      subsegment.segment = this.segment;
      subsegment.parent = this;
      subsegment.notTraced = subsegment.parent.notTraced;
      if (subsegment.end_time === void 0) {
        this.incrementCounter(subsegment.counter);
      }
      this.subsegments.push(subsegment);
    };
    Subsegment.prototype.removeSubsegment = function removeSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to remove subsegment:" + subsegment + ' from subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments !== void 0) {
        var index = this.subsegments.indexOf(subsegment);
        if (index >= 0) {
          this.subsegments.splice(index, 1);
        }
      }
    };
    Subsegment.prototype.addAttribute = function addAttribute(name, data) {
      this[name] = data;
    };
    Subsegment.prototype.addPrecursorId = function(id) {
      if (typeof id !== "string") {
        logger.getLogger().error("Failed to add id:" + id + " to subsegment " + this.name + ".  Precursor Ids must be of type string.");
      }
      if (this.precursor_ids === void 0) {
        this.precursor_ids = [];
      }
      this.precursor_ids.push(id);
    };
    Subsegment.prototype.addAnnotation = function(key, value) {
      if (typeof value !== "boolean" && typeof value !== "string" && !isFinite(value)) {
        logger.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Value must be of type string, number or boolean.");
        return;
      }
      if (typeof key !== "string") {
        logger.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
        return;
      }
      if (this.annotations === void 0) {
        this.annotations = {};
      }
      this.annotations[key] = value;
    };
    Subsegment.prototype.addMetadata = function(key, value, namespace) {
      if (typeof key !== "string") {
        logger.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
        return;
      }
      if (namespace && typeof namespace !== "string") {
        logger.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to subsegment " + this.name + ". Namespace must be of type string.");
        return;
      }
      var ns = namespace || "default";
      if (!this.metadata) {
        this.metadata = {};
      }
      if (!this.metadata[ns]) {
        this.metadata[ns] = {};
      }
      if (ns !== "__proto__") {
        this.metadata[ns][key] = value !== null && value !== void 0 ? value : "";
      }
    };
    Subsegment.prototype.addSqlData = function addSqlData(sqlData) {
      this.sql = sqlData;
    };
    Subsegment.prototype.addError = function addError(err, remote) {
      if (err == null || typeof err !== "object" && typeof err !== "string") {
        logger.getLogger().error("Failed to add error:" + err + ' to subsegment "' + this.name + '".  Not an object or string literal.');
        return;
      }
      this.addFaultFlag();
      if (this.segment && this.segment.exception) {
        if (err === this.segment.exception.ex) {
          this.fault = true;
          this.cause = { id: this.segment.exception.cause, exceptions: [] };
          return;
        }
        delete this.segment.exception;
      }
      if (this.segment) {
        this.segment.exception = {
          ex: err,
          cause: this.id
        };
      } else {
      }
      if (this.cause === void 0) {
        this.cause = {
          working_directory: process.cwd(),
          exceptions: []
        };
      }
      this.cause.exceptions.unshift(new CapturedException(err, remote));
    };
    Subsegment.prototype.addRemoteRequestData = function addRemoteRequestData(req, res, downstreamXRayEnabled) {
      this.http = new RemoteRequestData(req, res, downstreamXRayEnabled);
      if ("traced" in this.http.request) {
        this.traced = this.http.request.traced;
        delete this.http.request.traced;
      }
    };
    Subsegment.prototype.addFaultFlag = function addFaultFlag() {
      this.fault = true;
    };
    Subsegment.prototype.addErrorFlag = function addErrorFlag() {
      this.error = true;
    };
    Subsegment.prototype.addThrottleFlag = function addThrottleFlag() {
      this.throttle = true;
    };
    Subsegment.prototype.close = function close(err, remote) {
      var root = this.segment;
      this.end_time = SegmentUtils.getCurrentTime();
      delete this.in_progress;
      if (err) {
        this.addError(err, remote);
      }
      if (this.parent) {
        this.parent.decrementCounter();
      }
      if (root && root.counter > SegmentUtils.getStreamingThreshold()) {
        if (this.streamSubsegments() && this.parent) {
          this.parent.removeSubsegment(this);
        }
      }
    };
    Subsegment.prototype.incrementCounter = function incrementCounter(additional) {
      this.counter = additional ? this.counter + additional + 1 : this.counter + 1;
      if (this.parent) {
        this.parent.incrementCounter(additional);
      }
    };
    Subsegment.prototype.decrementCounter = function decrementCounter() {
      this.counter--;
      if (this.parent) {
        this.parent.decrementCounter();
      }
    };
    Subsegment.prototype.isClosed = function isClosed() {
      return !this.in_progress;
    };
    Subsegment.prototype.flush = function flush() {
      if (!this.parent || !this.segment) {
        logger.getLogger().error("Failed to flush subsegment: " + this.name + ". Subsegment must be added to a segment chain to flush.");
        return;
      }
      if (this.segment.trace_id) {
        if (this.segment.notTraced !== true && !this.notTraced) {
          SegmentEmitter.send(this);
        } else {
          logger.getLogger().debug("Ignoring flush on subsegment " + this.id + ". Associated segment is marked as not sampled.");
        }
      } else {
        logger.getLogger().debug("Ignoring flush on subsegment " + this.id + ". Associated segment is missing a trace ID.");
      }
    };
    Subsegment.prototype.streamSubsegments = function streamSubsegments() {
      if (this.isClosed() && this.counter <= 0) {
        this.flush();
        return true;
      } else if (this.subsegments && this.subsegments.length > 0) {
        var open = [];
        this.subsegments.forEach(function(child) {
          if (!child.streamSubsegments()) {
            open.push(child);
          }
        });
        this.subsegments = open;
      }
    };
    Subsegment.prototype.format = function format3() {
      this.type = "subsegment";
      if (this.parent) {
        this.parent_id = this.parent.id;
      }
      if (this.segment) {
        this.trace_id = this.segment.trace_id;
      }
      return JSON.stringify(this);
    };
    Subsegment.prototype.toString = function toString() {
      return JSON.stringify(this);
    };
    Subsegment.prototype.toJSON = function toJSON() {
      var ignore = ["segment", "parent", "counter"];
      if (this.subsegments == null || this.subsegments.length === 0) {
        ignore.push("subsegments");
      }
      var thisCopy = Utils.objectWithoutProperties(this, ignore, false);
      return thisCopy;
    };
    module2.exports = Subsegment;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/segment.js
var require_segment = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/segment.js"(exports, module2) {
    "use strict";
    var crypto = require("crypto");
    var CapturedException = require_captured_exception();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var Subsegment = require_subsegment();
    var TraceID = require_trace_id();
    var Utils = require_utils();
    var logger = require_logger();
    function Segment(name, rootId, parentId) {
      this.init(name, rootId, parentId);
    }
    Segment.prototype.init = function init(name, rootId, parentId) {
      if (typeof name != "string") {
        throw new Error("Segment name must be of type string.");
      }
      var traceId;
      if (rootId && typeof rootId == "string") {
        traceId = TraceID.FromString(rootId);
      } else {
        traceId = new TraceID();
      }
      var id = crypto.randomBytes(8).toString("hex");
      var startTime = SegmentUtils.getCurrentTime();
      this.trace_id = traceId.toString();
      this.id = id;
      this.start_time = startTime;
      this.name = name || "";
      this.in_progress = true;
      this.counter = 0;
      if (parentId) {
        this.parent_id = parentId;
      }
      if (SegmentUtils.serviceData) {
        this.setServiceData(SegmentUtils.serviceData);
      }
      if (SegmentUtils.pluginData) {
        this.addPluginData(SegmentUtils.pluginData);
      }
      if (SegmentUtils.origin) {
        this.origin = SegmentUtils.origin;
      }
      if (SegmentUtils.sdkData) {
        this.setSDKData(SegmentUtils.sdkData);
      }
    };
    Segment.prototype.addIncomingRequestData = function addIncomingRequestData(data) {
      this.http = data;
    };
    Segment.prototype.addAnnotation = function addAnnotation(key, value) {
      if (typeof value !== "boolean" && typeof value !== "string" && !isFinite(value)) {
        logger.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Value must be of type string, number or boolean.");
        return;
      }
      if (typeof key !== "string") {
        logger.getLogger().error("Failed to add annotation key: " + key + " value: " + value + " to subsegment " + this.name + ". Key must be of type string.");
        return;
      }
      if (this.annotations === void 0) {
        this.annotations = {};
      }
      this.annotations[key] = value;
    };
    Segment.prototype.setUser = function(user) {
      if (typeof user !== "string") {
        logger.getLogger().error("Set user: " + user + " failed. User IDs must be of type string.");
      }
      this.user = user;
    };
    Segment.prototype.addMetadata = function(key, value, namespace) {
      if (typeof key !== "string") {
        logger.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to segment " + this.name + ". Key must be of type string.");
        return;
      }
      if (namespace && typeof namespace !== "string") {
        logger.getLogger().error("Failed to add metadata key: " + key + " value: " + value + " to segment " + this.name + ". Namespace must be of type string.");
        return;
      }
      var ns = namespace || "default";
      if (!this.metadata) {
        this.metadata = {};
      }
      if (!this.metadata[ns]) {
        this.metadata[ns] = {};
      }
      if (ns !== "__proto__") {
        this.metadata[ns][key] = value !== null && value !== void 0 ? value : "";
      }
    };
    Segment.prototype.setSDKData = function setSDKData(data) {
      if (!data) {
        logger.getLogger().error("Add SDK data: " + data + " failed.Must not be empty.");
        return;
      }
      if (!this.aws) {
        this.aws = {};
      }
      this.aws.xray = data;
    };
    Segment.prototype.setMatchedSamplingRule = function setMatchedSamplingRule(ruleName) {
      if (this.aws) {
        this.aws = JSON.parse(JSON.stringify(this.aws));
      }
      if (this.aws && this.aws["xray"]) {
        this.aws.xray["rule_name"] = ruleName;
      } else {
        this.aws = { xray: { "rule_name": ruleName } };
      }
    };
    Segment.prototype.setServiceData = function setServiceData(data) {
      if (!data) {
        logger.getLogger().error("Add service data: " + data + " failed.Must not be empty.");
        return;
      }
      this.service = data;
    };
    Segment.prototype.addPluginData = function addPluginData(data) {
      if (this.aws === void 0) {
        this.aws = {};
      }
      Object.assign(this.aws, data);
    };
    Segment.prototype.addNewSubsegment = function addNewSubsegment(name) {
      var subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      return subsegment;
    };
    Segment.prototype.addSubsegmentWithoutSampling = function addSubsegmentWithoutSampling(subsegment) {
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
    };
    Segment.prototype.addNewSubsegmentWithoutSampling = function addNewSubsegmentWithoutSampling(name) {
      const subsegment = new Subsegment(name);
      this.addSubsegment(subsegment);
      subsegment.notTraced = true;
      return subsegment;
    };
    Segment.prototype.addSubsegment = function addSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Cannot add subsegment: " + subsegment + ". Not a subsegment.");
      }
      if (this.subsegments === void 0) {
        this.subsegments = [];
      }
      subsegment.segment = this;
      subsegment.parent = this;
      subsegment.notTraced = subsegment.parent.notTraced;
      this.subsegments.push(subsegment);
      if (!subsegment.end_time) {
        this.incrementCounter(subsegment.counter);
      }
    };
    Segment.prototype.removeSubsegment = function removeSubsegment(subsegment) {
      if (!(subsegment instanceof Subsegment)) {
        throw new Error("Failed to remove subsegment:" + subsegment + ' from subsegment "' + this.name + '".  Not a subsegment.');
      }
      if (this.subsegments !== void 0) {
        var index = this.subsegments.indexOf(subsegment);
        if (index >= 0) {
          this.subsegments.splice(index, 1);
        }
      }
    };
    Segment.prototype.addError = function addError(err, remote) {
      if (err == null || typeof err !== "object" && typeof err !== "string") {
        logger.getLogger().error("Failed to add error:" + err + ' to subsegment "' + this.name + '".  Not an object or string literal.');
        return;
      }
      this.addFaultFlag();
      if (this.exception) {
        if (err === this.exception.ex) {
          this.cause = { id: this.exception.cause };
          delete this.exception;
          return;
        }
        delete this.exception;
      }
      if (this.cause === void 0) {
        this.cause = {
          working_directory: process.cwd(),
          exceptions: []
        };
      }
      this.cause.exceptions.push(new CapturedException(err, remote));
    };
    Segment.prototype.addFaultFlag = function addFaultFlag() {
      this.fault = true;
    };
    Segment.prototype.addErrorFlag = function addErrorFlag() {
      this.error = true;
    };
    Segment.prototype.addThrottleFlag = function addThrottleFlag() {
      this.throttle = true;
    };
    Segment.prototype.isClosed = function isClosed() {
      return !this.in_progress;
    };
    Segment.prototype.incrementCounter = function incrementCounter(additional) {
      this.counter = additional ? this.counter + additional + 1 : this.counter + 1;
      if (this.counter > SegmentUtils.streamingThreshold && this.subsegments && this.subsegments.length > 0) {
        var open = [];
        this.subsegments.forEach(function(child) {
          if (!child.streamSubsegments()) {
            open.push(child);
          }
        });
        this.subsegments = open;
      }
    };
    Segment.prototype.decrementCounter = function decrementCounter() {
      this.counter--;
      if (this.counter <= 0 && this.isClosed()) {
        this.flush();
      }
    };
    Segment.prototype.close = function(err, remote) {
      if (!this.end_time) {
        this.end_time = SegmentUtils.getCurrentTime();
      }
      if (err !== void 0) {
        this.addError(err, remote);
      }
      delete this.in_progress;
      delete this.exception;
      if (this.counter <= 0) {
        this.flush();
      }
    };
    Segment.prototype.flush = function flush() {
      if (this.notTraced !== true) {
        delete this.exception;
        var thisCopy = Utils.objectWithoutProperties(this, ["counter", "notTraced"], true);
        SegmentEmitter.send(thisCopy);
      }
    };
    Segment.prototype.format = function format3() {
      var ignore = ["segment", "parent", "counter"];
      if (this.subsegments == null || this.subsegments.length === 0) {
        ignore.push("subsegments");
      }
      var thisCopy = Utils.objectWithoutProperties(this, ignore, false);
      return JSON.stringify(thisCopy);
    };
    Segment.prototype.toString = function toString() {
      return JSON.stringify(this);
    };
    module2.exports = Segment;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/context_utils.js
var require_context_utils = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/context_utils.js"(exports, module2) {
    "use strict";
    var cls = require_context();
    var logger = require_logger();
    var Segment = require_segment();
    var Subsegment = require_subsegment();
    var cls_mode = true;
    var NAMESPACE = "AWSXRay";
    var SEGMENT = "segment";
    var contextOverride = false;
    var contextUtils = {
      CONTEXT_MISSING_STRATEGY: {
        RUNTIME_ERROR: {
          contextMissing: function contextMissingRuntimeError(message) {
            throw new Error(message);
          }
        },
        LOG_ERROR: {
          contextMissing: function contextMissingLogError(message) {
            var err = new Error(message);
            logger.getLogger().error(err.stack);
          }
        },
        IGNORE_ERROR: {
          contextMissing: function contextMissingIgnoreError() {
          }
        }
      },
      contextMissingStrategy: {},
      resolveManualSegmentParams: function resolveManualSegmentParams(params) {
        if (params && !contextUtils.isAutomaticMode()) {
          var xraySegment = params.XRaySegment || params.XraySegment;
          var segment = params.Segment;
          var found = null;
          if (xraySegment && (xraySegment instanceof Segment || xraySegment instanceof Subsegment)) {
            found = xraySegment;
            delete params.XRaySegment;
            delete params.XraySegment;
          } else if (segment && (segment instanceof Segment || segment instanceof Subsegment)) {
            found = segment;
            delete params.Segment;
          }
          return found;
        }
      },
      getNamespace: function getNamespace() {
        return cls.getNamespace(NAMESPACE) || cls.createNamespace(NAMESPACE);
      },
      resolveSegment: function resolveSegment(segment) {
        if (cls_mode) {
          return this.getSegment();
        } else if (segment && !cls_mode) {
          return segment;
        } else if (!segment && !cls_mode) {
          contextUtils.contextMissingStrategy.contextMissing("No sub/segment specified. A sub/segment must be provided for manual mode.");
        }
      },
      getSegment: function getSegment() {
        if (cls_mode) {
          var segment = contextUtils.getNamespace(NAMESPACE).get(SEGMENT);
          if (!segment) {
            contextUtils.contextMissingStrategy.contextMissing("Failed to get the current sub/segment from the context.");
          } else if (segment instanceof Segment && process.env.LAMBDA_TASK_ROOT && segment.facade == true) {
            segment.resolveLambdaTraceData();
          }
          return segment;
        } else {
          contextUtils.contextMissingStrategy.contextMissing("Cannot get sub/segment from context. Not supported in manual mode.");
        }
      },
      setSegment: function setSegment(segment) {
        if (cls_mode) {
          if (!contextUtils.getNamespace(NAMESPACE).set(SEGMENT, segment)) {
            logger.getLogger().warn("Failed to set the current sub/segment on the context.");
          }
        } else {
          contextUtils.contextMissingStrategy.contextMissing("Cannot set sub/segment on context. Not supported in manual mode.");
        }
      },
      isAutomaticMode: function isAutomaticMode() {
        return cls_mode;
      },
      enableAutomaticMode: function enableAutomaticMode() {
        cls_mode = true;
        contextUtils.getNamespace(NAMESPACE);
        logger.getLogger().debug("Overriding AWS X-Ray SDK mode. Set to automatic mode.");
      },
      enableManualMode: function enableManualMode() {
        cls_mode = false;
        if (cls.getNamespace(NAMESPACE)) {
          cls.destroyNamespace(NAMESPACE);
        }
        logger.getLogger().debug("Overriding AWS X-Ray SDK mode. Set to manual mode.");
      },
      setContextMissingStrategy: function setContextMissingStrategy(strategy) {
        if (!contextOverride) {
          if (typeof strategy === "string") {
            var lookupStrategy = contextUtils.CONTEXT_MISSING_STRATEGY[strategy.toUpperCase()];
            if (lookupStrategy) {
              contextUtils.contextMissingStrategy.contextMissing = lookupStrategy.contextMissing;
              if (process.env.AWS_XRAY_CONTEXT_MISSING) {
                logger.getLogger().debug("AWS_XRAY_CONTEXT_MISSING is set. Configured context missing strategy to " + process.env.AWS_XRAY_CONTEXT_MISSING + ".");
              } else {
                logger.getLogger().debug("Configured context missing strategy to: " + strategy);
              }
            } else {
              throw new Error("Invalid context missing strategy: " + strategy + ". Valid values are " + Object.keys(contextUtils.CONTEXT_MISSING_STRATEGY) + ".");
            }
          } else if (typeof strategy === "function") {
            contextUtils.contextMissingStrategy.contextMissing = strategy;
            logger.getLogger().info("Configured custom context missing strategy to function: " + strategy.name);
          } else {
            throw new Error("Context missing strategy must be either a string or a custom function.");
          }
        } else {
          logger.getLogger().warn("Ignoring call to setContextMissingStrategy as AWS_XRAY_CONTEXT_MISSING is set. The current context missing strategy will not be changed.");
        }
      }
    };
    cls.createNamespace(NAMESPACE);
    logger.getLogger().debug("Starting the AWS X-Ray SDK in automatic mode (default).");
    if (process.env.AWS_XRAY_CONTEXT_MISSING) {
      contextUtils.setContextMissingStrategy(process.env.AWS_XRAY_CONTEXT_MISSING);
      contextOverride = true;
    } else {
      contextUtils.contextMissingStrategy.contextMissing = contextUtils.CONTEXT_MISSING_STRATEGY.LOG_ERROR.contextMissing;
      logger.getLogger().debug("Using default context missing strategy: LOG_ERROR");
    }
    module2.exports = contextUtils;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js
var require_incoming_request_data = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js"(exports, module2) {
    "use strict";
    var { getHttpResponseData } = require_segment_utils();
    function IncomingRequestData(req) {
      this.init(req);
    }
    IncomingRequestData.prototype.init = function init(req) {
      var forwarded = !!req.headers["x-forwarded-for"];
      var url;
      if (req.connection) {
        url = (req.connection.secure || req.connection.encrypted ? "https://" : "http://") + ((req.headers["host"] || "") + (req.url || ""));
      }
      this.request = {
        method: req.method || "",
        user_agent: req.headers["user-agent"] || "",
        client_ip: getClientIp(req) || "",
        url: url || ""
      };
      if (forwarded) {
        this.request.x_forwarded_for = forwarded;
      }
    };
    var getClientIp = function getClientIp2(req) {
      var clientIp;
      if (req.headers["x-forwarded-for"]) {
        clientIp = (req.headers["x-forwarded-for"] || "").split(",")[0];
      } else if (req.connection && req.connection.remoteAddress) {
        clientIp = req.connection.remoteAddress;
      } else if (req.socket && req.socket.remoteAddress) {
        clientIp = req.socket.remoteAddress;
      } else if (req.connection && req.connection.socket && req.connection.socket.remoteAddress) {
        clientIp = req.connection.socket.remoteAddress;
      }
      return clientIp;
    };
    IncomingRequestData.prototype.close = function close(res) {
      this.response = getHttpResponseData(res);
    };
    module2.exports = IncomingRequestData;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_reservoir.js
var require_local_reservoir = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_reservoir.js"(exports, module2) {
    "use strict";
    function LocalReservoir(fixedTarget, fallbackRate) {
      this.init(fixedTarget, fallbackRate);
    }
    LocalReservoir.prototype.init = function init(fixedTarget, fallbackRate) {
      this.usedThisSecond = 0;
      if (typeof fixedTarget === "number" && fixedTarget % 1 === 0 && fixedTarget >= 0) {
        this.fixedTarget = fixedTarget;
      } else {
        throw new Error('Error in sampling file. Rule attribute "fixed_target" must be a non-negative integer.');
      }
      if (typeof fallbackRate === "number" && fallbackRate >= 0 && fallbackRate <= 1) {
        this.fallbackRate = fallbackRate;
      } else {
        throw new Error('Error in sampling file. Rule attribute "rate" must be a number between 0 and 1 inclusive.');
      }
    };
    LocalReservoir.prototype.isSampled = function isSampled() {
      var now = Math.round(new Date().getTime() / 1e3);
      if (now !== this.thisSecond) {
        this.usedThisSecond = 0;
        this.thisSecond = now;
      }
      if (this.usedThisSecond >= this.fixedTarget) {
        return Math.random() < this.fallbackRate;
      }
      this.usedThisSecond++;
      return true;
    };
    module2.exports = LocalReservoir;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/resources/default_sampling_rules.json
var require_default_sampling_rules = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/resources/default_sampling_rules.json"(exports, module2) {
    module2.exports = {
      default: {
        fixed_target: 1,
        rate: 0.05
      },
      version: 2
    };
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_sampler.js
var require_local_sampler = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/local_sampler.js"(exports, module2) {
    "use strict";
    var fs2 = require("fs");
    var LocalReservoir = require_local_reservoir();
    var Utils = require_utils();
    var defaultRules = require_default_sampling_rules();
    var logger = require_logger();
    var LocalSampler = {
      shouldSample: function shouldSample(sampleRequest) {
        var host = sampleRequest.host;
        var httpMethod = sampleRequest.httpMethod;
        var urlPath = sampleRequest.urlPath;
        var formatted = "{ http_method: " + httpMethod + ", host: " + host + ", url_path: " + urlPath + " }";
        var matched;
        this.rules.some(function(rule) {
          if (rule.default || (host == null || Utils.wildcardMatch(rule.host, host) && (httpMethod == null || Utils.wildcardMatch(rule.http_method, httpMethod)) && (urlPath == null || Utils.wildcardMatch(rule.url_path, urlPath)))) {
            matched = rule.reservoir;
            logger.getLogger().debug("Local sampling rule match found for " + formatted + ". Matched " + (rule.default ? "default" : "{ http_method: " + rule.http_method + ", host: " + rule.host + ", url_path: " + rule.url_path + " }") + ". Using fixed_target: " + matched.fixedTarget + " and rate: " + matched.fallbackRate + ".");
            return true;
          }
        });
        if (matched) {
          return matched.isSampled();
        } else {
          logger.getLogger().debug("No sampling rule matched for " + formatted);
          return false;
        }
      },
      setLocalRules: function setLocalRules(source) {
        if (source) {
          if (typeof source === "string") {
            logger.getLogger().info("Using custom sampling rules file: " + source);
            this.rules = loadRulesConfig(JSON.parse(fs2.readFileSync(source, "utf8")));
          } else {
            logger.getLogger().info("Using custom sampling rules source.");
            this.rules = loadRulesConfig(source);
          }
        } else {
          this.rules = parseRulesConfig(defaultRules);
        }
      }
    };
    var loadRulesConfig = function loadRulesConfig2(config) {
      if (!config.version) {
        throw new Error('Error in sampling file. Missing "version" attribute.');
      }
      if (config.version === 1 || config.version === 2) {
        return parseRulesConfig(config);
      } else {
        throw new Error('Error in sampling file. Unknown version "' + config.version + '".');
      }
    };
    var parseRulesConfig = function parseRulesConfig2(config) {
      var defaultRule;
      var rules = [];
      if (config.default) {
        var missing = [];
        for (var key in config.default) {
          if (key !== "fixed_target" && key !== "rate") {
            throw new Error("Error in sampling file. Invalid attribute for default: " + key + '. Valid attributes for default are "fixed_target" and "rate".');
          } else if (typeof config.default[key] !== "number") {
            throw new Error("Error in sampling file. Default " + key + " must be a number.");
          }
        }
        if (typeof config.default.fixed_target === "undefined") {
          missing.push("fixed_target");
        }
        if (typeof config.default.rate === "undefined") {
          missing.push("rate");
        }
        if (missing.length !== 0) {
          throw new Error("Error in sampling file. Missing required attributes for default: " + missing + ".");
        }
        defaultRule = { default: true, reservoir: new LocalReservoir(config.default.fixed_target, config.default.rate) };
      } else {
        throw new Error('Error in sampling file. Expecting "default" object to be defined with attributes "fixed_target" and "rate".');
      }
      if (Array.isArray(config.rules)) {
        config.rules.forEach(function(rawRule) {
          var params = {};
          var required;
          if (config.version === 2) {
            required = { host: 1, http_method: 1, url_path: 1, fixed_target: 1, rate: 1 };
          }
          if (config.version === 1) {
            required = { service_name: 1, http_method: 1, url_path: 1, fixed_target: 1, rate: 1 };
          }
          for (var key2 in rawRule) {
            var value = rawRule[key2];
            if (!required[key2] && key2 != "description") {
              throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + " has invalid attribute: " + key2 + ".");
            } else if (key2 != "description" && !value && value !== 0) {
              throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + ' attribute "' + key2 + '" has invalid value: ' + value + ".");
            } else {
              if (config.version === 2) {
                params[key2] = value;
              }
              if (config.version === 1 && key2 === "service_name") {
                params["host"] = value;
              } else {
                params[key2] = value;
              }
              delete required[key2];
            }
          }
          if (Object.keys(required).length !== 0 && required.constructor === Object) {
            throw new Error("Error in sampling file. Rule " + JSON.stringify(rawRule) + " is missing required attributes: " + Object.keys(required) + ".");
          }
          var rule = params;
          rule.reservoir = new LocalReservoir(rawRule.fixed_target, rawRule.rate);
          rules.push(rule);
        });
      }
      rules.push(defaultRule);
      return rules;
    };
    LocalSampler.setLocalRules();
    module2.exports = LocalSampler;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/reservoir.js
var require_reservoir = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/reservoir.js"(exports, module2) {
    "use strict";
    function Reservoir() {
      this.init();
    }
    Reservoir.prototype.init = function init() {
      this.quota = null;
      this.TTL = null;
      this.takenThisSec = 0;
      this.borrowedThisSec = 0;
      this.reportInterval = 1;
      this.reportElapsed = 0;
    };
    Reservoir.prototype.borrowOrTake = function borrowOrTake(now, canBorrow) {
      this.adjustThisSec(now);
      if (this.quota >= 0 && this.TTL >= now) {
        if (this.takenThisSec >= this.quota) {
          return false;
        }
        this.takenThisSec++;
        return "take";
      }
      if (canBorrow) {
        if (this.borrowedThisSec >= 1) {
          return false;
        }
        this.borrowedThisSec++;
        return "borrow";
      }
    };
    Reservoir.prototype.adjustThisSec = function adjustThisSec(now) {
      if (now !== this.thisSec) {
        this.takenThisSec = 0;
        this.borrowedThisSec = 0;
        this.thisSec = now;
      }
    };
    Reservoir.prototype.loadNewQuota = function loadNewQuota(quota, TTL, interval) {
      if (quota) {
        this.quota = quota;
      }
      if (TTL) {
        this.TTL = TTL;
      }
      if (interval) {
        this.reportInterval = interval / 10;
      }
    };
    Reservoir.prototype.timeToReport = function timeToReport() {
      if (this.reportElapsed + 1 >= this.reportInterval) {
        this.reportElapsed = 0;
        return true;
      } else {
        this.reportElapsed += 1;
        return false;
      }
    };
    module2.exports = Reservoir;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/sampling_rule.js
var require_sampling_rule = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/sampling_rule.js"(exports, module2) {
    "use strict";
    var Utils = require_utils();
    var Reservoir = require_reservoir();
    function SamplingRule(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName, serviceType) {
      this.init(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName, serviceType);
    }
    SamplingRule.prototype.init = function init(name, priority, rate, reservoirSize, host, httpMethod, urlPath, serviceName, serviceType) {
      this.name = name;
      this.priority = priority;
      this.rate = rate;
      this.host = host;
      this.httpMethod = httpMethod;
      this.urlPath = urlPath;
      this.serviceName = serviceName;
      this.serviceType = serviceType;
      this.reservoir = new Reservoir();
      this.borrow = !!reservoirSize;
      this.resetStatistics();
    };
    SamplingRule.prototype.match = function match(sampleRequest) {
      var host = sampleRequest.host;
      var httpMethod = sampleRequest.httpMethod;
      var serviceName = sampleRequest.serviceName;
      var urlPath = sampleRequest.urlPath;
      var serviceType = sampleRequest.serviceType;
      return this.isDefault() || (!host || Utils.wildcardMatch(this.host, host)) && (!httpMethod || Utils.wildcardMatch(this.httpMethod, httpMethod)) && (!serviceName || Utils.wildcardMatch(this.serviceName, serviceName)) && (!urlPath || Utils.wildcardMatch(this.urlPath, urlPath)) && (!serviceType || Utils.wildcardMatch(this.serviceType, serviceType));
    };
    SamplingRule.prototype.snapshotStatistics = function snapshotStatistics() {
      var statistics = {
        requestCount: this.requestCount,
        borrowCount: this.borrowCount,
        sampledCount: this.sampledCount
      };
      this.resetStatistics();
      return statistics;
    };
    SamplingRule.prototype.merge = function merge(rule) {
      this.reservoir = rule.reservoir;
      this.requestCount = rule.requestCount;
      this.borrowCount = rule.borrowCount;
      this.sampledCount = rule.sampledCount;
      rule = null;
    };
    SamplingRule.prototype.isDefault = function isDefault() {
      return this.name === "Default";
    };
    SamplingRule.prototype.incrementRequestCount = function incrementRequestCount() {
      this.requestCount++;
    };
    SamplingRule.prototype.incrementBorrowCount = function incrementBorrowCount() {
      this.borrowCount++;
    };
    SamplingRule.prototype.incrementSampledCount = function incrementSampledCount() {
      this.sampledCount++;
    };
    SamplingRule.prototype.setRate = function setRate(rate) {
      this.rate = rate;
    };
    SamplingRule.prototype.getRate = function getRate() {
      return this.rate;
    };
    SamplingRule.prototype.getName = function getName() {
      return this.name;
    };
    SamplingRule.prototype.getPriority = function getPriority() {
      return this.priority;
    };
    SamplingRule.prototype.getReservoir = function getReservoir() {
      return this.reservoir;
    };
    SamplingRule.prototype.resetStatistics = function resetStatistics() {
      this.requestCount = 0;
      this.borrowCount = 0;
      this.sampledCount = 0;
    };
    SamplingRule.prototype.canBorrow = function canBorrow() {
      return this.borrow;
    };
    SamplingRule.prototype.everMatched = function everMatched() {
      return this.requestCount > 0;
    };
    SamplingRule.prototype.timeToReport = function timeToReport() {
      return this.reservoir.timeToReport();
    };
    module2.exports = SamplingRule;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/service_connector.js
var require_service_connector = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/service_connector.js"(exports, module2) {
    "use strict";
    var crypto = require("crypto");
    var logger = require_logger();
    var SamplingRule = require_sampling_rule();
    var DaemonConfig = require_daemon_config();
    var util = require("util");
    var http = require("http");
    var ServiceConnector = {
      clientId: crypto.randomBytes(12).toString("hex"),
      samplingRulesPath: "/GetSamplingRules",
      samplingTargetsPath: "/SamplingTargets",
      logger,
      httpClient: http,
      fetchSamplingRules: function fetchSamplingRules(callback) {
        const body = "{}";
        const options = getOptions(this.samplingRulesPath, body.length);
        const httpReq = this.httpClient.__request ? this.httpClient.__request : this.httpClient.request;
        const req = httpReq(options, (res) => {
          var data = "";
          res.on("data", (d) => {
            data += d;
          });
          res.on("error", (error) => {
            callback(error);
          });
          res.on("end", () => {
            var dataObj;
            try {
              dataObj = JSON.parse(data);
            } catch (err) {
              callback(err);
              return;
            }
            if (!dataObj) {
              callback(new Error("AWS X-Ray GetSamplingRules API returned empty response"));
              return;
            }
            var newRules = assembleRules(dataObj);
            callback(null, newRules);
          });
        });
        req.on("error", () => {
          callback(new Error(`Failed to connect to X-Ray daemon at ${options.hostname}:${options.port} to get sampling rules.`));
        });
        req.write(body);
        req.end();
      },
      fetchTargets: function fetchTargets(rules, callback) {
        const body = JSON.stringify(constructStatisticsDocs(rules));
        const options = getOptions(this.samplingTargetsPath, body.length);
        const httpReq = this.httpClient.__request ? this.httpClient.__request : this.httpClient.request;
        const req = httpReq(options, (res) => {
          var data = "";
          res.on("data", (d) => {
            data += d;
          });
          res.on("error", (error) => {
            callback(error);
          });
          res.on("end", () => {
            var dataObj;
            try {
              dataObj = JSON.parse(data);
            } catch (err) {
              callback(err);
              return;
            }
            if (!dataObj || typeof dataObj["LastRuleModification"] != "number") {
              callback(new Error("AWS X-Ray SamplingTargets API returned invalid response"));
              return;
            }
            var targetsMapping = assembleTargets(dataObj);
            var ruleFreshness = dateToEpoch(dataObj["LastRuleModification"]);
            callback(null, targetsMapping, ruleFreshness);
          });
        });
        req.on("error", () => {
          callback(new Error(`Failed to connect to X-Ray daemon at ${options.hostname}:${options.port} to get sampling targets.`));
        });
        req.write(body);
        req.end();
      }
    };
    var constructStatisticsDocs = function constructStatisticsDocs2(rules) {
      var documents = [];
      var now = Math.floor(new Date().getTime() / 1e3);
      rules.forEach(function(rule) {
        var statistics = rule.snapshotStatistics();
        var doc = {
          "RuleName": rule.getName(),
          "ClientID": ServiceConnector.clientId,
          "RequestCount": statistics.requestCount,
          "BorrowCount": statistics.borrowCount,
          "SampledCount": statistics.sampledCount,
          "Timestamp": now
        };
        documents.push(doc);
      });
      return { SamplingStatisticsDocuments: documents };
    };
    var assembleRules = function assembleRules2(data) {
      var newRules = [];
      var ruleList = data["SamplingRuleRecords"] || [];
      ruleList.forEach(function(ruleRecord) {
        ruleRecord = ruleRecord["SamplingRule"];
        if (isRuleValid(ruleRecord)) {
          var newRule = new SamplingRule(ruleRecord["RuleName"], ruleRecord["Priority"], ruleRecord["FixedRate"], ruleRecord["ReservoirSize"], ruleRecord["Host"], ruleRecord["HTTPMethod"], ruleRecord["URLPath"], ruleRecord["ServiceName"], ruleRecord["ServiceType"]);
          newRules.push(newRule);
        }
      });
      return newRules;
    };
    var assembleTargets = function assembleTargets2(data) {
      var docs = data["SamplingTargetDocuments"] || [];
      var targetsMapping = {};
      docs.forEach(function(doc) {
        var newTarget = {
          rate: doc["FixedRate"],
          quota: doc["ReservoirQuota"],
          TTL: dateToEpoch(doc["ReservoirQuotaTTL"]),
          interval: doc["Interval"]
        };
        targetsMapping[doc["RuleName"]] = newTarget;
      });
      return targetsMapping;
    };
    var isRuleValid = function isRuleValid2(record) {
      return record["Version"] === 1 && record["ResourceARN"] === "*" && record["Attributes"] && Object.keys(record["Attributes"]).length === 0 && record["ServiceType"] && record["RuleName"] && record["Priority"] && typeof record["FixedRate"] == "number";
    };
    var dateToEpoch = function dateToEpoch2(date) {
      return new Date(date).getTime() / 1e3;
    };
    var getOptions = function getOptions2(path, contentLength) {
      const options = {
        hostname: DaemonConfig.tcp_ip,
        port: DaemonConfig.tcp_port,
        method: "POST",
        path,
        headers: {
          "Content-Type": "application/json",
          "Content-Length": contentLength,
          "Host": util.format("%s:%d", DaemonConfig.tcp_ip, DaemonConfig.tcp_port)
        }
      };
      return options;
    };
    module2.exports = ServiceConnector;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_cache.js
var require_rule_cache = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_cache.js"(exports, module2) {
    "use strict";
    var TTL = 60 * 60;
    var RuleCache = {
      rules: [],
      lastUpdated: null,
      getMatchedRule: function getMatchedRule(sampleRequest, now) {
        if (isExpired(now)) {
          return null;
        }
        var matchedRule;
        this.rules.forEach(function(rule) {
          if (!matchedRule && rule.match(sampleRequest)) {
            matchedRule = rule;
          }
          if (rule.isDefault() && !matchedRule) {
            matchedRule = rule;
          }
        });
        return matchedRule;
      },
      loadRules: function loadRules(rules) {
        var oldRules = {};
        this.rules.forEach(function(rule) {
          oldRules[rule.getName()] = rule;
        });
        this.rules = rules;
        this.rules.forEach(function(rule) {
          var oldRule = oldRules[rule.getName()];
          if (oldRule) {
            rule.merge(oldRule);
          }
        });
        this.rules.sort(function(a, b) {
          var v = a.getPriority() - b.getPriority();
          if (v !== 0) {
            return v;
          }
          if (a.getName() > b.getName()) {
            return 1;
          } else {
            return -1;
          }
        });
      },
      loadTargets: function loadTargets(targetsMapping) {
        this.rules.forEach(function(rule) {
          var target = targetsMapping[rule.getName()];
          if (target) {
            rule.getReservoir().loadNewQuota(target.quota, target.TTL, target.interval);
            rule.setRate(target.rate);
          }
        });
      },
      getRules: function getRules() {
        return this.rules;
      },
      timestamp: function timestamp(now) {
        this.lastUpdated = now;
      },
      getLastUpdated: function getLastUpdated() {
        return this.lastUpdated;
      }
    };
    var isExpired = function isExpired2(now) {
      if (!RuleCache.getLastUpdated()) {
        return true;
      }
      return now > RuleCache.getLastUpdated() + TTL;
    };
    module2.exports = RuleCache;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_poller.js
var require_rule_poller = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/rule_poller.js"(exports, module2) {
    "use strict";
    var logger = require_logger();
    var ServiceConnector = require_service_connector();
    var ruleCache = require_rule_cache();
    var DEFAULT_INTERVAL = 5 * 60 * 1e3;
    var RulePoller = {
      start: function start() {
        if (this.poller) {
          clearInterval(this.poller);
        }
        refresh(false);
        this.poller = setInterval(refresh, DEFAULT_INTERVAL);
        this.poller.unref();
      }
    };
    var refresh = function refresh2(jitter) {
      jitter = typeof jitter === "undefined" ? true : jitter;
      if (jitter) {
        var delay = getJitter();
        setTimeout(refreshWithFirewall, delay);
      } else {
        refreshWithFirewall();
      }
    };
    var refreshWithFirewall = function refreshWithFirewall2() {
      try {
        refreshCache();
      } catch (e) {
        logger.getLogger().warn("Encountered unexpected exception when fetching sampling rules: " + e);
      }
    };
    var refreshCache = function refreshCache2() {
      var now = Math.floor(new Date().getTime() / 1e3);
      ServiceConnector.fetchSamplingRules(function(err, newRules) {
        if (err) {
          logger.getLogger().warn("Failed to retrieve sampling rules from X-Ray service:", err);
        } else if (newRules.length !== 0) {
          ruleCache.loadRules(newRules);
          ruleCache.timestamp(now);
          logger.getLogger().info("Successfully refreshed centralized sampling rule cache.");
        }
      });
    };
    var getJitter = function getJitter2() {
      return Math.random() * 5;
    };
    module2.exports = RulePoller;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/target_poller.js
var require_target_poller = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/target_poller.js"(exports, module2) {
    "use strict";
    var rulePoller = require_rule_poller();
    var serviceConnector = require_service_connector();
    var ruleCache = require_rule_cache();
    var logger = require_logger();
    var DEFAULT_INTERVAL = 10 * 1e3;
    var TargetPoller = {
      interval: DEFAULT_INTERVAL,
      start: function start() {
        this.poller = setInterval(refreshWithFirewall, DEFAULT_INTERVAL + getJitter());
        this.poller.unref();
      }
    };
    var refreshWithFirewall = function refreshWithFirewall2() {
      try {
        refresh();
      } catch (e) {
        logger.getLogger().warn("Encountered unexpected exception when fetching sampling targets: " + e);
      }
    };
    var refresh = function refresh2() {
      var candidates = getCandidates();
      if (candidates && candidates.length > 0) {
        serviceConnector.fetchTargets(candidates, function(err, targetsMapping, ruleFreshness) {
          if (err) {
            logger.getLogger().warn("Failed to retrieve sampling targets from X-Ray service:", err);
            return;
          }
          ruleCache.loadTargets(targetsMapping);
          if (ruleFreshness > ruleCache.getLastUpdated()) {
            logger.getLogger().info("Performing out-of-band sampling rule polling to fetch updated rules.");
            rulePoller.start();
          }
          logger.getLogger().info("Successfully reported rule statistics to get new sampling quota.");
        });
      }
    };
    var getCandidates = function getCandidates2() {
      var rules = ruleCache.getRules();
      var candidates = [];
      rules.forEach(function(rule) {
        if (rule.everMatched() && rule.timeToReport()) {
          candidates.push(rule);
        }
      });
      return candidates;
    };
    var getJitter = function getJitter2() {
      return Math.random() / TargetPoller.interval;
    };
    module2.exports = TargetPoller;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/default_sampler.js
var require_default_sampler = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/sampling/default_sampler.js"(exports, module2) {
    "use strict";
    var logger = require_logger();
    var util = require("util");
    var SegmentUtils = require_segment_utils();
    var DefaultSampler = {
      localSampler: require_local_sampler(),
      rulePoller: require_rule_poller(),
      targetPoller: require_target_poller(),
      ruleCache: require_rule_cache(),
      started: false,
      shouldSample: function shouldSample(sampleRequest) {
        try {
          if (!this.started) {
            this.start();
          }
          if (!sampleRequest.serviceType) {
            sampleRequest.serviceType = SegmentUtils.origin;
          }
          var now = Math.floor(new Date().getTime() / 1e3);
          var matchedRule = this.ruleCache.getMatchedRule(sampleRequest, now);
          if (matchedRule) {
            logger.getLogger().debug(util.format("Rule %s is matched.", matchedRule.getName()));
            return processMatchedRule(matchedRule, now);
          } else {
            logger.getLogger().info("No effective centralized sampling rule match. Fallback to local rules.");
            return this.localSampler.shouldSample(sampleRequest);
          }
        } catch (err) {
          logger.getLogger().error("Unhandled exception by the SDK during making sampling decisions: " + err);
        }
      },
      setLocalRules: function setLocalRules(source) {
        this.localSampler.setLocalRules(source);
      },
      start: function start() {
        if (!this.started) {
          this.rulePoller.start();
          this.targetPoller.start();
          this.started = true;
        }
      }
    };
    var processMatchedRule = function processMatchedRule2(rule, now) {
      rule.incrementRequestCount();
      var reservoir = rule.getReservoir();
      var sample = true;
      var decision = reservoir.borrowOrTake(now, rule.canBorrow());
      if (decision === "borrow") {
        rule.incrementBorrowCount();
      } else if (decision === "take") {
        rule.incrementSampledCount();
      } else if (Math.random() <= rule.getRate()) {
        rule.incrementSampledCount();
      } else {
        sample = false;
      }
      if (sample) {
        return rule.getName();
      } else {
        return false;
      }
    };
    module2.exports = DefaultSampler;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js
var require_mw_utils = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js"(exports, module2) {
    "use strict";
    var Segment = require_segment();
    var IncomingRequestData = require_incoming_request_data();
    var logger = require_logger();
    var coreUtils = require_utils();
    var wildcardMatch = require_utils().wildcardMatch;
    var processTraceData = require_utils().processTraceData;
    var XRAY_HEADER = "x-amzn-trace-id";
    var overrideFlag = !!process.env.AWS_XRAY_TRACING_NAME;
    var utils = {
      defaultName: process.env.AWS_XRAY_TRACING_NAME,
      dynamicNaming: false,
      hostPattern: null,
      sampler: require_default_sampler(),
      enableDynamicNaming: function(hostPattern) {
        this.dynamicNaming = true;
        if (hostPattern && typeof hostPattern !== "string") {
          throw new Error("Host pattern must be a string.");
        }
        this.hostPattern = hostPattern || null;
      },
      processHeaders: function processHeaders(req) {
        var amznTraceHeader = {};
        if (req && req.headers && req.headers[XRAY_HEADER]) {
          amznTraceHeader = processTraceData(req.headers[XRAY_HEADER]);
        }
        return amznTraceHeader;
      },
      resolveName: function resolveName(hostHeader) {
        var name;
        if (this.dynamicNaming && hostHeader) {
          name = this.hostPattern ? wildcardMatch(this.hostPattern, hostHeader) ? hostHeader : this.defaultName : hostHeader;
        } else {
          name = this.defaultName;
        }
        return name;
      },
      resolveSampling: function resolveSampling(amznTraceHeader, segment, res) {
        var isSampled;
        if (amznTraceHeader.sampled === "1") {
          isSampled = true;
        } else if (amznTraceHeader.sampled === "0") {
          isSampled = false;
        } else {
          var sampleRequest = {
            host: res.req.headers.host,
            httpMethod: res.req.method,
            urlPath: res.req.url,
            serviceName: segment.name
          };
          isSampled = this.sampler.shouldSample(sampleRequest);
          if (isSampled instanceof String || typeof isSampled === "string") {
            segment.setMatchedSamplingRule(isSampled);
            isSampled = true;
          }
        }
        if (amznTraceHeader.sampled === "?") {
          res.header[XRAY_HEADER] = "Root=" + amznTraceHeader.root + ";Sampled=" + (isSampled ? "1" : "0");
        }
        if (!isSampled) {
          segment.notTraced = true;
        }
      },
      setDefaultName: function setDefaultName(name) {
        if (!overrideFlag) {
          this.defaultName = name;
        }
      },
      disableCentralizedSampling: function disableCentralizedSampling() {
        this.sampler = require_local_sampler();
      },
      setSamplingRules: function setSamplingRules(source) {
        if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
          throw new Error("Please specify a path to the local sampling rules file, or supply an object containing the rules.");
        }
        this.sampler.setLocalRules(source);
      },
      middlewareLog: function middlewareLog(message, url, segment) {
        logger.getLogger().debug(message + ": { url: " + url + ", name: " + segment.name + ", trace_id: " + segment.trace_id + ", id: " + segment.id + ", sampled: " + !segment.notTraced + " }");
      },
      traceRequestResponseCycle: function traceRequestResponseCycle(req, res) {
        var amznTraceHeader = this.processHeaders(req);
        var name = this.resolveName(req.headers.host);
        var segment = new Segment(name, amznTraceHeader.root, amznTraceHeader.parent);
        var responseWithEmbeddedRequest = Object.assign({}, res, { req });
        this.resolveSampling(amznTraceHeader, segment, responseWithEmbeddedRequest);
        segment.addIncomingRequestData(new IncomingRequestData(req));
        this.middlewareLog("Starting middleware segment", req.url, segment);
        var middlewareLog = this.middlewareLog;
        var didEnd = false;
        var endSegment = function() {
          if (didEnd) {
            return;
          }
          didEnd = true;
          if (res.statusCode === 429) {
            segment.addThrottleFlag();
          }
          const cause = coreUtils.getCauseTypeFromHttpStatus(res.statusCode);
          if (cause) {
            segment[cause] = true;
          }
          segment.http.close(res);
          segment.close();
          middlewareLog("Closed middleware segment successfully", req.url, segment);
        };
        res.on("finish", endSegment);
        res.on("close", endSegment);
        return segment;
      }
    };
    module2.exports = utils;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/env/aws_lambda.js
var require_aws_lambda = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/env/aws_lambda.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var mwUtils = require_mw_utils();
    var LambdaUtils = require_utils().LambdaUtils;
    var Segment = require_segment();
    var SegmentEmitter = require_segment_emitter();
    var SegmentUtils = require_segment_utils();
    var logger = require_logger();
    var TraceID = require_trace_id();
    var xAmznTraceIdPrev = null;
    module2.exports.init = function init() {
      contextUtils.enableManualMode = function() {
        logger.getLogger().warn("AWS Lambda does not support AWS X-Ray manual mode.");
      };
      SegmentEmitter.disableReusableSocket();
      SegmentUtils.setStreamingThreshold(0);
      logger.getLogger().info("Disabling centralized sampling in Lambda environment.");
      mwUtils.disableCentralizedSampling();
      var namespace = contextUtils.getNamespace();
      namespace.enter(namespace.createContext());
      contextUtils.setSegment(facadeSegment());
    };
    var facadeSegment = function facadeSegment2() {
      var segment = new Segment("facade");
      var whitelistFcn = ["addNewSubsegment", "addSubsegment", "removeSubsegment", "toString", "addSubsegmentWithoutSampling", "addNewSubsegmentWithoutSampling"];
      var silentFcn = ["incrementCounter", "decrementCounter", "isClosed", "close", "format", "flush"];
      var xAmznTraceId = process.env._X_AMZN_TRACE_ID;
      for (var key in segment) {
        if (typeof segment[key] === "function" && whitelistFcn.indexOf(key) === -1) {
          if (silentFcn.indexOf(key) === -1) {
            segment[key] = function() {
              var func = key;
              return function facade() {
                logger.getLogger().warn('Function "' + func + '" cannot be called on an AWS Lambda segment. Please use a subsegment to record data.');
                return;
              };
            }();
          } else {
            segment[key] = function facade() {
              return;
            };
          }
        }
      }
      segment.trace_id = TraceID.Invalid().toString();
      segment.isClosed = function() {
        return true;
      };
      segment.in_progress = false;
      segment.counter = 1;
      segment.notTraced = true;
      segment.facade = true;
      segment.reset = function reset() {
        this.trace_id = TraceID.Invalid().toString();
        this.id = "00000000";
        delete this.subsegments;
        this.notTraced = true;
      };
      segment.resolveLambdaTraceData = function resolveLambdaTraceData() {
        var xAmznLambda = process.env._X_AMZN_TRACE_ID;
        if (xAmznLambda) {
          if (xAmznLambda != xAmznTraceIdPrev) {
            this.reset();
            if (LambdaUtils.populateTraceData(segment, xAmznLambda)) {
              xAmznTraceIdPrev = xAmznLambda;
            }
          }
        } else {
          this.reset();
          contextUtils.contextMissingStrategy.contextMissing("Missing AWS Lambda trace data for X-Ray. Ensure Active Tracing is enabled and no subsegments are created outside the function handler.");
        }
      };
      if (LambdaUtils.validTraceData(xAmznTraceId)) {
        if (LambdaUtils.populateTraceData(segment, xAmznTraceId)) {
          xAmznTraceIdPrev = xAmznTraceId;
        }
      }
      return segment;
    };
  }
});

// ../../../node_modules/aws-xray-sdk-core/package.json
var require_package = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/package.json"(exports, module2) {
    module2.exports = {
      name: "aws-xray-sdk-core",
      version: "3.5.0",
      description: "AWS X-Ray SDK for Javascript",
      author: "Amazon Web Services",
      contributors: [
        "Sandra McMullen <mcmuls@amazon.com>",
        "William Armiros <armiros@amazon.com>",
        "Moritz Onken <onken@netcubed.de>"
      ],
      files: [
        "dist/lib/**/*",
        "LICENSE",
        "README.md"
      ],
      main: "dist/lib/index.js",
      types: "dist/lib/index.d.ts",
      engines: {
        node: ">= 14.x"
      },
      directories: {
        test: "test"
      },
      "//": "@types/cls-hooked is exposed in API so must be in dependencies, not devDependencies",
      dependencies: {
        "@aws-sdk/service-error-classification": "^3.4.1",
        "@aws-sdk/types": "^3.4.1",
        "@types/cls-hooked": "^4.3.3",
        "atomic-batcher": "^1.0.2",
        "cls-hooked": "^4.2.2",
        semver: "^7.3.8"
      },
      scripts: {
        prepare: "npm run compile",
        compile: "tsc && npm run copy-lib && npm run copy-test",
        "copy-lib": "find lib -type f \\( -name '*.d.ts' -o -name '*.json' \\) | xargs -I % ../../scripts/cp-with-structure.sh % dist",
        "copy-test": "find test -name '*.json' | xargs -I % ../../scripts/cp-with-structure.sh % dist",
        lint: "eslint .",
        "lint:fix": "eslint . --fix",
        test: "npm run compile && mocha --recursive ./dist/test/ -R spec && tsd && mocha --recursive ./dist/test_async/ -R spec",
        "test-d": "tsd",
        "test-async": "npm run compile && mocha --recursive ./dist/test_async/ -R spec",
        clean: "rm -rf dist && rm -rf node_modules",
        testcov: "nyc npm run test",
        reportcov: "nyc report --reporter=text-lcov > coverage.lcov && codecov"
      },
      keywords: [
        "amazon",
        "api",
        "aws",
        "core",
        "xray",
        "x-ray",
        "x ray"
      ],
      license: "Apache-2.0",
      repository: "https://github.com/aws/aws-xray-sdk-node/tree/master/packages/core",
      gitHead: "0579d9c75e08f8747f9eb87596bea58a7d7e9e25"
    };
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/plugin.js
var require_plugin = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/plugin.js"(exports, module2) {
    "use strict";
    var http = require("http");
    var Plugin = {
      METADATA_TIMEOUT: 1e3,
      getPluginMetadata: function(options, callback) {
        const METADATA_RETRY_TIMEOUT = 250;
        const METADATA_RETRIES = 5;
        var retries = METADATA_RETRIES;
        var getMetadata = function() {
          var httpReq = http.__request ? http.__request : http.request;
          var req = httpReq(options, function(res) {
            var body = "";
            res.on("data", function(chunk) {
              body += chunk;
            });
            res.on("end", function() {
              if (this.statusCode === 200 || this.statusCode === 300) {
                try {
                  body = JSON.parse(body);
                } catch (e) {
                  callback(e);
                  return;
                }
                callback(null, body);
              } else if (retries > 0 && Math.floor(this.statusCode / 100) === 5) {
                retries--;
                setTimeout(getMetadata, METADATA_RETRY_TIMEOUT);
              } else {
                callback(new Error(`Failed to retrieve metadata with options: ${options}`));
              }
            });
          });
          req.on("error", function(err) {
            callback(err);
          });
          req.on("timeout", function() {
            req.abort();
          });
          req.setTimeout(Plugin.METADATA_TIMEOUT);
          req.end();
        };
        getMetadata();
      }
    };
    module2.exports = Plugin;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js
var require_ec2_plugin = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js"(exports, module2) {
    "use strict";
    var Plugin = require_plugin();
    var logger = require_logger();
    var http = require("http");
    var EC2Plugin = {
      getData: function(callback) {
        const METADATA_PATH = "/latest/dynamic/instance-identity/document";
        function populateMetadata(token) {
          const options = getOptions(METADATA_PATH, "GET", token ? { "X-aws-ec2-metadata-token": token } : {});
          Plugin.getPluginMetadata(options, function(err, data) {
            if (err || !data) {
              logger.getLogger().error("Error loading EC2 plugin metadata: ", err ? err.toString() : "Could not retrieve data from IMDS.");
              callback();
              return;
            }
            const metadata = {
              ec2: {
                instance_id: data.instanceId,
                availability_zone: data.availabilityZone,
                instance_size: data.instanceType,
                ami_id: data.imageId
              }
            };
            callback(metadata);
          });
        }
        getToken(function(token) {
          if (token === null) {
            logger.getLogger().debug("EC2Plugin failed to get token from IMDSv2. Falling back to IMDSv1.");
          }
          populateMetadata(token);
        });
      },
      originName: "AWS::EC2::Instance"
    };
    function getToken(callback) {
      const httpReq = http.__request ? http.__request : http.request;
      const TTL = 60;
      const TOKEN_PATH = "/latest/api/token";
      const options = getOptions(TOKEN_PATH, "PUT", {
        "X-aws-ec2-metadata-token-ttl-seconds": TTL
      });
      let req = httpReq(options, function(res) {
        let body = "";
        res.on("data", function(chunk) {
          body += chunk;
        });
        res.on("end", function() {
          if (this.statusCode === 200 || this.statusCode === 300) {
            callback(body);
          } else {
            callback(null);
          }
        });
      });
      req.on("error", function() {
        callback(null);
      });
      req.on("timeout", function() {
        req.abort();
        callback(null);
      });
      req.setTimeout(Plugin.METADATA_TIMEOUT);
      req.end();
    }
    function getOptions(path, method, headers) {
      if (!method) {
        method = "GET";
      }
      if (!headers) {
        headers = {};
      }
      return {
        host: "169.254.169.254",
        path,
        method,
        headers
      };
    }
    module2.exports = EC2Plugin;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ecs_plugin.js
var require_ecs_plugin = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ecs_plugin.js"(exports, module2) {
    "use strict";
    var os2 = require("os");
    var ECSPlugin = {
      getData: function(callback) {
        callback({ ecs: { container: os2.hostname() } });
      },
      originName: "AWS::ECS::Container"
    };
    module2.exports = ECSPlugin;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/elastic_beanstalk_plugin.js
var require_elastic_beanstalk_plugin = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/elastic_beanstalk_plugin.js"(exports, module2) {
    "use strict";
    var fs2 = require("fs");
    var logger = require_logger();
    var ENV_CONFIG_LOCATION = "/var/elasticbeanstalk/xray/environment.conf";
    var ElasticBeanstalkPlugin = {
      getData: function(callback) {
        fs2.readFile(ENV_CONFIG_LOCATION, "utf8", function(err, rawData) {
          if (err) {
            logger.getLogger().error("Error loading Elastic Beanstalk plugin:", err.stack);
            callback();
          } else {
            var data = JSON.parse(rawData);
            var metadata = {
              elastic_beanstalk: {
                environment: data.environment_name,
                version_label: data.version_label,
                deployment_id: data.deployment_id
              }
            };
            callback(metadata);
          }
        });
      },
      originName: "AWS::ElasticBeanstalk::Environment"
    };
    module2.exports = ElasticBeanstalkPlugin;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/resources/aws_whitelist.json
var require_aws_whitelist = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/resources/aws_whitelist.json"(exports, module2) {
    module2.exports = {
      services: {
        dynamodb: {
          operations: {
            batchGetItem: {
              request_descriptors: {
                RequestItems: {
                  get_keys: true,
                  rename_to: "table_names"
                }
              },
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            batchWriteItem: {
              request_descriptors: {
                RequestItems: {
                  get_keys: true,
                  rename_to: "table_names"
                }
              },
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            createTable: {
              request_parameters: [
                "GlobalSecondaryIndexes",
                "LocalSecondaryIndexes",
                "ProvisionedThroughput",
                "TableName"
              ]
            },
            deleteItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            deleteTable: {
              request_parameters: [
                "TableName"
              ]
            },
            describeTable: {
              request_parameters: [
                "TableName"
              ]
            },
            getItem: {
              request_parameters: [
                "ConsistentRead",
                "ProjectionExpression",
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            listTables: {
              request_parameters: [
                "ExclusiveStartTableName",
                "Limit"
              ],
              response_descriptors: {
                TableNames: {
                  list: true,
                  get_count: true,
                  rename_to: "table_count"
                }
              }
            },
            putItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            query: {
              request_parameters: [
                "AttributesToGet",
                "ConsistentRead",
                "IndexName",
                "Limit",
                "ProjectionExpression",
                "ScanIndexForward",
                "Select",
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity"
              ]
            },
            scan: {
              request_parameters: [
                "AttributesToGet",
                "ConsistentRead",
                "IndexName",
                "Limit",
                "ProjectionExpression",
                "Segment",
                "Select",
                "TableName",
                "TotalSegments"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "Count",
                "ScannedCount"
              ]
            },
            updateItem: {
              request_parameters: [
                "TableName"
              ],
              response_parameters: [
                "ConsumedCapacity",
                "ItemCollectionMetrics"
              ]
            },
            updateTable: {
              request_parameters: [
                "AttributeDefinitions",
                "GlobalSecondaryIndexUpdates",
                "ProvisionedThroughput",
                "TableName"
              ]
            }
          }
        },
        sqs: {
          operations: {
            addPermission: {
              request_parameters: [
                "Label",
                "QueueUrl"
              ]
            },
            changeMessageVisibility: {
              request_parameters: [
                "QueueUrl",
                "VisibilityTimeout"
              ]
            },
            changeMessageVisibilityBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Failed"
              ]
            },
            createQueue: {
              request_parameters: [
                "Attributes",
                "QueueName"
              ]
            },
            deleteMessage: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            deleteMessageBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Failed"
              ]
            },
            deleteQueue: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            getQueueAttributes: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "Attributes"
              ]
            },
            getQueueUrl: {
              request_parameters: [
                "QueueName",
                "QueueOwnerAWSAccountId"
              ],
              response_parameters: [
                "QueueUrl"
              ]
            },
            listDeadLetterSourceQueues: {
              request_parameters: [
                "QueueUrl"
              ],
              response_parameters: [
                "QueueUrls"
              ]
            },
            listQueues: {
              request_parameters: [
                "QueueNamePrefix"
              ],
              response_descriptors: {
                QueueUrls: {
                  list: true,
                  get_count: true,
                  rename_to: "queue_count"
                }
              }
            },
            purgeQueue: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            receiveMessage: {
              request_parameters: [
                "AttributeNames",
                "MaxNumberOfMessages",
                "MessageAttributeNames",
                "QueueUrl",
                "VisibilityTimeout",
                "WaitTimeSeconds"
              ],
              response_descriptors: {
                Messages: {
                  list: true,
                  get_count: true,
                  rename_to: "message_count"
                }
              }
            },
            removePermission: {
              request_parameters: [
                "QueueUrl"
              ]
            },
            sendMessage: {
              request_parameters: [
                "DelaySeconds",
                "QueueUrl"
              ],
              request_descriptors: {
                MessageAttributes: {
                  get_keys: true,
                  rename_to: "message_attribute_names"
                }
              },
              response_parameters: [
                "MessageId"
              ]
            },
            sendMessageBatch: {
              request_parameters: [
                "QueueUrl"
              ],
              request_descriptors: {
                Entries: {
                  list: true,
                  get_count: true,
                  rename_to: "message_count"
                }
              },
              response_descriptors: {
                Failed: {
                  list: true,
                  get_count: true,
                  rename_to: "failed_count"
                },
                Successful: {
                  list: true,
                  get_count: true,
                  rename_to: "successful_count"
                }
              }
            },
            setQueueAttributes: {
              request_parameters: [
                "QueueUrl"
              ],
              request_descriptors: {
                Attributes: {
                  get_keys: true,
                  rename_to: "attribute_names"
                }
              }
            }
          }
        },
        sns: {
          operations: {
            publish: {
              request_parameters: [
                "TopicArn"
              ]
            },
            publishBatch: {
              request_parameters: [
                "TopicArn"
              ]
            }
          }
        },
        lambda: {
          operations: {
            invoke: {
              request_parameters: [
                "FunctionName",
                "InvocationType",
                "LogType",
                "Qualifier"
              ],
              response_parameters: [
                "FunctionError",
                "StatusCode"
              ]
            },
            invokeAsync: {
              request_parameters: [
                "FunctionName"
              ],
              response_parameters: [
                "Status"
              ]
            }
          }
        },
        s3: {
          operations: {
            abortMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            completeMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            copyObject: {
              request_parameters: [
                "CopySource",
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            createBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            createMultipartUpload: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            deleteObjects: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAccelerateConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAcl: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLifecycleConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLocation: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketLogging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketNotification: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketNotificationConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketRequestPayment: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketVersioning: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectAcl: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            getObjectTorrent: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            headBucket: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            headObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketAnalyticsConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketInventoryConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listBucketMetricsConfigurations: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listMultipartUploads: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjectVersions: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjects: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listObjectsV2: {
              request_parameters: [
                "Prefix"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            listParts: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAccelerateConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAcl: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketAnalyticsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketCors: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketEncryption: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketInventoryConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLifecycle: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLifecycleConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketLogging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketMetricsConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketNotification: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketNotificationConfiguration: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketPolicy: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketReplication: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketRequestPayment: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketTagging: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketVersioning: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putBucketWebsite: {
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObject: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObjectAcl: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            putObjectTagging: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            restoreObject: {
              request_parameters: [
                "Key",
                "VersionId"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            uploadPart: {
              request_parameters: [
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            },
            uploadPartCopy: {
              request_parameters: [
                "CopySource",
                "Key"
              ],
              request_descriptors: {
                Bucket: {
                  rename_to: "bucket_name"
                }
              }
            }
          }
        },
        sagemakerruntime: {
          operations: {
            invokeEndpoint: {
              request_parameters: [
                "EndpointName"
              ]
            }
          }
        }
      }
    };
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/call_capturer.js
var require_call_capturer = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/call_capturer.js"(exports, module2) {
    "use strict";
    var fs2 = require("fs");
    var logger = require_logger();
    var whitelist = require_aws_whitelist();
    var paramTypes = {
      REQ_DESC: "request_descriptors",
      REQ_PARAMS: "request_parameters",
      RES_DESC: "response_descriptors",
      RES_PARAMS: "response_parameters"
    };
    function CallCapturer(source) {
      this.init(source);
    }
    CallCapturer.prototype.init = function init(source) {
      if (source) {
        if (typeof source === "string") {
          logger.getLogger().info("Using custom AWS whitelist file: " + source);
          this.services = loadWhitelist(JSON.parse(fs2.readFileSync(source, "utf8")));
        } else {
          logger.getLogger().info("Using custom AWS whitelist source.");
          this.services = loadWhitelist(source);
        }
      } else {
        this.services = whitelist.services;
      }
    };
    CallCapturer.prototype.append = function append(source) {
      var newServices = {};
      if (typeof source === "string") {
        logger.getLogger().info("Appending AWS whitelist with custom file: " + source);
        newServices = loadWhitelist(JSON.parse(fs2.readFileSync(source, "utf8")));
      } else {
        logger.getLogger().info("Appending AWS whitelist with a custom source.");
        newServices = loadWhitelist(source);
      }
      for (var attribute in newServices) {
        this.services[attribute] = newServices[attribute];
      }
    };
    CallCapturer.prototype.capture = function capture(serviceName, response) {
      var operation = response.request.operation;
      var call = this.services[serviceName] !== void 0 ? this.services[serviceName].operations[operation] : null;
      if (call === null) {
        logger.getLogger().debug('Call "' + serviceName + "." + operation + '" is not whitelisted for additional data capturing. Ignoring.');
        return;
      }
      var dataCaptured = {};
      for (var paramType in call) {
        var params = call[paramType];
        if (paramType === paramTypes.REQ_PARAMS) {
          captureCallParams(params, response.request.params, dataCaptured);
        } else if (paramType === paramTypes.REQ_DESC) {
          captureDescriptors(params, response.request.params, dataCaptured);
        } else if (paramType === paramTypes.RES_PARAMS) {
          if (response.data) {
            captureCallParams(params, response.data, dataCaptured);
          }
        } else if (paramType === paramTypes.RES_DESC) {
          if (response.data) {
            captureDescriptors(params, response.data, dataCaptured);
          }
        } else {
          logger.getLogger().error('Unknown parameter type "' + paramType + '". Must be "request_descriptors", "response_descriptors", "request_parameters" or "response_parameters".');
        }
      }
      return dataCaptured;
    };
    function captureCallParams(params, call, data) {
      params.forEach(function(param) {
        if (typeof call[param] !== "undefined") {
          var formatted = toSnakeCase(param);
          this[formatted] = call[param];
        }
      }, data);
    }
    function captureDescriptors(descriptors, params, data) {
      for (var paramName in descriptors) {
        var attributes = descriptors[paramName];
        if (typeof params[paramName] !== "undefined") {
          var paramData;
          if (attributes.list && attributes.get_count) {
            paramData = params[paramName] ? params[paramName].length : 0;
          } else {
            paramData = attributes.get_keys === true ? Object.keys(params[paramName]) : params[paramName];
          }
          if (typeof attributes.rename_to === "string") {
            data[attributes.rename_to] = paramData;
          } else {
            var formatted = toSnakeCase(paramName);
            data[formatted] = paramData;
          }
        }
      }
    }
    function toSnakeCase(param) {
      if (param === "IPAddress") {
        return "ip_address";
      } else {
        return param.split(/(?=[A-Z])/).join("_").toLowerCase();
      }
    }
    function loadWhitelist(source) {
      var doc = source;
      if (doc.services === void 0) {
        throw new Error('Document formatting is incorrect. Expecting "services" param.');
      }
      return doc.services;
    }
    module2.exports = CallCapturer;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/aws.js
var require_aws = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/segments/attributes/aws.js"(exports, module2) {
    "use strict";
    var CallCapturer = require_call_capturer();
    var capturer = new CallCapturer();
    function Aws(res, serviceName) {
      this.init(res, serviceName);
    }
    Aws.prototype.init = function init(res, serviceName) {
      this.operation = formatOperation(res.request.operation) || "";
      if (res && res.request && res.request.httpRequest && res.request.httpRequest.region) {
        this.region = res.request.httpRequest.region;
      }
      if (res && res.requestId) {
        this.request_id = res.requestId;
      }
      this.retries = res.retryCount || 0;
      if (res.extendedRequestId && serviceName && serviceName.toLowerCase() === "s3") {
        this.id_2 = res.extendedRequestId;
      }
      if (serviceName) {
        this.addData(capturer.capture(serviceName.toLowerCase(), res));
      }
    };
    Aws.prototype.addData = function addData(data) {
      for (var attribute in data) {
        this[attribute] = data[attribute];
      }
    };
    var setAWSWhitelist = function setAWSWhitelist2(source) {
      if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
        throw new Error("Please specify a path to the local whitelist file, or supply a whitelist source object.");
      }
      capturer = new CallCapturer(source);
    };
    var appendAWSWhitelist = function appendAWSWhitelist2(source) {
      if (!source || source instanceof String || !(typeof source === "string" || source instanceof Object)) {
        throw new Error("Please specify a path to the local whitelist file, or supply a whitelist source object.");
      }
      capturer.append(source);
    };
    function formatOperation(operation) {
      if (!operation) {
        return;
      }
      return operation.charAt(0).toUpperCase() + operation.slice(1);
    }
    module2.exports = Aws;
    module2.exports.appendAWSWhitelist = appendAWSWhitelist;
    module2.exports.setAWSWhitelist = setAWSWhitelist;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/capture.js
var require_capture = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/capture.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var logger = require_logger();
    var captureFunc = function captureFunc2(name, fcn, parent) {
      validate(name, fcn);
      var current, executeFcn;
      var parentSeg = contextUtils.resolveSegment(parent);
      if (!parentSeg) {
        logger.getLogger().warn("Failed to capture function.");
        return fcn();
      }
      current = parentSeg.addNewSubsegment(name);
      executeFcn = captureFcn(fcn, current);
      try {
        const response = executeFcn(current);
        current.close();
        return response;
      } catch (e) {
        current.close(e);
        throw e;
      }
    };
    var captureAsyncFunc = function captureAsyncFunc2(name, fcn, parent) {
      validate(name, fcn);
      var current, executeFcn;
      var parentSeg = contextUtils.resolveSegment(parent);
      if (!parentSeg) {
        logger.getLogger().warn("Failed to capture async function.");
        return fcn();
      }
      current = parentSeg.addNewSubsegment(name);
      executeFcn = captureFcn(fcn, current);
      try {
        return executeFcn(current);
      } catch (e) {
        current.close(e);
        throw e;
      }
    };
    var captureCallbackFunc = function captureCallbackFunc2(name, fcn, parent) {
      validate(name, fcn);
      var base = contextUtils.resolveSegment(parent);
      if (!base) {
        logger.getLogger().warn("Failed to capture callback function.");
        return fcn;
      }
      base.incrementCounter();
      return function() {
        var parentSeg = contextUtils.resolveSegment(parent);
        var args = Array.prototype.slice.call(arguments);
        captureFunc(name, fcn.bind.apply(fcn, [null].concat(args)), parentSeg);
        base.decrementCounter();
      }.bind(this);
    };
    function captureFcn(fcn, current) {
      var executeFcn;
      if (contextUtils.isAutomaticMode()) {
        var session = contextUtils.getNamespace();
        var contextFcn = function() {
          var value;
          session.run(function() {
            contextUtils.setSegment(current);
            value = fcn(current);
          });
          return value;
        };
        executeFcn = contextFcn;
      } else {
        executeFcn = fcn;
      }
      return executeFcn;
    }
    function validate(name, fcn) {
      var error;
      if (!name || typeof name !== "string") {
        error = 'Param "name" must be a non-empty string.';
        logger.getLogger().error(error);
        throw new Error(error);
      } else if (typeof fcn !== "function") {
        error = 'Param "fcn" must be a function.';
        logger.getLogger().error(error);
        throw new Error(error);
      }
    }
    module2.exports.captureFunc = captureFunc;
    module2.exports.captureAsyncFunc = captureAsyncFunc;
    module2.exports.captureCallbackFunc = captureCallbackFunc;
  }
});

// ../../../node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "../../../node_modules/semver/internal/constants.js"(exports, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    module2.exports = {
      SEMVER_SPEC_VERSION,
      MAX_LENGTH,
      MAX_SAFE_INTEGER,
      MAX_SAFE_COMPONENT_LENGTH
    };
  }
});

// ../../../node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "../../../node_modules/semver/internal/debug.js"(exports, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// ../../../node_modules/semver/internal/re.js
var require_re = __commonJS({
  "../../../node_modules/semver/internal/re.js"(exports, module2) {
    var { MAX_SAFE_COMPONENT_LENGTH } = require_constants();
    var debug = require_debug();
    exports = module2.exports = {};
    var re = exports.re = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;
    var createToken = (name, value, isGlobal) => {
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
    createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// ../../../node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "../../../node_modules/semver/internal/parse-options.js"(exports, module2) {
    var opts = ["includePrerelease", "loose", "rtl"];
    var parseOptions = (options) => !options ? {} : typeof options !== "object" ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => {
      o[k] = true;
      return o;
    }, {});
    module2.exports = parseOptions;
  }
});

// ../../../node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "../../../node_modules/semver/internal/identifiers.js"(exports, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// ../../../node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "../../../node_modules/semver/classes/semver.js"(exports, module2) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      inc(release, identifier) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier);
            this.inc("pre", identifier);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier);
            }
            this.inc("pre", identifier);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                this.prerelease.push(0);
              }
            }
            if (identifier) {
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier, 0];
                }
              } else {
                this.prerelease = [identifier, 0];
              }
            }
            break;
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.format();
        this.raw = this.version;
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// ../../../node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "../../../node_modules/semver/functions/parse.js"(exports, module2) {
    var { MAX_LENGTH } = require_constants();
    var { re, t } = require_re();
    var SemVer = require_semver();
    var parseOptions = require_parse_options();
    var parse = (version2, options) => {
      options = parseOptions(options);
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 !== "string") {
        return null;
      }
      if (version2.length > MAX_LENGTH) {
        return null;
      }
      const r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version2)) {
        return null;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        return null;
      }
    };
    module2.exports = parse;
  }
});

// ../../../node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "../../../node_modules/semver/functions/valid.js"(exports, module2) {
    var parse = require_parse();
    var valid = (version2, options) => {
      const v = parse(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// ../../../node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "../../../node_modules/semver/functions/clean.js"(exports, module2) {
    var parse = require_parse();
    var clean = (version2, options) => {
      const s = parse(version2.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// ../../../node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "../../../node_modules/semver/functions/inc.js"(exports, module2) {
    var SemVer = require_semver();
    var inc = (version2, release, options, identifier) => {
      if (typeof options === "string") {
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(version2 instanceof SemVer ? version2.version : version2, options).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// ../../../node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "../../../node_modules/semver/functions/compare.js"(exports, module2) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// ../../../node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "../../../node_modules/semver/functions/eq.js"(exports, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// ../../../node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "../../../node_modules/semver/functions/diff.js"(exports, module2) {
    var parse = require_parse();
    var eq = require_eq();
    var diff = (version1, version2) => {
      if (eq(version1, version2)) {
        return null;
      } else {
        const v1 = parse(version1);
        const v2 = parse(version2);
        const hasPre = v1.prerelease.length || v2.prerelease.length;
        const prefix = hasPre ? "pre" : "";
        const defaultResult = hasPre ? "prerelease" : "";
        for (const key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    };
    module2.exports = diff;
  }
});

// ../../../node_modules/semver/functions/major.js
var require_major = __commonJS({
  "../../../node_modules/semver/functions/major.js"(exports, module2) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// ../../../node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "../../../node_modules/semver/functions/minor.js"(exports, module2) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// ../../../node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "../../../node_modules/semver/functions/patch.js"(exports, module2) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// ../../../node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "../../../node_modules/semver/functions/prerelease.js"(exports, module2) {
    var parse = require_parse();
    var prerelease = (version2, options) => {
      const parsed = parse(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// ../../../node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "../../../node_modules/semver/functions/rcompare.js"(exports, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// ../../../node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "../../../node_modules/semver/functions/compare-loose.js"(exports, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// ../../../node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "../../../node_modules/semver/functions/compare-build.js"(exports, module2) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// ../../../node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "../../../node_modules/semver/functions/sort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// ../../../node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "../../../node_modules/semver/functions/rsort.js"(exports, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// ../../../node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "../../../node_modules/semver/functions/gt.js"(exports, module2) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// ../../../node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "../../../node_modules/semver/functions/lt.js"(exports, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// ../../../node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "../../../node_modules/semver/functions/neq.js"(exports, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// ../../../node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "../../../node_modules/semver/functions/gte.js"(exports, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// ../../../node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "../../../node_modules/semver/functions/lte.js"(exports, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// ../../../node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "../../../node_modules/semver/functions/cmp.js"(exports, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// ../../../node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "../../../node_modules/semver/functions/coerce.js"(exports, module2) {
    var SemVer = require_semver();
    var parse = require_parse();
    var { re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(re[t.COERCE]);
      } else {
        let next;
        while ((next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module2.exports = coerce;
  }
});

// ../../../node_modules/semver/node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "../../../node_modules/semver/node_modules/yallist/iterator.js"(exports, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// ../../../node_modules/semver/node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "../../../node_modules/semver/node_modules/yallist/yallist.js"(exports, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// ../../../node_modules/semver/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "../../../node_modules/semver/node_modules/lru-cache/index.js"(exports, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// ../../../node_modules/semver/classes/range.js
var require_range = __commonJS({
  "../../../node_modules/semver/classes/range.js"(exports, module2) {
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range;
        this.set = range.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${range}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => {
          return comps.join(" ").trim();
        }).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        range = range.trim();
        const memoOpts = Object.keys(this.options).join(",");
        const memoKey = `parseRange:${memoOpts}:${range}`;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        range = range.split(/\s+/).join(" ");
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => {
      return replaceTilde(c, options);
    }).join(" ");
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_3, M, m, p, pr) => {
        debug("tilde", comp, _3, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => {
      return replaceCaret(c, options);
    }).join(" ");
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_3, M, m, p, pr) => {
        debug("caret", comp, _3, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => {
        return replaceXRange(c, options);
      }).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// ../../../node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "../../../node_modules/semver/classes/comparator.js"(exports, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (!options || typeof options !== "object") {
          options = {
            loose: !!options,
            includePrerelease: false
          };
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
        const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
        const sameSemVer = this.semver.version === comp.semver.version;
        const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
        const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
        const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
        return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// ../../../node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "../../../node_modules/semver/functions/satisfies.js"(exports, module2) {
    var Range = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  }
});

// ../../../node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "../../../node_modules/semver/ranges/to-comparators.js"(exports, module2) {
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// ../../../node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "../../../node_modules/semver/ranges/max-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// ../../../node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "../../../node_modules/semver/ranges/min-satisfying.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// ../../../node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "../../../node_modules/semver/ranges/min-version.js"(exports, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// ../../../node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "../../../node_modules/semver/ranges/valid.js"(exports, module2) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// ../../../node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "../../../node_modules/semver/ranges/outside.js"(exports, module2) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// ../../../node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "../../../node_modules/semver/ranges/gtr.js"(exports, module2) {
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module2.exports = gtr;
  }
});

// ../../../node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "../../../node_modules/semver/ranges/ltr.js"(exports, module2) {
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module2.exports = ltr;
  }
});

// ../../../node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "../../../node_modules/semver/ranges/intersects.js"(exports, module2) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    };
    module2.exports = intersects;
  }
});

// ../../../node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "../../../node_modules/semver/ranges/simplify.js"(exports, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// ../../../node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "../../../node_modules/semver/ranges/subset.js"(exports, module2) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
      return true;
    };
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = [new Comparator(">=0.0.0-0")];
        } else {
          sub = [new Comparator(">=0.0.0")];
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = [new Comparator(">=0.0.0")];
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// ../../../node_modules/semver/index.js
var require_semver2 = __commonJS({
  "../../../node_modules/semver/index.js"(exports, module2) {
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js
var require_aws_p = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js"(exports, module2) {
    "use strict";
    var semver = require_semver2();
    var Aws = require_aws();
    var contextUtils = require_context_utils();
    var Utils = require_utils();
    var logger = require_logger();
    var minVersion = "2.7.15";
    var throttledErrorDefault = function throttledErrorDefault2() {
      return false;
    };
    var captureAWS = function captureAWS2(awssdk) {
      if (!semver.gte(awssdk.VERSION, minVersion)) {
        throw new Error("AWS SDK version " + minVersion + " or greater required.");
      }
      for (var prop in awssdk) {
        if (awssdk[prop].serviceIdentifier) {
          var Service = awssdk[prop];
          Service.prototype.customizeRequests(captureAWSRequest);
        }
      }
      return awssdk;
    };
    var captureAWSClient = function captureAWSClient2(service) {
      service.customizeRequests(captureAWSRequest);
      return service;
    };
    function captureAWSRequest(req) {
      var parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(req.params));
      if (!parent) {
        var output = this.serviceIdentifier + "." + req.operation;
        if (!contextUtils.isAutomaticMode()) {
          logger.getLogger().info("Call " + output + ' requires a segment object on the request params as "XRaySegment" for tracing in manual mode. Ignoring.');
        } else {
          logger.getLogger().info("Call " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
        }
        return req;
      }
      var throttledError = this.throttledError || throttledErrorDefault;
      var stack = new Error().stack;
      let subsegment;
      if (parent.notTraced) {
        subsegment = parent.addNewSubsegmentWithoutSampling(this.serviceIdentifier);
      } else {
        subsegment = parent.addNewSubsegment(this.serviceIdentifier);
      }
      var traceId = parent.segment ? parent.segment.trace_id : parent.trace_id;
      const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;
      var buildListener = function(req2) {
        let traceHeader = "Root=" + traceId + ";Parent=" + subsegment.id + ";Sampled=" + (subsegment.notTraced ? "0" : "1");
        if (data != null) {
          for (const [key, value] of Object.entries(data)) {
            traceHeader += ";" + key + "=" + value;
          }
        }
        req2.httpRequest.headers["X-Amzn-Trace-Id"] = traceHeader;
      };
      var completeListener = function(res) {
        subsegment.addAttribute("namespace", "aws");
        subsegment.addAttribute("aws", new Aws(res, subsegment.name));
        var httpRes = res.httpResponse;
        if (httpRes) {
          subsegment.addAttribute("http", new HttpResponse(httpRes));
          if (httpRes.statusCode === 429 || res.error && throttledError(res.error)) {
            subsegment.addThrottleFlag();
          }
        }
        if (res.error) {
          var err = { message: res.error.message, name: res.error.code, stack };
          if (httpRes && httpRes.statusCode) {
            if (Utils.getCauseTypeFromHttpStatus(httpRes.statusCode) == "error") {
              subsegment.addErrorFlag();
            }
            subsegment.close(err, true);
          } else {
            subsegment.close(err);
          }
        } else {
          if (httpRes && httpRes.statusCode) {
            var cause = Utils.getCauseTypeFromHttpStatus(httpRes.statusCode);
            if (cause) {
              subsegment[cause] = true;
            }
          }
          subsegment.close();
        }
      };
      req.on("beforePresign", function(req2) {
        parent.removeSubsegment(subsegment);
        parent.decrementCounter();
        req2.removeListener("build", buildListener);
        req2.removeListener("complete", completeListener);
      });
      req.on("build", buildListener).on("complete", completeListener);
      if (!req.__send) {
        req.__send = req.send;
        req.send = function(callback) {
          if (contextUtils.isAutomaticMode()) {
            var session = contextUtils.getNamespace();
            session.run(function() {
              contextUtils.setSegment(subsegment);
              req.__send(callback);
            });
          } else {
            req.__send(callback);
          }
        };
      }
    }
    function HttpResponse(res) {
      this.init(res);
    }
    HttpResponse.prototype.init = function init(res) {
      this.response = {
        status: res.statusCode || ""
      };
      if (res.headers && res.headers["content-length"]) {
        this.response.content_length = res.headers["content-length"];
      }
    };
    module2.exports.captureAWSClient = captureAWSClient;
    module2.exports.captureAWS = captureAWS;
  }
});

// ../../../node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "../../../node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../../node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "../../../node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js
var require_aws3_p = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.captureAWSClient = void 0;
    var service_error_classification_1 = require_dist_cjs();
    var aws_1 = __importDefault(require_aws());
    var querystring_1 = require("querystring");
    var subsegment_1 = __importDefault(require_subsegment());
    var contextUtils = require_context_utils();
    var logger = require_logger();
    var { safeParseInt } = require_utils();
    var utils_1 = require_utils();
    var XRAY_PLUGIN_NAME = "XRaySDKInstrumentation";
    var buildAttributesFromMetadata = async (service, operation, region2, res, error) => {
      var _a, _b, _c;
      const { extendedRequestId, requestId, httpStatusCode: statusCode, attempts } = ((_a = res === null || res === void 0 ? void 0 : res.output) === null || _a === void 0 ? void 0 : _a.$metadata) || (error === null || error === void 0 ? void 0 : error.$metadata);
      const aws = new aws_1.default({
        extendedRequestId,
        requestId,
        retryCount: attempts,
        request: {
          operation,
          httpRequest: {
            region: region2,
            statusCode
          }
        }
      }, service);
      const http = {};
      if (statusCode) {
        http.response = {};
        http.response.status = statusCode;
      }
      if (((_b = res === null || res === void 0 ? void 0 : res.response) === null || _b === void 0 ? void 0 : _b.headers) && ((_c = res === null || res === void 0 ? void 0 : res.response) === null || _c === void 0 ? void 0 : _c.headers["content-length"]) !== void 0) {
        if (!http.response) {
          http.response = {};
        }
        http.response.content_length = safeParseInt(res.response.headers["content-length"]);
      }
      return [aws, http];
    };
    function addFlags(http, subsegment, err) {
      var _a, _b, _c;
      if (err && (0, service_error_classification_1.isThrottlingError)(err)) {
        subsegment.addThrottleFlag();
      } else if (safeParseInt((_a = http.response) === null || _a === void 0 ? void 0 : _a.status) === 429 || safeParseInt((_b = err === null || err === void 0 ? void 0 : err.$metadata) === null || _b === void 0 ? void 0 : _b.httpStatusCode) === 429) {
        subsegment.addThrottleFlag();
      }
      const cause = (0, utils_1.getCauseTypeFromHttpStatus)(safeParseInt((_c = http.response) === null || _c === void 0 ? void 0 : _c.status));
      if (cause === "fault") {
        subsegment.addFaultFlag();
      } else if (cause === "error") {
        subsegment.addErrorFlag();
      }
    }
    var getXRayMiddleware = (config, manualSegment) => (next, context) => async (args) => {
      const segment = contextUtils.isAutomaticMode() ? contextUtils.resolveSegment() : manualSegment;
      const { clientName, commandName } = context;
      const operation = commandName.slice(0, -7);
      const service = clientName.slice(0, -6);
      if (!segment) {
        const output = service + "." + operation.charAt(0).toLowerCase() + operation.slice(1);
        if (!contextUtils.isAutomaticMode()) {
          logger.getLogger().info("Call " + output + " requires a segment object passed to captureAWSv3Client for tracing in manual mode. Ignoring.");
        } else {
          logger.getLogger().info("Call " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
        }
        return next(args);
      }
      let subsegment;
      if (segment.notTraced) {
        subsegment = segment.addNewSubsegmentWithoutSampling(service);
      } else {
        subsegment = segment.addNewSubsegment(service);
      }
      subsegment.addAttribute("namespace", "aws");
      const parent = segment instanceof subsegment_1.default ? segment.segment : segment;
      args.request.headers["X-Amzn-Trace-Id"] = (0, querystring_1.stringify)({
        Root: parent.trace_id,
        Parent: subsegment.id,
        Sampled: subsegment.notTraced ? "0" : "1"
      }, ";");
      let res;
      try {
        res = await next(args);
        if (!res) {
          throw new Error("Failed to get response from instrumented AWS Client.");
        }
        const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), res, null);
        subsegment.addAttribute("aws", aws);
        subsegment.addAttribute("http", http);
        addFlags(http, subsegment);
        subsegment.close();
        return res;
      } catch (err) {
        if (err.$metadata) {
          const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), null, err);
          subsegment.addAttribute("aws", aws);
          subsegment.addAttribute("http", http);
          addFlags(http, subsegment, err);
        }
        const errObj = { message: err.message, name: err.name, stack: err.stack || new Error().stack };
        subsegment.close(errObj, true);
        throw err;
      }
    };
    var xRayMiddlewareOptions = {
      name: XRAY_PLUGIN_NAME,
      step: "build"
    };
    var getXRayPlugin = (config, manualSegment) => ({
      applyToStack: (stack) => {
        stack.add(getXRayMiddleware(config, manualSegment), xRayMiddlewareOptions);
      }
    });
    function captureAWSClient(client, manualSegment) {
      client.middlewareStack.remove(XRAY_PLUGIN_NAME);
      client.middlewareStack.use(getXRayPlugin(client.config, manualSegment));
      return client;
    }
    exports.captureAWSClient = captureAWSClient;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/http_p.js
var require_http_p = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/http_p.js"(exports, module2) {
    "use strict";
    var url = require("url");
    var contextUtils = require_context_utils();
    var Utils = require_utils();
    var logger = require_logger();
    var events = require("events");
    var captureHTTPsGlobal = function captureHTTPsGlobal2(module3, downstreamXRayEnabled, subsegmentCallback) {
      if (!module3.__request) {
        enableCapture(module3, downstreamXRayEnabled, subsegmentCallback);
      }
    };
    var captureHTTPs = function captureHTTPs2(module3, downstreamXRayEnabled, subsegmentCallback) {
      if (module3.__request) {
        return module3;
      }
      var tracedModule = {};
      Object.keys(module3).forEach(function(val) {
        tracedModule[val] = module3[val];
      });
      enableCapture(tracedModule, downstreamXRayEnabled, subsegmentCallback);
      return tracedModule;
    };
    function enableCapture(module3, downstreamXRayEnabled, subsegmentCallback) {
      function captureOutgoingHTTPs(baseFunc, ...args) {
        let options;
        let callback;
        let hasUrl;
        let urlObj;
        let arg0 = args[0];
        if (typeof args[1] === "object") {
          hasUrl = true;
          urlObj = typeof arg0 === "string" ? new url.URL(arg0) : arg0;
          options = args[1], callback = args[2];
        } else {
          hasUrl = false;
          options = arg0;
          callback = args[1];
        }
        if (!options || options.headers && options.headers["X-Amzn-Trace-Id"]) {
          return baseFunc(...args);
        }
        if (typeof options === "string") {
          options = new url.URL(options);
        }
        if (!hasUrl) {
          urlObj = options;
        }
        const parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(options));
        const hostname = options.hostname || options.host || urlObj.hostname || urlObj.host || "Unknown host";
        if (!parent) {
          let output = "[ host: " + hostname;
          output = options.method ? output + ", method: " + options.method : output;
          output += ", path: " + (urlObj.pathname || Utils.stripQueryStringFromPath(options.path)) + " ]";
          if (!contextUtils.isAutomaticMode()) {
            logger.getLogger().info("Options for request " + output + ' requires a segment object on the options params as "XRaySegment" for tracing in manual mode. Ignoring.');
          } else {
            logger.getLogger().info("Options for request " + output + " is missing the sub/segment context for automatic mode. Ignoring.");
          }
          return baseFunc(...args);
        }
        let subsegment;
        if (parent.notTraced) {
          subsegment = parent.addNewSubsegmentWithoutSampling(hostname);
        } else {
          subsegment = parent.addNewSubsegment(hostname);
        }
        const root = parent.segment ? parent.segment : parent;
        subsegment.namespace = "remote";
        if (!options.headers) {
          options.headers = {};
        }
        options.headers["X-Amzn-Trace-Id"] = "Root=" + root.trace_id + ";Parent=" + subsegment.id + ";Sampled=" + (subsegment.notTraced ? "0" : "1");
        const errorCapturer = function errorCapturer2(e) {
          if (subsegmentCallback) {
            subsegmentCallback(subsegment, this, null, e);
          }
          if (subsegment.http && subsegment.http.response) {
            if (Utils.getCauseTypeFromHttpStatus(subsegment.http.response.status) === "error") {
              subsegment.addErrorFlag();
            }
            subsegment.close(e, true);
          } else {
            const madeItToDownstream = e.code !== "ECONNREFUSED";
            subsegment.addRemoteRequestData(this, null, madeItToDownstream && downstreamXRayEnabled);
            subsegment.close(e);
          }
        };
        const optionsCopy = Utils.objectWithoutProperties(options, ["Segment"], true);
        let req = baseFunc(...hasUrl ? [arg0, optionsCopy] : [options], function(res) {
          res.on("end", function() {
            if (subsegmentCallback) {
              subsegmentCallback(subsegment, this.req, res);
            }
            if (res.statusCode === 429) {
              subsegment.addThrottleFlag();
            }
            const cause = Utils.getCauseTypeFromHttpStatus(res.statusCode);
            if (cause) {
              subsegment[cause] = true;
            }
            subsegment.addRemoteRequestData(res.req, res, !!downstreamXRayEnabled);
            subsegment.close();
          });
          if (typeof callback === "function") {
            if (contextUtils.isAutomaticMode()) {
              const session = contextUtils.getNamespace();
              session.run(function() {
                contextUtils.setSegment(subsegment);
                callback(res);
              });
            } else {
              callback(res);
            }
          } else if (res.req && res.req.listenerCount("response") === 0) {
            res.resume();
          }
        });
        req.on(events.errorMonitor || "error", errorCapturer);
        return req;
      }
      module3.__request = module3.request;
      function captureHTTPsRequest(...args) {
        return captureOutgoingHTTPs(module3.__request, ...args);
      }
      module3.__get = module3.get;
      function captureHTTPsGet(...args) {
        return captureOutgoingHTTPs(module3.__get, ...args);
      }
      Object.defineProperties(module3, {
        request: { value: captureHTTPsRequest, configurable: true, enumerable: true, writable: true },
        get: { value: captureHTTPsGet, configurable: true, enumerable: true, writable: true }
      });
    }
    module2.exports.captureHTTPsGlobal = captureHTTPsGlobal;
    module2.exports.captureHTTPs = captureHTTPs;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/promise_p.js
var require_promise_p = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/patchers/promise_p.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var originalThen = Symbol("original then");
    var originalCatch = Symbol("original catch");
    function patchPromise(Promise2) {
      const then = Promise2.prototype.then;
      if (!then[originalThen]) {
        Promise2.prototype.then = function(onFulfilled, onRejected) {
          if (contextUtils.isAutomaticMode() && tryGetCurrentSegment()) {
            const ns = contextUtils.getNamespace();
            onFulfilled = onFulfilled && ns.bind(onFulfilled);
            onRejected = onRejected && ns.bind(onRejected);
          }
          return then.call(this, onFulfilled, onRejected);
        };
        Promise2.prototype.then[originalThen] = then;
      }
      const origCatch = Promise2.prototype.catch;
      if (origCatch && !origCatch[originalCatch]) {
        Promise2.prototype.catch = function(onRejected) {
          if (contextUtils.isAutomaticMode() && tryGetCurrentSegment()) {
            const ns = contextUtils.getNamespace();
            onRejected = onRejected && ns.bind(onRejected);
          }
          return origCatch.call(this, onRejected);
        };
        Promise2.prototype.catch[originalCatch] = origCatch;
      }
    }
    function unpatchPromise(Promise2) {
      const then = Promise2.prototype.then;
      if (then[originalThen]) {
        Promise2.prototype.then = then[originalThen];
      }
      const origCatch = Promise2.prototype.catch;
      if (origCatch && origCatch[originalCatch]) {
        Promise2.prototype.catch = origCatch[originalCatch];
      }
    }
    function tryGetCurrentSegment() {
      try {
        return contextUtils.getSegment();
      } catch (e) {
        return void 0;
      }
    }
    function capturePromise() {
      patchPromise(Promise);
    }
    function uncapturePromise() {
      unpatchPromise(Promise);
    }
    capturePromise.patchThirdPartyPromise = patchPromise;
    module2.exports.capturePromise = capturePromise;
    module2.exports.uncapturePromise = uncapturePromise;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/database/sql_data.js
var require_sql_data = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/database/sql_data.js"(exports, module2) {
    "use strict";
    function SqlData(databaseVer, driverVer, user, url, queryType) {
      this.init(databaseVer, driverVer, user, url, queryType);
    }
    SqlData.prototype.init = function init(databaseVer, driverVer, user, url, queryType) {
      if (databaseVer) {
        this.database_version = databaseVer;
      }
      if (driverVer) {
        this.driver_version = driverVer;
      }
      if (queryType) {
        this.preparation = queryType;
      }
      this.url = url;
      this.user = user;
    };
    module2.exports = SqlData;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js
var require_aws_xray = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js"(exports, module2) {
    "use strict";
    var contextUtils = require_context_utils();
    var logging = require_logger();
    var segmentUtils = require_segment_utils();
    var utils = require_utils();
    var LambdaEnv = require_aws_lambda();
    var pkginfo = {};
    try {
      pkginfo = require_package();
    } catch (err) {
      logging.getLogger().debug("Failed to load SDK data:", err);
    }
    var UNKNOWN = "unknown";
    var AWSXRay = {
      plugins: {
        EC2Plugin: require_ec2_plugin(),
        ECSPlugin: require_ecs_plugin(),
        ElasticBeanstalkPlugin: require_elastic_beanstalk_plugin()
      },
      config: function(plugins) {
        var pluginData = {};
        plugins.forEach(function(plugin) {
          plugin.getData(function(data) {
            if (data) {
              for (var attribute in data) {
                pluginData[attribute] = data[attribute];
              }
            }
          });
          segmentUtils.setOrigin(plugin.originName);
          segmentUtils.setPluginData(pluginData);
        });
      },
      setAWSWhitelist: require_aws().setAWSWhitelist,
      appendAWSWhitelist: require_aws().appendAWSWhitelist,
      setStreamingThreshold: segmentUtils.setStreamingThreshold,
      setLogger: logging.setLogger,
      getLogger: logging.getLogger,
      setDaemonAddress: require_daemon_config().setDaemonAddress,
      captureFunc: require_capture().captureFunc,
      captureAsyncFunc: require_capture().captureAsyncFunc,
      captureCallbackFunc: require_capture().captureCallbackFunc,
      captureAWS: require_aws_p().captureAWS,
      captureAWSClient: require_aws_p().captureAWSClient,
      captureAWSv3Client: require_aws3_p().captureAWSClient,
      captureHTTPs: require_http_p().captureHTTPs,
      captureHTTPsGlobal: require_http_p().captureHTTPsGlobal,
      capturePromise: require_promise_p().capturePromise,
      utils,
      database: {
        SqlData: require_sql_data()
      },
      middleware: require_mw_utils(),
      getNamespace: contextUtils.getNamespace,
      resolveSegment: contextUtils.resolveSegment,
      getSegment: contextUtils.getSegment,
      setSegment: contextUtils.setSegment,
      isAutomaticMode: contextUtils.isAutomaticMode,
      enableAutomaticMode: contextUtils.enableAutomaticMode,
      enableManualMode: contextUtils.enableManualMode,
      setContextMissingStrategy: contextUtils.setContextMissingStrategy,
      Segment: require_segment(),
      Subsegment: require_subsegment(),
      SegmentUtils: segmentUtils
    };
    AWSXRay.middleware.IncomingRequestData = require_incoming_request_data(), function() {
      var data = {
        runtime: process.release && process.release.name ? process.release.name : UNKNOWN,
        runtime_version: process.version,
        version: process.env.npm_package_version || UNKNOWN,
        name: process.env.npm_package_name || UNKNOWN
      };
      var sdkData = {
        sdk: "X-Ray for Node.js",
        sdk_version: pkginfo.version ? pkginfo.version : UNKNOWN,
        package: pkginfo.name ? pkginfo.name : UNKNOWN
      };
      segmentUtils.setSDKData(sdkData);
      segmentUtils.setServiceData(data);
      if (process.env.LAMBDA_TASK_ROOT) {
        LambdaEnv.init();
      }
    }();
    module2.exports = AWSXRay;
  }
});

// ../../../node_modules/aws-xray-sdk-core/dist/lib/index.js
var require_lib = __commonJS({
  "../../../node_modules/aws-xray-sdk-core/dist/lib/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_aws_xray();
  }
});

// ../../../node_modules/aws-xray-sdk-express/lib/express_mw.js
var require_express_mw = __commonJS({
  "../../../node_modules/aws-xray-sdk-express/lib/express_mw.js"(exports, module2) {
    var AWSXRay = require_lib();
    var mwUtils = AWSXRay.middleware;
    var expressMW = {
      openSegment: (defaultName) => {
        if (!defaultName || typeof defaultName !== "string") {
          throw new Error("Default segment name was not supplied.  Please provide a string.");
        }
        mwUtils.setDefaultName(defaultName);
        return (req, res, next) => {
          const segment = mwUtils.traceRequestResponseCycle(req, res);
          if (AWSXRay.isAutomaticMode()) {
            const ns = AWSXRay.getNamespace();
            ns.bindEmitter(req);
            ns.bindEmitter(res);
            ns.run(() => {
              AWSXRay.setSegment(segment);
              if (next) {
                next();
              }
            });
          } else {
            req.segment = segment;
            if (next) {
              next();
            }
          }
        };
      },
      closeSegment: () => {
        return (err, req, res, next) => {
          const segment = AWSXRay.resolveSegment(req.segment);
          if (segment && err) {
            segment.addError(err);
            AWSXRay.getLogger().debug("Added Express server fault to segment");
          }
          if (next) {
            next(err);
          }
        };
      }
    };
    module2.exports = expressMW;
  }
});

// ../../../node_modules/aws-xray-sdk-express/lib/index.js
var require_lib2 = __commonJS({
  "../../../node_modules/aws-xray-sdk-express/lib/index.js"(exports, module2) {
    module2.exports = require_express_mw();
  }
});

// ../../../node_modules/aws-xray-sdk-mysql/lib/mysql_p.js
var require_mysql_p = __commonJS({
  "../../../node_modules/aws-xray-sdk-mysql/lib/mysql_p.js"(exports, module2) {
    var AWSXRay = require_lib();
    var events = require("events");
    var SqlData = AWSXRay.database.SqlData;
    var DATABASE_VERS = process.env.MYSQL_DATABASE_VERSION;
    var DRIVER_VERS = process.env.MYSQL_DRIVER_VERSION;
    var PREPARED = "statement";
    module2.exports = function captureMySQL(mysql) {
      if (mysql.__createConnection) {
        return mysql;
      }
      patchCreateConnection(mysql);
      patchCreatePool(mysql);
      patchCreatePoolCluster(mysql);
      return mysql;
    };
    function isPromise(maybePromise) {
      if (maybePromise != null && maybePromise.then instanceof Function) {
        const constructorName = maybePromise.constructor != null ? maybePromise.constructor.name : void 0;
        return constructorName !== "Query";
      }
      return false;
    }
    function patchCreateConnection(mysql) {
      var baseFcn = "__createConnection";
      mysql[baseFcn] = mysql["createConnection"];
      mysql["createConnection"] = function patchedCreateConnection() {
        var connection = mysql[baseFcn].apply(connection, arguments);
        if (isPromise(connection)) {
          connection = connection.then((result) => {
            patchObject(result.connection);
            return result;
          });
        } else if (connection.query instanceof Function) {
          patchObject(connection);
        }
        return connection;
      };
    }
    function patchCreatePool(mysql) {
      var baseFcn = "__createPool";
      mysql[baseFcn] = mysql["createPool"];
      mysql["createPool"] = function patchedCreatePool() {
        var pool = mysql[baseFcn].apply(pool, arguments);
        if (isPromise(pool)) {
          pool = pool.then((result) => {
            patchObject(result.pool);
            return result;
          });
        } else if (pool.query instanceof Function) {
          patchObject(pool);
        }
        return pool;
      };
    }
    function patchCreatePoolCluster(mysql) {
      var baseFcn = "__createPoolCluster";
      mysql[baseFcn] = mysql["createPoolCluster"];
      mysql["createPoolCluster"] = function patchedCreatePoolCluster() {
        var poolCluster = mysql[baseFcn].apply(poolCluster, arguments);
        if (poolCluster.query instanceof Function) {
          patchObject(poolCluster);
        }
        return poolCluster;
      };
    }
    function patchOf(poolCluster) {
      var baseFcn = "__of";
      poolCluster[baseFcn] = poolCluster["of"];
      poolCluster["of"] = function patchedOf() {
        var args = arguments;
        var resultPool = poolCluster[baseFcn].apply(poolCluster, args);
        return patchObject(resultPool);
      };
    }
    function patchGetConnection(pool) {
      var baseFcn = "__getConnection";
      pool[baseFcn] = pool["getConnection"];
      pool["getConnection"] = function patchedGetConnection() {
        var args = arguments;
        var callback = args[args.length - 1];
        if (callback instanceof Function) {
          args[args.length - 1] = (err, connection) => {
            if (connection) {
              patchObject(connection);
            }
            return callback(err, connection);
          };
        }
        var result = pool[baseFcn].apply(pool, args);
        if (isPromise(result)) {
          return result.then(patchObject);
        } else {
          return result;
        }
      };
    }
    function patchObject(connection) {
      if (connection.query instanceof Function && !connection.__query) {
        connection.__query = connection.query;
        connection.query = captureOperation("query");
      }
      if (connection.execute instanceof Function && !connection.__execute) {
        connection.__execute = connection.execute;
        connection.execute = captureOperation("execute");
      }
      if (connection.getConnection instanceof Function && !connection.__getConnection) {
        patchGetConnection(connection);
      }
      if (connection.of instanceof Function && !connection.__of) {
        patchOf(connection);
      }
      return connection;
    }
    function resolveArguments(argsObj) {
      var args = {};
      if (argsObj && argsObj.length > 0) {
        if (argsObj[0] instanceof Object) {
          args.sql = argsObj[0];
          if (argsObj[0].values) {
            args.values = argsObj[0].values;
          } else if (typeof argsObj[2] === "function") {
            args.values = typeof argsObj[1] !== "function" ? argsObj[1] : null;
          }
          args.callback = typeof argsObj[1] === "function" ? argsObj[1] : typeof argsObj[2] === "function" ? argsObj[2] : void 0;
          if (!argsObj[1] && argsObj[0].on instanceof Function) {
            args.sql = argsObj[0];
          }
        } else {
          args.sql = argsObj[0];
          args.values = typeof argsObj[1] !== "function" ? argsObj[1] : null;
          args.callback = typeof argsObj[1] === "function" ? argsObj[1] : typeof argsObj[2] === "function" ? argsObj[2] : void 0;
        }
        args.segment = argsObj[argsObj.length - 1] != null && argsObj[argsObj.length - 1].constructor && (argsObj[argsObj.length - 1].constructor.name === "Segment" || argsObj[argsObj.length - 1].constructor.name === "Subsegment") ? argsObj[argsObj.length - 1] : null;
      }
      return args;
    }
    function captureOperation(name) {
      return function() {
        var args = resolveArguments(arguments);
        var parent = AWSXRay.resolveSegment(args.segment);
        var command;
        var originalOperation = this["__" + name];
        if (args.segment) {
          delete arguments[arguments.length - 1];
        }
        if (!parent) {
          AWSXRay.getLogger().info("Failed to capture MySQL. Cannot resolve sub/segment.");
          return originalOperation.apply(this, arguments);
        }
        var config = this.config.connectionConfig || this.config;
        var subsegment = parent.addNewSubsegment(config.database + "@" + config.host);
        if (args.callback) {
          var cb = args.callback;
          if (AWSXRay.isAutomaticMode()) {
            args.callback = function autoContext(err, data) {
              var session = AWSXRay.getNamespace();
              session.run(function() {
                AWSXRay.setSegment(subsegment);
                cb(err, data);
              });
              subsegment.close(err);
            };
          } else {
            args.callback = function wrappedCallback(err, data) {
              cb(err, data);
              subsegment.close(err);
            };
          }
        }
        command = originalOperation.call(this, args.sql, args.values, args.callback);
        if (!args.callback) {
          var errorCapturer = function(err) {
            subsegment.close(err);
          };
          if (isPromise(command)) {
            command.then(() => {
              subsegment.close();
            }).catch(errorCapturer);
          } else {
            command.on("end", function() {
              subsegment.close();
            });
            command.on(events.errorMonitor || "error", errorCapturer);
          }
        }
        subsegment.addSqlData(createSqlData(config, args.values, args.sql));
        subsegment.namespace = "remote";
        return command;
      };
    }
    function createSqlData(config, values, sql) {
      var commandType = values ? PREPARED : null;
      var data = new SqlData(DATABASE_VERS, DRIVER_VERS, config.user, config.host + ":" + config.port + "/" + config.database, commandType);
      if (process.env.AWS_XRAY_COLLECT_SQL_QUERIES && sql) {
        data.sanitized_query = sql;
      }
      return data;
    }
  }
});

// ../../../node_modules/aws-xray-sdk-mysql/lib/index.js
var require_lib3 = __commonJS({
  "../../../node_modules/aws-xray-sdk-mysql/lib/index.js"(exports, module2) {
    module2.exports = require_mysql_p();
  }
});

// ../../../node_modules/aws-xray-sdk-postgres/lib/postgres_p.js
var require_postgres_p = __commonJS({
  "../../../node_modules/aws-xray-sdk-postgres/lib/postgres_p.js"(exports, module2) {
    var AWSXRay = require_lib();
    var events = require("events");
    var SqlData = AWSXRay.database.SqlData;
    var DATABASE_VERS = process.env.POSTGRES_DATABASE_VERSION;
    var DRIVER_VERS = process.env.POSTGRES_DRIVER_VERSION;
    var PREPARED = "statement";
    module2.exports = function capturePostgres2(pg2) {
      if (pg2.Client.prototype.__query) {
        return pg2;
      }
      pg2.Client.prototype.__query = pg2.Client.prototype.query;
      pg2.Client.prototype.query = captureQuery;
      return pg2;
    };
    function pgNormalizeQueryConfig(config, values, callback) {
      var argsObj = typeof config === "string" ? { text: config } : config;
      if (values) {
        if (typeof values === "function") {
          argsObj.callback = values;
        } else {
          argsObj.values = values;
        }
      }
      if (callback) {
        argsObj.callback = callback;
      }
      return argsObj;
    }
    function captureQuery() {
      var lastArg = arguments[arguments.length - 1];
      var parent = AWSXRay.resolveSegment(lastArg != null && lastArg.constructor && (lastArg.constructor.name === "Segment" || lastArg.constructor.name === "Subsegment") ? lastArg : null);
      if (!parent) {
        AWSXRay.getLogger().info("Failed to capture Postgres. Cannot resolve sub/segment.");
        return this.__query.apply(this, arguments);
      }
      var args = pgNormalizeQueryConfig.apply(this, arguments) || {};
      var subsegment = parent.addNewSubsegment(this.database + "@" + this.host);
      subsegment.namespace = "remote";
      if (args.callback) {
        var cb = args.callback;
        if (AWSXRay.isAutomaticMode()) {
          args.callback = function autoContext(err, data) {
            var session = AWSXRay.getNamespace();
            session.run(function() {
              AWSXRay.setSegment(subsegment);
              cb(err, data);
            });
            subsegment.close(err);
          };
        } else {
          args.callback = function(err, data) {
            cb(err, data, subsegment);
            subsegment.close(err);
          };
        }
      }
      var result = this.__query.call(this, args);
      if (this._queryable && !this._ending) {
        var query;
        if (this.queryQueue.length === 0) {
          query = this.activeQuery;
        } else {
          query = this.queryQueue[this.queryQueue.length - 1];
        }
        if (!args.callback && query.on instanceof Function) {
          query.on("end", function() {
            subsegment.close();
          });
          var errorCapturer = function(err) {
            subsegment.close(err);
          };
          query.on(events.errorMonitor || "error", errorCapturer);
        }
        subsegment.addSqlData(createSqlData(this.connectionParameters, query));
      }
      return result;
    }
    function createSqlData(connParams, query) {
      var queryType = query.name ? PREPARED : void 0;
      var data = new SqlData(DATABASE_VERS, DRIVER_VERS, connParams.user, connParams.host + ":" + connParams.port + "/" + connParams.database, queryType);
      if (process.env.AWS_XRAY_COLLECT_SQL_QUERIES) {
        data.sanitized_query = query.text;
      }
      return data;
    }
  }
});

// ../../../node_modules/aws-xray-sdk-postgres/lib/index.js
var require_lib4 = __commonJS({
  "../../../node_modules/aws-xray-sdk-postgres/lib/index.js"(exports, module2) {
    module2.exports = require_postgres_p();
  }
});

// ../../../node_modules/aws-xray-sdk/package.json
var require_package2 = __commonJS({
  "../../../node_modules/aws-xray-sdk/package.json"(exports, module2) {
    module2.exports = {
      name: "aws-xray-sdk",
      version: "3.5.0",
      description: "AWS X-Ray SDK for Javascript",
      author: "Amazon Web Services",
      contributors: [
        "Sandra McMullen <mcmuls@amazon.com>",
        "William Armiros <armiros@amazon.com>"
      ],
      main: "lib/index.js",
      types: "lib/index.d.ts",
      engines: {
        node: ">= 14.x"
      },
      dependencies: {
        "aws-xray-sdk-core": "3.5.0",
        "aws-xray-sdk-express": "3.5.0",
        "aws-xray-sdk-mysql": "3.5.0",
        "aws-xray-sdk-postgres": "3.5.0"
      },
      scripts: {
        test: "tsd",
        "test-d": "tsd",
        lint: "eslint .",
        "lint:fix": "eslint . --fix"
      },
      keywords: [
        "amazon",
        "api",
        "aws",
        "xray",
        "x-ray",
        "x ray"
      ],
      license: "Apache-2.0",
      repository: "https://github.com/aws/aws-xray-sdk-node/tree/master/packages/full_sdk",
      gitHead: "0579d9c75e08f8747f9eb87596bea58a7d7e9e25"
    };
  }
});

// ../../../node_modules/aws-xray-sdk/lib/index.js
var require_lib5 = __commonJS({
  "../../../node_modules/aws-xray-sdk/lib/index.js"(exports, module2) {
    var AWSXRay = require_lib();
    AWSXRay.express = require_lib2();
    AWSXRay.captureMySQL = require_lib3();
    AWSXRay.capturePostgres = require_lib4();
    var pkginfo = {};
    try {
      pkginfo = require_package2();
    } catch (err) {
      AWSXRay.getLogger().debug("Failed to load SDK data:", err);
    }
    var UNKNOWN = "unknown";
    (function() {
      var sdkData = AWSXRay.SegmentUtils.sdkData || { sdk: "X-Ray for Node.js" };
      sdkData.sdk_version = pkginfo.version ? pkginfo.version : UNKNOWN;
      sdkData.package = pkginfo.name ? pkginfo.name : UNKNOWN;
      AWSXRay.SegmentUtils.setSDKData(sdkData);
    })();
    module2.exports = AWSXRay;
  }
});

// ../../../node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "../../../node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __esDecorate;
    var __runInitializers;
    var __propKey;
    var __setFunctionName;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __esDecorate = function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) {
          if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected");
          return f;
        }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _3, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
          var context = {};
          for (var p in contextIn)
            context[p] = p === "access" ? {} : contextIn[p];
          for (var p in contextIn.access)
            context.access[p] = contextIn.access[p];
          context.addInitializer = function(f) {
            if (done)
              throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
          };
          var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
          if (kind === "accessor") {
            if (result === void 0)
              continue;
            if (result === null || typeof result !== "object")
              throw new TypeError("Object expected");
            if (_3 = accept(result.get))
              descriptor.get = _3;
            if (_3 = accept(result.set))
              descriptor.set = _3;
            if (_3 = accept(result.init))
              initializers.push(_3);
          } else if (_3 = accept(result)) {
            if (kind === "field")
              initializers.push(_3);
            else
              descriptor[key] = _3;
          }
        }
        if (target)
          Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
      };
      __runInitializers = function(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
          value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
      };
      __propKey = function(x) {
        return typeof x === "symbol" ? x : "".concat(x);
      };
      __setFunctionName = function(f, name, prefix) {
        if (typeof name === "symbol")
          name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _3 = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (g && (g = 0, op[0] && (_3 = 0)), _3)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _3.label++;
                  return { value: op[1], done: false };
                case 5:
                  _3.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _3.ops.pop();
                  _3.trys.pop();
                  continue;
                default:
                  if (!(t = _3.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _3 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _3.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _3.label < t[1]) {
                    _3.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _3.label < t[2]) {
                    _3.label = t[2];
                    _3.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _3.ops.pop();
                  _3.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _3);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__esDecorate", __esDecorate);
      exporter("__runInitializers", __runInitializers);
      exporter("__propKey", __propKey);
      exporter("__setFunctionName", __setFunctionName);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    });
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region2, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports.isArnBucketName = isArnBucketName;
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_s3(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  }
});

// ../../../node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "../../../node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// ../../../node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "../../../node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs2();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs3();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  }
});

// ../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// ../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// ../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs4();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports.endpointMiddlewareOptions);
      }
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  }
});

// ../../../node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "../../../node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// ../../../node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "../../../node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs5();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports.NoOpLogger = NoOpLogger;
  }
});

// ../../../node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// ../../../node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs7();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs7();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports.logger = {
      warn: console.warn
    };
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTimeWithOffset = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_3, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_3, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_3, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_3, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_3, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports.throwDefaultError = throwDefaultError;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        let [filter2, value] = instructions[key];
        if (typeof value === "function") {
          let _value;
          const defaultFilterPassed = filter2 === void 0 && (_value = value()) != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(void 0) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed) {
            target[key] = _value;
          } else if (customFilterPassed) {
            target[key] = value();
          }
        } else {
          const defaultFilterPassed = filter2 === void 0 && value != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(value) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed || customFilterPassed) {
            target[key] = value;
          }
        }
      }
      return target;
    }
    exports.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports.convertMap = convertMap;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports.resolvedPath = resolvedPath;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// ../../../node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "../../../node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_NoOpLogger(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants3(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/models/SecretsManagerServiceException.js
var require_SecretsManagerServiceException = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/models/SecretsManagerServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SecretsManagerServiceException = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SecretsManagerServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SecretsManagerServiceException.prototype);
      }
    };
    exports.SecretsManagerServiceException = SecretsManagerServiceException;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplicateSecretToRegionsResponseFilterSensitiveLog = exports.ReplicateSecretToRegionsRequestFilterSensitiveLog = exports.RemoveRegionsFromReplicationResponseFilterSensitiveLog = exports.RemoveRegionsFromReplicationRequestFilterSensitiveLog = exports.PutSecretValueResponseFilterSensitiveLog = exports.PutSecretValueRequestFilterSensitiveLog = exports.PutResourcePolicyResponseFilterSensitiveLog = exports.PutResourcePolicyRequestFilterSensitiveLog = exports.ListSecretVersionIdsResponseFilterSensitiveLog = exports.SecretVersionsListEntryFilterSensitiveLog = exports.ListSecretVersionIdsRequestFilterSensitiveLog = exports.ListSecretsResponseFilterSensitiveLog = exports.SecretListEntryFilterSensitiveLog = exports.ListSecretsRequestFilterSensitiveLog = exports.GetSecretValueResponseFilterSensitiveLog = exports.GetSecretValueRequestFilterSensitiveLog = exports.GetResourcePolicyResponseFilterSensitiveLog = exports.GetResourcePolicyRequestFilterSensitiveLog = exports.GetRandomPasswordResponseFilterSensitiveLog = exports.GetRandomPasswordRequestFilterSensitiveLog = exports.FilterFilterSensitiveLog = exports.DescribeSecretResponseFilterSensitiveLog = exports.RotationRulesTypeFilterSensitiveLog = exports.DescribeSecretRequestFilterSensitiveLog = exports.DeleteSecretResponseFilterSensitiveLog = exports.DeleteSecretRequestFilterSensitiveLog = exports.DeleteResourcePolicyResponseFilterSensitiveLog = exports.DeleteResourcePolicyRequestFilterSensitiveLog = exports.CreateSecretResponseFilterSensitiveLog = exports.ReplicationStatusTypeFilterSensitiveLog = exports.CreateSecretRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.CancelRotateSecretResponseFilterSensitiveLog = exports.CancelRotateSecretRequestFilterSensitiveLog = exports.ReplicaRegionTypeFilterSensitiveLog = exports.PublicPolicyException = exports.SortOrderType = exports.InvalidNextTokenException = exports.FilterNameStringType = exports.ResourceExistsException = exports.PreconditionNotMetException = exports.MalformedPolicyDocumentException = exports.LimitExceededException = exports.EncryptionFailure = exports.DecryptionFailure = exports.StatusType = exports.ResourceNotFoundException = exports.InvalidRequestException = exports.InvalidParameterException = exports.InternalServiceError = void 0;
    exports.ValidateResourcePolicyResponseFilterSensitiveLog = exports.ValidationErrorsEntryFilterSensitiveLog = exports.ValidateResourcePolicyRequestFilterSensitiveLog = exports.UpdateSecretVersionStageResponseFilterSensitiveLog = exports.UpdateSecretVersionStageRequestFilterSensitiveLog = exports.UpdateSecretResponseFilterSensitiveLog = exports.UpdateSecretRequestFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.StopReplicationToReplicaResponseFilterSensitiveLog = exports.StopReplicationToReplicaRequestFilterSensitiveLog = exports.RotateSecretResponseFilterSensitiveLog = exports.RotateSecretRequestFilterSensitiveLog = exports.RestoreSecretResponseFilterSensitiveLog = exports.RestoreSecretRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SecretsManagerServiceException_1 = require_SecretsManagerServiceException();
    var InternalServiceError = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "InternalServiceError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServiceError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceError.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InternalServiceError = InternalServiceError;
    var InvalidParameterException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidParameterException = InvalidParameterException;
    var InvalidRequestException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var StatusType;
    (function(StatusType2) {
      StatusType2["Failed"] = "Failed";
      StatusType2["InProgress"] = "InProgress";
      StatusType2["InSync"] = "InSync";
    })(StatusType = exports.StatusType || (exports.StatusType = {}));
    var DecryptionFailure = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "DecryptionFailure",
          $fault: "client",
          ...opts
        });
        this.name = "DecryptionFailure";
        this.$fault = "client";
        Object.setPrototypeOf(this, DecryptionFailure.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DecryptionFailure = DecryptionFailure;
    var EncryptionFailure = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "EncryptionFailure",
          $fault: "client",
          ...opts
        });
        this.name = "EncryptionFailure";
        this.$fault = "client";
        Object.setPrototypeOf(this, EncryptionFailure.prototype);
        this.Message = opts.Message;
      }
    };
    exports.EncryptionFailure = EncryptionFailure;
    var LimitExceededException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var MalformedPolicyDocumentException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PreconditionNotMetException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "PreconditionNotMetException",
          $fault: "client",
          ...opts
        });
        this.name = "PreconditionNotMetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionNotMetException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.PreconditionNotMetException = PreconditionNotMetException;
    var ResourceExistsException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "ResourceExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceExistsException = ResourceExistsException;
    var FilterNameStringType;
    (function(FilterNameStringType2) {
      FilterNameStringType2["all"] = "all";
      FilterNameStringType2["description"] = "description";
      FilterNameStringType2["name"] = "name";
      FilterNameStringType2["owning_service"] = "owning-service";
      FilterNameStringType2["primary_region"] = "primary-region";
      FilterNameStringType2["tag_key"] = "tag-key";
      FilterNameStringType2["tag_value"] = "tag-value";
    })(FilterNameStringType = exports.FilterNameStringType || (exports.FilterNameStringType = {}));
    var InvalidNextTokenException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "InvalidNextTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNextTokenException = InvalidNextTokenException;
    var SortOrderType;
    (function(SortOrderType2) {
      SortOrderType2["asc"] = "asc";
      SortOrderType2["desc"] = "desc";
    })(SortOrderType = exports.SortOrderType || (exports.SortOrderType = {}));
    var PublicPolicyException = class extends SecretsManagerServiceException_1.SecretsManagerServiceException {
      constructor(opts) {
        super({
          name: "PublicPolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "PublicPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PublicPolicyException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.PublicPolicyException = PublicPolicyException;
    var ReplicaRegionTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ReplicaRegionTypeFilterSensitiveLog = ReplicaRegionTypeFilterSensitiveLog;
    var CancelRotateSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelRotateSecretRequestFilterSensitiveLog = CancelRotateSecretRequestFilterSensitiveLog;
    var CancelRotateSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelRotateSecretResponseFilterSensitiveLog = CancelRotateSecretResponseFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING },
      ...obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateSecretRequestFilterSensitiveLog = CreateSecretRequestFilterSensitiveLog;
    var ReplicationStatusTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ReplicationStatusTypeFilterSensitiveLog = ReplicationStatusTypeFilterSensitiveLog;
    var CreateSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateSecretResponseFilterSensitiveLog = CreateSecretResponseFilterSensitiveLog;
    var DeleteResourcePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteResourcePolicyRequestFilterSensitiveLog = DeleteResourcePolicyRequestFilterSensitiveLog;
    var DeleteResourcePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteResourcePolicyResponseFilterSensitiveLog = DeleteResourcePolicyResponseFilterSensitiveLog;
    var DeleteSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteSecretRequestFilterSensitiveLog = DeleteSecretRequestFilterSensitiveLog;
    var DeleteSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteSecretResponseFilterSensitiveLog = DeleteSecretResponseFilterSensitiveLog;
    var DescribeSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeSecretRequestFilterSensitiveLog = DescribeSecretRequestFilterSensitiveLog;
    var RotationRulesTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RotationRulesTypeFilterSensitiveLog = RotationRulesTypeFilterSensitiveLog;
    var DescribeSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeSecretResponseFilterSensitiveLog = DescribeSecretResponseFilterSensitiveLog;
    var FilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FilterFilterSensitiveLog = FilterFilterSensitiveLog;
    var GetRandomPasswordRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRandomPasswordRequestFilterSensitiveLog = GetRandomPasswordRequestFilterSensitiveLog;
    var GetRandomPasswordResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RandomPassword && { RandomPassword: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetRandomPasswordResponseFilterSensitiveLog = GetRandomPasswordResponseFilterSensitiveLog;
    var GetResourcePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetResourcePolicyRequestFilterSensitiveLog = GetResourcePolicyRequestFilterSensitiveLog;
    var GetResourcePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetResourcePolicyResponseFilterSensitiveLog = GetResourcePolicyResponseFilterSensitiveLog;
    var GetSecretValueRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSecretValueRequestFilterSensitiveLog = GetSecretValueRequestFilterSensitiveLog;
    var GetSecretValueResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING },
      ...obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetSecretValueResponseFilterSensitiveLog = GetSecretValueResponseFilterSensitiveLog;
    var ListSecretsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSecretsRequestFilterSensitiveLog = ListSecretsRequestFilterSensitiveLog;
    var SecretListEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SecretListEntryFilterSensitiveLog = SecretListEntryFilterSensitiveLog;
    var ListSecretsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSecretsResponseFilterSensitiveLog = ListSecretsResponseFilterSensitiveLog;
    var ListSecretVersionIdsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSecretVersionIdsRequestFilterSensitiveLog = ListSecretVersionIdsRequestFilterSensitiveLog;
    var SecretVersionsListEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SecretVersionsListEntryFilterSensitiveLog = SecretVersionsListEntryFilterSensitiveLog;
    var ListSecretVersionIdsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListSecretVersionIdsResponseFilterSensitiveLog = ListSecretVersionIdsResponseFilterSensitiveLog;
    var PutResourcePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutResourcePolicyRequestFilterSensitiveLog = PutResourcePolicyRequestFilterSensitiveLog;
    var PutResourcePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutResourcePolicyResponseFilterSensitiveLog = PutResourcePolicyResponseFilterSensitiveLog;
    var PutSecretValueRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING },
      ...obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PutSecretValueRequestFilterSensitiveLog = PutSecretValueRequestFilterSensitiveLog;
    var PutSecretValueResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutSecretValueResponseFilterSensitiveLog = PutSecretValueResponseFilterSensitiveLog;
    var RemoveRegionsFromReplicationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveRegionsFromReplicationRequestFilterSensitiveLog = RemoveRegionsFromReplicationRequestFilterSensitiveLog;
    var RemoveRegionsFromReplicationResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveRegionsFromReplicationResponseFilterSensitiveLog = RemoveRegionsFromReplicationResponseFilterSensitiveLog;
    var ReplicateSecretToRegionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ReplicateSecretToRegionsRequestFilterSensitiveLog = ReplicateSecretToRegionsRequestFilterSensitiveLog;
    var ReplicateSecretToRegionsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ReplicateSecretToRegionsResponseFilterSensitiveLog = ReplicateSecretToRegionsResponseFilterSensitiveLog;
    var RestoreSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RestoreSecretRequestFilterSensitiveLog = RestoreSecretRequestFilterSensitiveLog;
    var RestoreSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RestoreSecretResponseFilterSensitiveLog = RestoreSecretResponseFilterSensitiveLog;
    var RotateSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RotateSecretRequestFilterSensitiveLog = RotateSecretRequestFilterSensitiveLog;
    var RotateSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RotateSecretResponseFilterSensitiveLog = RotateSecretResponseFilterSensitiveLog;
    var StopReplicationToReplicaRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StopReplicationToReplicaRequestFilterSensitiveLog = StopReplicationToReplicaRequestFilterSensitiveLog;
    var StopReplicationToReplicaResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StopReplicationToReplicaResponseFilterSensitiveLog = StopReplicationToReplicaResponseFilterSensitiveLog;
    var TagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
    var UntagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
    var UpdateSecretRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING },
      ...obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateSecretRequestFilterSensitiveLog = UpdateSecretRequestFilterSensitiveLog;
    var UpdateSecretResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSecretResponseFilterSensitiveLog = UpdateSecretResponseFilterSensitiveLog;
    var UpdateSecretVersionStageRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSecretVersionStageRequestFilterSensitiveLog = UpdateSecretVersionStageRequestFilterSensitiveLog;
    var UpdateSecretVersionStageResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateSecretVersionStageResponseFilterSensitiveLog = UpdateSecretVersionStageResponseFilterSensitiveLog;
    var ValidateResourcePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ValidateResourcePolicyRequestFilterSensitiveLog = ValidateResourcePolicyRequestFilterSensitiveLog;
    var ValidationErrorsEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ValidationErrorsEntryFilterSensitiveLog = ValidationErrorsEntryFilterSensitiveLog;
    var ValidateResourcePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ValidateResourcePolicyResponseFilterSensitiveLog = ValidateResourcePolicyResponseFilterSensitiveLog;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js
var require_FieldPosition = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Field = void 0;
    var FieldPosition_1 = require_FieldPosition();
    var Field = class {
      constructor({ name, kind = FieldPosition_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fields = void 0;
    var Field_1 = require_Field();
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
      getAll() {
        return Object.values(this.entries);
      }
      static from(fieldsToCreate, encoding) {
        return fieldsToCreate.reduce((fields, fieldArgs) => {
          fields.setField(new Field_1.Field(fieldArgs));
          return fields;
        }, new Fields({ encoding }));
      }
    };
    exports.Fields = Fields;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/headersProxy.js
var require_headersProxy = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/headersProxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.headerValueToFieldValues = exports.fieldsToHeaders = exports.headersToFields = exports.getHeadersProxy = void 0;
    var Field_1 = require_Field();
    var FieldPosition_1 = require_FieldPosition();
    var Fields_1 = require_Fields();
    var getHeadersProxy = (fields) => {
      const headers = (0, exports.fieldsToHeaders)(fields);
      return new Proxy(headers, {
        set(target, property, newValue) {
          if (newValue == null)
            return true;
          Reflect.set(target, property, newValue);
          const field = new Field_1.Field({ name: property, values: (0, exports.headerValueToFieldValues)(newValue) });
          fields.setField(field);
          return true;
        },
        defineProperty(target, property, attributes) {
          const { configurable, enumerable, writable, value } = attributes;
          if (configurable && enumerable && writable && value != null) {
            Reflect.defineProperty(target, property, attributes);
            const field = new Field_1.Field({ name: property, values: (0, exports.headerValueToFieldValues)(value) });
            fields.setField(field);
          }
          return true;
        },
        deleteProperty(target, property) {
          Reflect.deleteProperty(target, property);
          fields.removeField(property);
          return true;
        }
      });
    };
    exports.getHeadersProxy = getHeadersProxy;
    var headersToFields = (headers) => {
      return Fields_1.Fields.from(Object.entries(headers).filter(([, value]) => value != null).map(([key, value]) => ({ name: key, values: (0, exports.headerValueToFieldValues)(value), kind: FieldPosition_1.FieldPosition.HEADER })));
    };
    exports.headersToFields = headersToFields;
    var fieldsToHeaders = (fields) => {
      return fields.getByType(FieldPosition_1.FieldPosition.HEADER).reduce((headers, field) => ({ ...headers, [field.name]: field.values.join(",") }), {});
    };
    exports.fieldsToHeaders = fieldsToHeaders;
    var headerValueToFieldValues = (headerValue) => {
      if (headerValue == null)
        return void 0;
      return String(headerValue).split(",");
    };
    exports.headerValueToFieldValues = headerValueToFieldValues;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/queryProxy.js
var require_queryProxy = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/queryProxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.searchParamsToQuery = exports.queryToSearchParams = exports.getQueryProxy = void 0;
    var getQueryProxy = (searchParams) => {
      const query = (0, exports.searchParamsToQuery)(searchParams);
      return new Proxy(query, {
        set(target, property, newValue) {
          if (newValue == null)
            return true;
          Reflect.set(target, property, newValue);
          if (Array.isArray(newValue)) {
            searchParams.delete(property);
            newValue.forEach((value) => searchParams.append(property, value));
          } else {
            searchParams.set(property, newValue);
          }
          return true;
        },
        defineProperty(target, property, attributes) {
          const { configurable, enumerable, writable, value } = attributes;
          if (configurable && enumerable && writable && value != null) {
            Reflect.defineProperty(target, property, attributes);
            if (Array.isArray(value)) {
              searchParams.delete(property);
              value.forEach((element) => searchParams.append(property, element));
            } else {
              searchParams.set(property, value);
            }
          }
          return true;
        },
        deleteProperty(target, property) {
          Reflect.deleteProperty(target, property);
          searchParams.delete(property);
          return true;
        }
      });
    };
    exports.getQueryProxy = getQueryProxy;
    var queryToSearchParams = (query) => {
      const searchParams = new URLSearchParams();
      for (const [key, value] of Object.entries(query)) {
        if (Array.isArray(value)) {
          value.filter((element) => typeof element === "string").forEach((element) => searchParams.append(key, element));
        } else if (typeof value === "string") {
          searchParams.set(key, value);
        }
      }
      return searchParams;
    };
    exports.queryToSearchParams = queryToSearchParams;
    var searchParamsToQuery = (searchParams) => {
      const query = {};
      for (const [key, value] of searchParams.entries()) {
        const currentValue = query[key];
        if (currentValue == null) {
          query[key] = value;
        } else if (Array.isArray(currentValue)) {
          query[key] = [...currentValue, value];
        } else {
          query[key] = [currentValue, value];
        }
      }
      return query;
    };
    exports.searchParamsToQuery = searchParamsToQuery;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var Fields_1 = require_Fields();
    var headersProxy_1 = require_headersProxy();
    var queryProxy_1 = require_queryProxy();
    var HttpRequest = class {
      constructor(options) {
        this.protocol = "https";
        this.hostname = "localhost";
        this.path = "/";
        this.query = {};
        this.headers = {};
        this.method = options.method || "GET";
        this.destination = HttpRequest.getDefaultDestination(options);
        this.fields = (0, headersProxy_1.headersToFields)(options.headers || {});
        this.body = options.body;
        const httpRequest = this;
        Object.defineProperties(httpRequest, {
          protocol: {
            enumerable: true,
            get() {
              return httpRequest.destination.protocol;
            },
            set(protocol) {
              httpRequest.destination.protocol = protocol;
            }
          },
          hostname: {
            enumerable: true,
            get() {
              return httpRequest.destination.hostname;
            },
            set(hostname) {
              httpRequest.destination.hostname = hostname;
            }
          },
          port: {
            enumerable: true,
            get() {
              const port = httpRequest.destination.port;
              return port ? Number(port) : void 0;
            },
            set(port) {
              httpRequest.destination.port = String(port);
            }
          },
          path: {
            enumerable: true,
            get() {
              return httpRequest.destination.pathname;
            },
            set(path) {
              httpRequest.destination.pathname = path;
            }
          },
          query: {
            enumerable: true,
            get() {
              return (0, queryProxy_1.getQueryProxy)(httpRequest.destination.searchParams);
            },
            set(query) {
              const searchParams = (0, queryProxy_1.queryToSearchParams)(query || {});
              httpRequest.destination.search = searchParams.toString();
            }
          },
          headers: {
            enumerable: true,
            get() {
              return (0, headersProxy_1.getHeadersProxy)(httpRequest.fields);
            },
            set(headers) {
              httpRequest.fields = (0, headersProxy_1.headersToFields)(headers);
            }
          }
        });
      }
      static from(options) {
        const request = new HttpRequest(options);
        if (options.destination) {
          request.destination = options.destination;
        }
        if (options.fields) {
          request.fields = options.fields;
        }
        return request;
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        return HttpRequest.from({
          ...this,
          destination: new URL(this.destination),
          fields: Fields_1.Fields.from(this.fields.getAll().map((field) => ({
            ...field,
            values: [...field.values]
          })))
        });
      }
      static getDefaultDestination(options) {
        const protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        const hostname = options.hostname || "localhost";
        const port = options.port ? `:${String(options.port)}` : "";
        const path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        const searchParams = (0, queryProxy_1.queryToSearchParams)(options.query || {});
        const url = new URL(`${protocol}//${hostname}${port}${path}`);
        url.search = searchParams.toString();
        return url;
      }
    };
    exports.HttpRequest = HttpRequest;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// ../../../node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "../../../node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_FieldPosition(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// ../../../node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "../../../node_modules/uuid/dist/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// ../../../node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "../../../node_modules/uuid/dist/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "../../../node_modules/uuid/dist/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "../../../node_modules/uuid/dist/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "../../../node_modules/uuid/dist/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/parse.js
var require_parse2 = __commonJS({
  "../../../node_modules/uuid/dist/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "../../../node_modules/uuid/dist/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function _default(name, version2, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version2;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// ../../../node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "../../../node_modules/uuid/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "../../../node_modules/uuid/dist/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "../../../node_modules/uuid/dist/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "../../../node_modules/uuid/dist/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "../../../node_modules/uuid/dist/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "../../../node_modules/uuid/dist/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "../../../node_modules/uuid/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version2(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version2;
    exports.default = _default;
  }
});

// ../../../node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "../../../node_modules/uuid/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_1 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/protocols/Aws_json1_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_json1_1ValidateResourcePolicyCommand = exports.deserializeAws_json1_1UpdateSecretVersionStageCommand = exports.deserializeAws_json1_1UpdateSecretCommand = exports.deserializeAws_json1_1UntagResourceCommand = exports.deserializeAws_json1_1TagResourceCommand = exports.deserializeAws_json1_1StopReplicationToReplicaCommand = exports.deserializeAws_json1_1RotateSecretCommand = exports.deserializeAws_json1_1RestoreSecretCommand = exports.deserializeAws_json1_1ReplicateSecretToRegionsCommand = exports.deserializeAws_json1_1RemoveRegionsFromReplicationCommand = exports.deserializeAws_json1_1PutSecretValueCommand = exports.deserializeAws_json1_1PutResourcePolicyCommand = exports.deserializeAws_json1_1ListSecretVersionIdsCommand = exports.deserializeAws_json1_1ListSecretsCommand = exports.deserializeAws_json1_1GetSecretValueCommand = exports.deserializeAws_json1_1GetResourcePolicyCommand = exports.deserializeAws_json1_1GetRandomPasswordCommand = exports.deserializeAws_json1_1DescribeSecretCommand = exports.deserializeAws_json1_1DeleteSecretCommand = exports.deserializeAws_json1_1DeleteResourcePolicyCommand = exports.deserializeAws_json1_1CreateSecretCommand = exports.deserializeAws_json1_1CancelRotateSecretCommand = exports.serializeAws_json1_1ValidateResourcePolicyCommand = exports.serializeAws_json1_1UpdateSecretVersionStageCommand = exports.serializeAws_json1_1UpdateSecretCommand = exports.serializeAws_json1_1UntagResourceCommand = exports.serializeAws_json1_1TagResourceCommand = exports.serializeAws_json1_1StopReplicationToReplicaCommand = exports.serializeAws_json1_1RotateSecretCommand = exports.serializeAws_json1_1RestoreSecretCommand = exports.serializeAws_json1_1ReplicateSecretToRegionsCommand = exports.serializeAws_json1_1RemoveRegionsFromReplicationCommand = exports.serializeAws_json1_1PutSecretValueCommand = exports.serializeAws_json1_1PutResourcePolicyCommand = exports.serializeAws_json1_1ListSecretVersionIdsCommand = exports.serializeAws_json1_1ListSecretsCommand = exports.serializeAws_json1_1GetSecretValueCommand = exports.serializeAws_json1_1GetResourcePolicyCommand = exports.serializeAws_json1_1GetRandomPasswordCommand = exports.serializeAws_json1_1DescribeSecretCommand = exports.serializeAws_json1_1DeleteSecretCommand = exports.serializeAws_json1_1DeleteResourcePolicyCommand = exports.serializeAws_json1_1CreateSecretCommand = exports.serializeAws_json1_1CancelRotateSecretCommand = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var smithy_client_1 = require_dist_cjs8();
    var uuid_1 = require_dist();
    var models_0_1 = require_models_0();
    var SecretsManagerServiceException_1 = require_SecretsManagerServiceException();
    var serializeAws_json1_1CancelRotateSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.CancelRotateSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelRotateSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CancelRotateSecretCommand = serializeAws_json1_1CancelRotateSecretCommand;
    var serializeAws_json1_1CreateSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.CreateSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateSecretCommand = serializeAws_json1_1CreateSecretCommand;
    var serializeAws_json1_1DeleteResourcePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.DeleteResourcePolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteResourcePolicyCommand = serializeAws_json1_1DeleteResourcePolicyCommand;
    var serializeAws_json1_1DeleteSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.DeleteSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteSecretCommand = serializeAws_json1_1DeleteSecretCommand;
    var serializeAws_json1_1DescribeSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.DescribeSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeSecretCommand = serializeAws_json1_1DescribeSecretCommand;
    var serializeAws_json1_1GetRandomPasswordCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.GetRandomPassword"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetRandomPasswordRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetRandomPasswordCommand = serializeAws_json1_1GetRandomPasswordCommand;
    var serializeAws_json1_1GetResourcePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.GetResourcePolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetResourcePolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetResourcePolicyCommand = serializeAws_json1_1GetResourcePolicyCommand;
    var serializeAws_json1_1GetSecretValueCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.GetSecretValue"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetSecretValueRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetSecretValueCommand = serializeAws_json1_1GetSecretValueCommand;
    var serializeAws_json1_1ListSecretsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.ListSecrets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListSecretsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListSecretsCommand = serializeAws_json1_1ListSecretsCommand;
    var serializeAws_json1_1ListSecretVersionIdsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.ListSecretVersionIds"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListSecretVersionIdsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListSecretVersionIdsCommand = serializeAws_json1_1ListSecretVersionIdsCommand;
    var serializeAws_json1_1PutResourcePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.PutResourcePolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutResourcePolicyCommand = serializeAws_json1_1PutResourcePolicyCommand;
    var serializeAws_json1_1PutSecretValueCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.PutSecretValue"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutSecretValueRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutSecretValueCommand = serializeAws_json1_1PutSecretValueCommand;
    var serializeAws_json1_1RemoveRegionsFromReplicationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.RemoveRegionsFromReplication"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RemoveRegionsFromReplicationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RemoveRegionsFromReplicationCommand = serializeAws_json1_1RemoveRegionsFromReplicationCommand;
    var serializeAws_json1_1ReplicateSecretToRegionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.ReplicateSecretToRegions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ReplicateSecretToRegionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ReplicateSecretToRegionsCommand = serializeAws_json1_1ReplicateSecretToRegionsCommand;
    var serializeAws_json1_1RestoreSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.RestoreSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RestoreSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RestoreSecretCommand = serializeAws_json1_1RestoreSecretCommand;
    var serializeAws_json1_1RotateSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.RotateSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RotateSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RotateSecretCommand = serializeAws_json1_1RotateSecretCommand;
    var serializeAws_json1_1StopReplicationToReplicaCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.StopReplicationToReplica"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StopReplicationToReplicaRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StopReplicationToReplicaCommand = serializeAws_json1_1StopReplicationToReplicaCommand;
    var serializeAws_json1_1TagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.TagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1TagResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1TagResourceCommand = serializeAws_json1_1TagResourceCommand;
    var serializeAws_json1_1UntagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.UntagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UntagResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UntagResourceCommand = serializeAws_json1_1UntagResourceCommand;
    var serializeAws_json1_1UpdateSecretCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.UpdateSecret"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateSecretRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateSecretCommand = serializeAws_json1_1UpdateSecretCommand;
    var serializeAws_json1_1UpdateSecretVersionStageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.UpdateSecretVersionStage"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateSecretVersionStageRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateSecretVersionStageCommand = serializeAws_json1_1UpdateSecretVersionStageCommand;
    var serializeAws_json1_1ValidateResourcePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "secretsmanager.ValidateResourcePolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ValidateResourcePolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ValidateResourcePolicyCommand = serializeAws_json1_1ValidateResourcePolicyCommand;
    var deserializeAws_json1_1CancelRotateSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelRotateSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelRotateSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CancelRotateSecretCommand = deserializeAws_json1_1CancelRotateSecretCommand;
    var deserializeAws_json1_1CancelRotateSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateSecretCommand = deserializeAws_json1_1CreateSecretCommand;
    var deserializeAws_json1_1CreateSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
          throw await deserializeAws_json1_1DecryptionFailureResponse(parsedOutput, context);
        case "EncryptionFailure":
        case "com.amazonaws.secretsmanager#EncryptionFailure":
          throw await deserializeAws_json1_1EncryptionFailureResponse(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PreconditionNotMetException":
        case "com.amazonaws.secretsmanager#PreconditionNotMetException":
          throw await deserializeAws_json1_1PreconditionNotMetExceptionResponse(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.secretsmanager#ResourceExistsException":
          throw await deserializeAws_json1_1ResourceExistsExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteResourcePolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteResourcePolicyCommand = deserializeAws_json1_1DeleteResourcePolicyCommand;
    var deserializeAws_json1_1DeleteResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteSecretCommand = deserializeAws_json1_1DeleteSecretCommand;
    var deserializeAws_json1_1DeleteSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeSecretCommand = deserializeAws_json1_1DescribeSecretCommand;
    var deserializeAws_json1_1DescribeSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetRandomPasswordCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetRandomPasswordCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetRandomPasswordResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetRandomPasswordCommand = deserializeAws_json1_1GetRandomPasswordCommand;
    var deserializeAws_json1_1GetRandomPasswordCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetResourcePolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetResourcePolicyCommand = deserializeAws_json1_1GetResourcePolicyCommand;
    var deserializeAws_json1_1GetResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetSecretValueCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetSecretValueCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetSecretValueResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetSecretValueCommand = deserializeAws_json1_1GetSecretValueCommand;
    var deserializeAws_json1_1GetSecretValueCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
          throw await deserializeAws_json1_1DecryptionFailureResponse(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListSecretsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSecretsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListSecretsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListSecretsCommand = deserializeAws_json1_1ListSecretsCommand;
    var deserializeAws_json1_1ListSecretsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.secretsmanager#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListSecretVersionIdsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSecretVersionIdsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListSecretVersionIdsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListSecretVersionIdsCommand = deserializeAws_json1_1ListSecretVersionIdsCommand;
    var deserializeAws_json1_1ListSecretVersionIdsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.secretsmanager#InvalidNextTokenException":
          throw await deserializeAws_json1_1InvalidNextTokenExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutResourcePolicyCommand = deserializeAws_json1_1PutResourcePolicyCommand;
    var deserializeAws_json1_1PutResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PublicPolicyException":
        case "com.amazonaws.secretsmanager#PublicPolicyException":
          throw await deserializeAws_json1_1PublicPolicyExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutSecretValueCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutSecretValueCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutSecretValueResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutSecretValueCommand = deserializeAws_json1_1PutSecretValueCommand;
    var deserializeAws_json1_1PutSecretValueCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
          throw await deserializeAws_json1_1DecryptionFailureResponse(parsedOutput, context);
        case "EncryptionFailure":
        case "com.amazonaws.secretsmanager#EncryptionFailure":
          throw await deserializeAws_json1_1EncryptionFailureResponse(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.secretsmanager#ResourceExistsException":
          throw await deserializeAws_json1_1ResourceExistsExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RemoveRegionsFromReplicationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RemoveRegionsFromReplicationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RemoveRegionsFromReplicationResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RemoveRegionsFromReplicationCommand = deserializeAws_json1_1RemoveRegionsFromReplicationCommand;
    var deserializeAws_json1_1RemoveRegionsFromReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ReplicateSecretToRegionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ReplicateSecretToRegionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ReplicateSecretToRegionsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ReplicateSecretToRegionsCommand = deserializeAws_json1_1ReplicateSecretToRegionsCommand;
    var deserializeAws_json1_1ReplicateSecretToRegionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RestoreSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RestoreSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RestoreSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RestoreSecretCommand = deserializeAws_json1_1RestoreSecretCommand;
    var deserializeAws_json1_1RestoreSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RotateSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RotateSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RotateSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RotateSecretCommand = deserializeAws_json1_1RotateSecretCommand;
    var deserializeAws_json1_1RotateSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StopReplicationToReplicaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopReplicationToReplicaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StopReplicationToReplicaResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StopReplicationToReplicaCommand = deserializeAws_json1_1StopReplicationToReplicaCommand;
    var deserializeAws_json1_1StopReplicationToReplicaCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1TagResourceCommand = deserializeAws_json1_1TagResourceCommand;
    var deserializeAws_json1_1TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UntagResourceCommand = deserializeAws_json1_1UntagResourceCommand;
    var deserializeAws_json1_1UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateSecretCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateSecretCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateSecretResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateSecretCommand = deserializeAws_json1_1UpdateSecretCommand;
    var deserializeAws_json1_1UpdateSecretCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DecryptionFailure":
        case "com.amazonaws.secretsmanager#DecryptionFailure":
          throw await deserializeAws_json1_1DecryptionFailureResponse(parsedOutput, context);
        case "EncryptionFailure":
        case "com.amazonaws.secretsmanager#EncryptionFailure":
          throw await deserializeAws_json1_1EncryptionFailureResponse(parsedOutput, context);
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PreconditionNotMetException":
        case "com.amazonaws.secretsmanager#PreconditionNotMetException":
          throw await deserializeAws_json1_1PreconditionNotMetExceptionResponse(parsedOutput, context);
        case "ResourceExistsException":
        case "com.amazonaws.secretsmanager#ResourceExistsException":
          throw await deserializeAws_json1_1ResourceExistsExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateSecretVersionStageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateSecretVersionStageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateSecretVersionStageResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateSecretVersionStageCommand = deserializeAws_json1_1UpdateSecretVersionStageCommand;
    var deserializeAws_json1_1UpdateSecretVersionStageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.secretsmanager#LimitExceededException":
          throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ValidateResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ValidateResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ValidateResourcePolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ValidateResourcePolicyCommand = deserializeAws_json1_1ValidateResourcePolicyCommand;
    var deserializeAws_json1_1ValidateResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.secretsmanager#InternalServiceError":
          throw await deserializeAws_json1_1InternalServiceErrorResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.secretsmanager#InvalidParameterException":
          throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.secretsmanager#InvalidRequestException":
          throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.secretsmanager#MalformedPolicyDocumentException":
          throw await deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.secretsmanager#ResourceNotFoundException":
          throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SecretsManagerServiceException_1.SecretsManagerServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DecryptionFailureResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DecryptionFailure(body, context);
      const exception = new models_0_1.DecryptionFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1EncryptionFailureResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1EncryptionFailure(body, context);
      const exception = new models_0_1.EncryptionFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InternalServiceErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InternalServiceError(body, context);
      const exception = new models_0_1.InternalServiceError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidNextTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNextTokenException(body, context);
      const exception = new models_0_1.InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidParameterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
      const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1MalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1MalformedPolicyDocumentException(body, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1PreconditionNotMetExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1PreconditionNotMetException(body, context);
      const exception = new models_0_1.PreconditionNotMetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1PublicPolicyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1PublicPolicyException(body, context);
      const exception = new models_0_1.PublicPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceExistsException(body, context);
      const exception = new models_0_1.ResourceExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_1AddReplicaRegionListType = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ReplicaRegionType(entry, context);
      });
    };
    var serializeAws_json1_1CancelRotateSecretRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1CreateSecretRequest = (input, context) => {
      return {
        ...input.AddReplicaRegions != null && {
          AddReplicaRegions: serializeAws_json1_1AddReplicaRegionListType(input.AddReplicaRegions, context)
        },
        ClientRequestToken: input.ClientRequestToken ?? (0, uuid_1.v4)(),
        ...input.Description != null && { Description: input.Description },
        ...input.ForceOverwriteReplicaSecret != null && {
          ForceOverwriteReplicaSecret: input.ForceOverwriteReplicaSecret
        },
        ...input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId },
        ...input.Name != null && { Name: input.Name },
        ...input.SecretBinary != null && { SecretBinary: context.base64Encoder(input.SecretBinary) },
        ...input.SecretString != null && { SecretString: input.SecretString },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagListType(input.Tags, context) }
      };
    };
    var serializeAws_json1_1DeleteResourcePolicyRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1DeleteSecretRequest = (input, context) => {
      return {
        ...input.ForceDeleteWithoutRecovery != null && { ForceDeleteWithoutRecovery: input.ForceDeleteWithoutRecovery },
        ...input.RecoveryWindowInDays != null && { RecoveryWindowInDays: input.RecoveryWindowInDays },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1DescribeSecretRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1Filter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1FilterValuesStringList(input.Values, context) }
      };
    };
    var serializeAws_json1_1FiltersListType = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Filter(entry, context);
      });
    };
    var serializeAws_json1_1FilterValuesStringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1GetRandomPasswordRequest = (input, context) => {
      return {
        ...input.ExcludeCharacters != null && { ExcludeCharacters: input.ExcludeCharacters },
        ...input.ExcludeLowercase != null && { ExcludeLowercase: input.ExcludeLowercase },
        ...input.ExcludeNumbers != null && { ExcludeNumbers: input.ExcludeNumbers },
        ...input.ExcludePunctuation != null && { ExcludePunctuation: input.ExcludePunctuation },
        ...input.ExcludeUppercase != null && { ExcludeUppercase: input.ExcludeUppercase },
        ...input.IncludeSpace != null && { IncludeSpace: input.IncludeSpace },
        ...input.PasswordLength != null && { PasswordLength: input.PasswordLength },
        ...input.RequireEachIncludedType != null && { RequireEachIncludedType: input.RequireEachIncludedType }
      };
    };
    var serializeAws_json1_1GetResourcePolicyRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1GetSecretValueRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId },
        ...input.VersionId != null && { VersionId: input.VersionId },
        ...input.VersionStage != null && { VersionStage: input.VersionStage }
      };
    };
    var serializeAws_json1_1ListSecretsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1FiltersListType(input.Filters, context) },
        ...input.IncludePlannedDeletion != null && { IncludePlannedDeletion: input.IncludePlannedDeletion },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.SortOrder != null && { SortOrder: input.SortOrder }
      };
    };
    var serializeAws_json1_1ListSecretVersionIdsRequest = (input, context) => {
      return {
        ...input.IncludeDeprecated != null && { IncludeDeprecated: input.IncludeDeprecated },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1PutResourcePolicyRequest = (input, context) => {
      return {
        ...input.BlockPublicPolicy != null && { BlockPublicPolicy: input.BlockPublicPolicy },
        ...input.ResourcePolicy != null && { ResourcePolicy: input.ResourcePolicy },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1PutSecretValueRequest = (input, context) => {
      return {
        ClientRequestToken: input.ClientRequestToken ?? (0, uuid_1.v4)(),
        ...input.SecretBinary != null && { SecretBinary: context.base64Encoder(input.SecretBinary) },
        ...input.SecretId != null && { SecretId: input.SecretId },
        ...input.SecretString != null && { SecretString: input.SecretString },
        ...input.VersionStages != null && {
          VersionStages: serializeAws_json1_1SecretVersionStagesType(input.VersionStages, context)
        }
      };
    };
    var serializeAws_json1_1RemoveRegionsFromReplicationRequest = (input, context) => {
      return {
        ...input.RemoveReplicaRegions != null && {
          RemoveReplicaRegions: serializeAws_json1_1RemoveReplicaRegionListType(input.RemoveReplicaRegions, context)
        },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1RemoveReplicaRegionListType = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ReplicaRegionType = (input, context) => {
      return {
        ...input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId },
        ...input.Region != null && { Region: input.Region }
      };
    };
    var serializeAws_json1_1ReplicateSecretToRegionsRequest = (input, context) => {
      return {
        ...input.AddReplicaRegions != null && {
          AddReplicaRegions: serializeAws_json1_1AddReplicaRegionListType(input.AddReplicaRegions, context)
        },
        ...input.ForceOverwriteReplicaSecret != null && {
          ForceOverwriteReplicaSecret: input.ForceOverwriteReplicaSecret
        },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1RestoreSecretRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1RotateSecretRequest = (input, context) => {
      return {
        ClientRequestToken: input.ClientRequestToken ?? (0, uuid_1.v4)(),
        ...input.RotateImmediately != null && { RotateImmediately: input.RotateImmediately },
        ...input.RotationLambdaARN != null && { RotationLambdaARN: input.RotationLambdaARN },
        ...input.RotationRules != null && {
          RotationRules: serializeAws_json1_1RotationRulesType(input.RotationRules, context)
        },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1RotationRulesType = (input, context) => {
      return {
        ...input.AutomaticallyAfterDays != null && { AutomaticallyAfterDays: input.AutomaticallyAfterDays },
        ...input.Duration != null && { Duration: input.Duration },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression }
      };
    };
    var serializeAws_json1_1SecretVersionStagesType = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1StopReplicationToReplicaRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var serializeAws_json1_1Tag = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1TagKeyListType = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1TagListType = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
      });
    };
    var serializeAws_json1_1TagResourceRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagListType(input.Tags, context) }
      };
    };
    var serializeAws_json1_1UntagResourceRequest = (input, context) => {
      return {
        ...input.SecretId != null && { SecretId: input.SecretId },
        ...input.TagKeys != null && { TagKeys: serializeAws_json1_1TagKeyListType(input.TagKeys, context) }
      };
    };
    var serializeAws_json1_1UpdateSecretRequest = (input, context) => {
      return {
        ClientRequestToken: input.ClientRequestToken ?? (0, uuid_1.v4)(),
        ...input.Description != null && { Description: input.Description },
        ...input.KmsKeyId != null && { KmsKeyId: input.KmsKeyId },
        ...input.SecretBinary != null && { SecretBinary: context.base64Encoder(input.SecretBinary) },
        ...input.SecretId != null && { SecretId: input.SecretId },
        ...input.SecretString != null && { SecretString: input.SecretString }
      };
    };
    var serializeAws_json1_1UpdateSecretVersionStageRequest = (input, context) => {
      return {
        ...input.MoveToVersionId != null && { MoveToVersionId: input.MoveToVersionId },
        ...input.RemoveFromVersionId != null && { RemoveFromVersionId: input.RemoveFromVersionId },
        ...input.SecretId != null && { SecretId: input.SecretId },
        ...input.VersionStage != null && { VersionStage: input.VersionStage }
      };
    };
    var serializeAws_json1_1ValidateResourcePolicyRequest = (input, context) => {
      return {
        ...input.ResourcePolicy != null && { ResourcePolicy: input.ResourcePolicy },
        ...input.SecretId != null && { SecretId: input.SecretId }
      };
    };
    var deserializeAws_json1_1CancelRotateSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        VersionId: (0, smithy_client_1.expectString)(output.VersionId)
      };
    };
    var deserializeAws_json1_1CreateSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        ReplicationStatus: output.ReplicationStatus != null ? deserializeAws_json1_1ReplicationStatusListType(output.ReplicationStatus, context) : void 0,
        VersionId: (0, smithy_client_1.expectString)(output.VersionId)
      };
    };
    var deserializeAws_json1_1DecryptionFailure = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DeleteResourcePolicyResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1DeleteSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        DeletionDate: output.DeletionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1DescribeSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DeletedDate: output.DeletedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        KmsKeyId: (0, smithy_client_1.expectString)(output.KmsKeyId),
        LastAccessedDate: output.LastAccessedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAccessedDate))) : void 0,
        LastChangedDate: output.LastChangedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastChangedDate))) : void 0,
        LastRotatedDate: output.LastRotatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastRotatedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextRotationDate: output.NextRotationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.NextRotationDate))) : void 0,
        OwningService: (0, smithy_client_1.expectString)(output.OwningService),
        PrimaryRegion: (0, smithy_client_1.expectString)(output.PrimaryRegion),
        ReplicationStatus: output.ReplicationStatus != null ? deserializeAws_json1_1ReplicationStatusListType(output.ReplicationStatus, context) : void 0,
        RotationEnabled: (0, smithy_client_1.expectBoolean)(output.RotationEnabled),
        RotationLambdaARN: (0, smithy_client_1.expectString)(output.RotationLambdaARN),
        RotationRules: output.RotationRules != null ? deserializeAws_json1_1RotationRulesType(output.RotationRules, context) : void 0,
        Tags: output.Tags != null ? deserializeAws_json1_1TagListType(output.Tags, context) : void 0,
        VersionIdsToStages: output.VersionIdsToStages != null ? deserializeAws_json1_1SecretVersionsToStagesMapType(output.VersionIdsToStages, context) : void 0
      };
    };
    var deserializeAws_json1_1EncryptionFailure = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1GetRandomPasswordResponse = (output, context) => {
      return {
        RandomPassword: (0, smithy_client_1.expectString)(output.RandomPassword)
      };
    };
    var deserializeAws_json1_1GetResourcePolicyResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        ResourcePolicy: (0, smithy_client_1.expectString)(output.ResourcePolicy)
      };
    };
    var deserializeAws_json1_1GetSecretValueResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        SecretBinary: output.SecretBinary != null ? context.base64Decoder(output.SecretBinary) : void 0,
        SecretString: (0, smithy_client_1.expectString)(output.SecretString),
        VersionId: (0, smithy_client_1.expectString)(output.VersionId),
        VersionStages: output.VersionStages != null ? deserializeAws_json1_1SecretVersionStagesType(output.VersionStages, context) : void 0
      };
    };
    var deserializeAws_json1_1InternalServiceError = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidNextTokenException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidParameterException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidRequestException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1KmsKeyIdListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1LimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ListSecretsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        SecretList: output.SecretList != null ? deserializeAws_json1_1SecretListType(output.SecretList, context) : void 0
      };
    };
    var deserializeAws_json1_1ListSecretVersionIdsResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Versions: output.Versions != null ? deserializeAws_json1_1SecretVersionsListType(output.Versions, context) : void 0
      };
    };
    var deserializeAws_json1_1MalformedPolicyDocumentException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1PreconditionNotMetException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1PublicPolicyException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1PutResourcePolicyResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1PutSecretValueResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        VersionId: (0, smithy_client_1.expectString)(output.VersionId),
        VersionStages: output.VersionStages != null ? deserializeAws_json1_1SecretVersionStagesType(output.VersionStages, context) : void 0
      };
    };
    var deserializeAws_json1_1RemoveRegionsFromReplicationResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        ReplicationStatus: output.ReplicationStatus != null ? deserializeAws_json1_1ReplicationStatusListType(output.ReplicationStatus, context) : void 0
      };
    };
    var deserializeAws_json1_1ReplicateSecretToRegionsResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        ReplicationStatus: output.ReplicationStatus != null ? deserializeAws_json1_1ReplicationStatusListType(output.ReplicationStatus, context) : void 0
      };
    };
    var deserializeAws_json1_1ReplicationStatusListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ReplicationStatusType(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ReplicationStatusType = (output, context) => {
      return {
        KmsKeyId: (0, smithy_client_1.expectString)(output.KmsKeyId),
        LastAccessedDate: output.LastAccessedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAccessedDate))) : void 0,
        Region: (0, smithy_client_1.expectString)(output.Region),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusMessage: (0, smithy_client_1.expectString)(output.StatusMessage)
      };
    };
    var deserializeAws_json1_1ResourceExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1RestoreSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1RotateSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        VersionId: (0, smithy_client_1.expectString)(output.VersionId)
      };
    };
    var deserializeAws_json1_1RotationRulesType = (output, context) => {
      return {
        AutomaticallyAfterDays: (0, smithy_client_1.expectLong)(output.AutomaticallyAfterDays),
        Duration: (0, smithy_client_1.expectString)(output.Duration),
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression)
      };
    };
    var deserializeAws_json1_1SecretListEntry = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DeletedDate: output.DeletedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        KmsKeyId: (0, smithy_client_1.expectString)(output.KmsKeyId),
        LastAccessedDate: output.LastAccessedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAccessedDate))) : void 0,
        LastChangedDate: output.LastChangedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastChangedDate))) : void 0,
        LastRotatedDate: output.LastRotatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastRotatedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextRotationDate: output.NextRotationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.NextRotationDate))) : void 0,
        OwningService: (0, smithy_client_1.expectString)(output.OwningService),
        PrimaryRegion: (0, smithy_client_1.expectString)(output.PrimaryRegion),
        RotationEnabled: (0, smithy_client_1.expectBoolean)(output.RotationEnabled),
        RotationLambdaARN: (0, smithy_client_1.expectString)(output.RotationLambdaARN),
        RotationRules: output.RotationRules != null ? deserializeAws_json1_1RotationRulesType(output.RotationRules, context) : void 0,
        SecretVersionsToStages: output.SecretVersionsToStages != null ? deserializeAws_json1_1SecretVersionsToStagesMapType(output.SecretVersionsToStages, context) : void 0,
        Tags: output.Tags != null ? deserializeAws_json1_1TagListType(output.Tags, context) : void 0
      };
    };
    var deserializeAws_json1_1SecretListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1SecretListEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1SecretVersionsListEntry = (output, context) => {
      return {
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        KmsKeyIds: output.KmsKeyIds != null ? deserializeAws_json1_1KmsKeyIdListType(output.KmsKeyIds, context) : void 0,
        LastAccessedDate: output.LastAccessedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAccessedDate))) : void 0,
        VersionId: (0, smithy_client_1.expectString)(output.VersionId),
        VersionStages: output.VersionStages != null ? deserializeAws_json1_1SecretVersionStagesType(output.VersionStages, context) : void 0
      };
    };
    var deserializeAws_json1_1SecretVersionsListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1SecretVersionsListEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1SecretVersionStagesType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1SecretVersionsToStagesMapType = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1SecretVersionStagesType(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1StopReplicationToReplicaResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN)
      };
    };
    var deserializeAws_json1_1Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1TagListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1UpdateSecretResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name),
        VersionId: (0, smithy_client_1.expectString)(output.VersionId)
      };
    };
    var deserializeAws_json1_1UpdateSecretVersionStageResponse = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1ValidateResourcePolicyResponse = (output, context) => {
      return {
        PolicyValidationPassed: (0, smithy_client_1.expectBoolean)(output.PolicyValidationPassed),
        ValidationErrors: output.ValidationErrors != null ? deserializeAws_json1_1ValidationErrorsType(output.ValidationErrors, context) : void 0
      };
    };
    var deserializeAws_json1_1ValidationErrorsEntry = (output, context) => {
      return {
        CheckName: (0, smithy_client_1.expectString)(output.CheckName),
        ErrorMessage: (0, smithy_client_1.expectString)(output.ErrorMessage)
      };
    };
    var deserializeAws_json1_1ValidationErrorsType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ValidationErrorsEntry(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/CancelRotateSecretCommand.js
var require_CancelRotateSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/CancelRotateSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelRotateSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CancelRotateSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelRotateSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "CancelRotateSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelRotateSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelRotateSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelRotateSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelRotateSecretCommand)(output, context);
      }
    };
    exports.CancelRotateSecretCommand = CancelRotateSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/CreateSecretCommand.js
var require_CreateSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/CreateSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var CreateSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "CreateSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateSecretCommand)(output, context);
      }
    };
    exports.CreateSecretCommand = CreateSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/DeleteResourcePolicyCommand.js
var require_DeleteResourcePolicyCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/DeleteResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourcePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteResourcePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "DeleteResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteResourcePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteResourcePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteResourcePolicyCommand)(output, context);
      }
    };
    exports.DeleteResourcePolicyCommand = DeleteResourcePolicyCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/DeleteSecretCommand.js
var require_DeleteSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/DeleteSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DeleteSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "DeleteSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteSecretCommand)(output, context);
      }
    };
    exports.DeleteSecretCommand = DeleteSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/DescribeSecretCommand.js
var require_DescribeSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/DescribeSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var DescribeSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "DescribeSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeSecretCommand)(output, context);
      }
    };
    exports.DescribeSecretCommand = DescribeSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/GetRandomPasswordCommand.js
var require_GetRandomPasswordCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/GetRandomPasswordCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRandomPasswordCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetRandomPasswordCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRandomPasswordCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "GetRandomPasswordCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRandomPasswordRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRandomPasswordResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetRandomPasswordCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetRandomPasswordCommand)(output, context);
      }
    };
    exports.GetRandomPasswordCommand = GetRandomPasswordCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/GetResourcePolicyCommand.js
var require_GetResourcePolicyCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/GetResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetResourcePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetResourcePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "GetResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetResourcePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetResourcePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetResourcePolicyCommand)(output, context);
      }
    };
    exports.GetResourcePolicyCommand = GetResourcePolicyCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/GetSecretValueCommand.js
var require_GetSecretValueCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/GetSecretValueCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSecretValueCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var GetSecretValueCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSecretValueCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "GetSecretValueCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSecretValueRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSecretValueResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetSecretValueCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetSecretValueCommand)(output, context);
      }
    };
    exports.GetSecretValueCommand = GetSecretValueCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ListSecretsCommand.js
var require_ListSecretsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ListSecretsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSecretsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListSecretsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListSecretsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "ListSecretsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSecretsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSecretsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListSecretsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListSecretsCommand)(output, context);
      }
    };
    exports.ListSecretsCommand = ListSecretsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ListSecretVersionIdsCommand.js
var require_ListSecretVersionIdsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ListSecretVersionIdsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListSecretVersionIdsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ListSecretVersionIdsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListSecretVersionIdsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "ListSecretVersionIdsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListSecretVersionIdsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListSecretVersionIdsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListSecretVersionIdsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListSecretVersionIdsCommand)(output, context);
      }
    };
    exports.ListSecretVersionIdsCommand = ListSecretVersionIdsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/PutResourcePolicyCommand.js
var require_PutResourcePolicyCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/PutResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutResourcePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutResourcePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "PutResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutResourcePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutResourcePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutResourcePolicyCommand)(output, context);
      }
    };
    exports.PutResourcePolicyCommand = PutResourcePolicyCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/PutSecretValueCommand.js
var require_PutSecretValueCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/PutSecretValueCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutSecretValueCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var PutSecretValueCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutSecretValueCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "PutSecretValueCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutSecretValueRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutSecretValueResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutSecretValueCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutSecretValueCommand)(output, context);
      }
    };
    exports.PutSecretValueCommand = PutSecretValueCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/RemoveRegionsFromReplicationCommand.js
var require_RemoveRegionsFromReplicationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/RemoveRegionsFromReplicationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveRegionsFromReplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RemoveRegionsFromReplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveRegionsFromReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "RemoveRegionsFromReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveRegionsFromReplicationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RemoveRegionsFromReplicationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RemoveRegionsFromReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RemoveRegionsFromReplicationCommand)(output, context);
      }
    };
    exports.RemoveRegionsFromReplicationCommand = RemoveRegionsFromReplicationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ReplicateSecretToRegionsCommand.js
var require_ReplicateSecretToRegionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ReplicateSecretToRegionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReplicateSecretToRegionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ReplicateSecretToRegionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ReplicateSecretToRegionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "ReplicateSecretToRegionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ReplicateSecretToRegionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ReplicateSecretToRegionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ReplicateSecretToRegionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ReplicateSecretToRegionsCommand)(output, context);
      }
    };
    exports.ReplicateSecretToRegionsCommand = ReplicateSecretToRegionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/RestoreSecretCommand.js
var require_RestoreSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/RestoreSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RestoreSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RestoreSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "RestoreSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RestoreSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RestoreSecretCommand)(output, context);
      }
    };
    exports.RestoreSecretCommand = RestoreSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/RotateSecretCommand.js
var require_RotateSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/RotateSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RotateSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var RotateSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RotateSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "RotateSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RotateSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RotateSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RotateSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RotateSecretCommand)(output, context);
      }
    };
    exports.RotateSecretCommand = RotateSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/StopReplicationToReplicaCommand.js
var require_StopReplicationToReplicaCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/StopReplicationToReplicaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopReplicationToReplicaCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var StopReplicationToReplicaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StopReplicationToReplicaCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "StopReplicationToReplicaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StopReplicationToReplicaRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StopReplicationToReplicaResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StopReplicationToReplicaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StopReplicationToReplicaCommand)(output, context);
      }
    };
    exports.StopReplicationToReplicaCommand = StopReplicationToReplicaCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/UpdateSecretCommand.js
var require_UpdateSecretCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/UpdateSecretCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSecretCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateSecretCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateSecretCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "UpdateSecretCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateSecretRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateSecretResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateSecretCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateSecretCommand)(output, context);
      }
    };
    exports.UpdateSecretCommand = UpdateSecretCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/UpdateSecretVersionStageCommand.js
var require_UpdateSecretVersionStageCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/UpdateSecretVersionStageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateSecretVersionStageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var UpdateSecretVersionStageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateSecretVersionStageCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "UpdateSecretVersionStageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateSecretVersionStageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateSecretVersionStageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateSecretVersionStageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateSecretVersionStageCommand)(output, context);
      }
    };
    exports.UpdateSecretVersionStageCommand = UpdateSecretVersionStageCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ValidateResourcePolicyCommand.js
var require_ValidateResourcePolicyCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/ValidateResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidateResourcePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_0();
    var Aws_json1_1_1 = require_Aws_json1_1();
    var ValidateResourcePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ValidateResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SecretsManagerClient";
        const commandName = "ValidateResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ValidateResourcePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ValidateResourcePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ValidateResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ValidateResourcePolicyCommand)(output, context);
      }
    };
    exports.ValidateResourcePolicyCommand = ValidateResourcePolicyCommand;
  }
});

// ../../../node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "../../../node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// ../../../node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "../../../node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs10();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs10();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs5();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region2 = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region2)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region2, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs5();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region2) => typeof region2 === "string" && (region2.startsWith("fips-") || region2.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region2) => (0, isFipsRegion_1.isFipsRegion)(region2) ? ["fips-aws-global", "aws-fips"].includes(region2) ? "us-east-1" : region2.replace(/fips-(dkr-|prod-)?|-fips/, "") : region2;
    exports.getRealRegion = getRealRegion;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region: region2, useFipsEndpoint } = input;
      if (!region2) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region2 === "string") {
            return (0, getRealRegion_1.getRealRegion)(region2);
          }
          const providedRegion = await region2();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region2 === "string" ? region2 : await region2();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region2, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region2))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region2, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region2, { partitionHash });
      const resolvedRegion = region2 in regionHash ? region2 : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region2;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// ../../../node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "../../../node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs9();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a === void 0 ? void 0 : _a.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b === void 0 ? void 0 : _b.call(logger, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = "STANDARD";
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryToken = void 0;
    var constants_1 = require_constants4();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost = (_a = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _a !== void 0 ? _a : constants_1.RETRY_COST;
      const timeoutRetryCost = (_b = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _b !== void 0 ? _b : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy = (_c = options === null || options === void 0 ? void 0 : options.retryBackoffStrategy) !== null && _c !== void 0 ? _c : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(constants_1.MAXIMUM_RETRY_DELAY, initialRetryDelay);
      let lastRetryCost = void 0;
      let retryCount = initialRetryCount !== null && initialRetryCount !== void 0 ? initialRetryCount : 0;
      const getCapacityAmount = (errorType) => errorType === "TRANSIENT" ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase = errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity += releaseAmount !== null && releaseAmount !== void 0 ? releaseAmount : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens
      };
    };
    exports.getDefaultRetryToken = getDefaultRetryToken;
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config2();
    var constants_1 = require_constants4();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/util-retry/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "../../../node_modules/@aws-sdk/util-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_constants4(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs16();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs16();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js
var require_util = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports.asSdkError = asSdkError;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var service_error_classification_1 = require_dist_cjs();
    var util_retry_1 = require_dist_cjs16();
    var uuid_1 = require_dist();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs16();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs5();
    var util_retry_1 = require_dist_cjs16();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var util_retry_1 = require_dist_cjs16();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var service_error_classification_1 = require_dist_cjs();
    var util_retry_1 = require_dist_cjs16();
    var uuid_1 = require_dist();
    var util_1 = require_util();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetyErrorInto(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetyErrorInto = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports.getRetryAfterHint = getRetryAfterHint;
  }
});

// ../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// ../../../node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "../../../node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "../../../node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// ../../../node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "../../../node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// ../../../node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "../../../node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs20();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// ../../../node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  "../../../node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
  }
});

// ../../../node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  "../../../node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports.toUint8Array = toUint8Array;
  }
});

// ../../../node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  "../../../node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// ../../../node_modules/@aws-sdk/util-utf8/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "../../../node_modules/@aws-sdk/util-utf8/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_utf8_1 = require_dist_cjs22();
    var constants_1 = require_constants5();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region2, service) => `${shortDate}/${region2}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region2, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region2}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region2, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants5();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// ../../../node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "../../../node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// ../../../node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "../../../node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// ../../../node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "../../../node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs23();
    var constants_1 = require_constants5();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs20();
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_utf8_1 = require_dist_cjs22();
    var constants_1 = require_constants5();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants5();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      let path = request.path;
      const url = request === null || request === void 0 ? void 0 : request.destination;
      if (url != null) {
        let decodedPathname;
        try {
          decodedPathname = decodeURIComponent(url.pathname);
        } catch (e) {
          decodedPathname = url.pathname;
        }
        if (new URL(decodedPathname, url.origin).pathname !== decodedPathname) {
          path = decodedPathname;
        }
      }
      return {
        ...request,
        path
      };
    };
    exports.prepareRequest = prepareRequest;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_middleware_1 = require_dist_cjs5();
    var util_utf8_1 = require_dist_cjs22();
    var constants_1 = require_constants5();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region: region2, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region2);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region2 = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region2, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region2, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region2 = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region2, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region2, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region2 = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region2, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region2 = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region2, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region2, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region2, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region2, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// ../../../node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "../../../node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs18();
    var signature_v4_1 = require_dist_cjs24();
    var util_middleware_1 = require_dist_cjs5();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region2) => [
          await input.regionInfoProvider(region2, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region2
        ]).then(([regionInfo, region2]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region2;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

// ../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// ../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// ../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// ../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  }
});

// ../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// ../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// ../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var constants_1 = require_constants6();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// ../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "secretsmanager"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/package.json
var require_package3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-secrets-manager",
      description: "AWS SDK for JavaScript Secrets Manager Client for Node.js, Browser and React Native",
      version: "3.290.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo secrets-manager"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.290.0",
        "@aws-sdk/config-resolver": "3.290.0",
        "@aws-sdk/credential-provider-node": "3.290.0",
        "@aws-sdk/fetch-http-handler": "3.290.0",
        "@aws-sdk/hash-node": "3.290.0",
        "@aws-sdk/invalid-dependency": "3.290.0",
        "@aws-sdk/middleware-content-length": "3.290.0",
        "@aws-sdk/middleware-endpoint": "3.290.0",
        "@aws-sdk/middleware-host-header": "3.290.0",
        "@aws-sdk/middleware-logger": "3.290.0",
        "@aws-sdk/middleware-recursion-detection": "3.290.0",
        "@aws-sdk/middleware-retry": "3.290.0",
        "@aws-sdk/middleware-serde": "3.290.0",
        "@aws-sdk/middleware-signing": "3.290.0",
        "@aws-sdk/middleware-stack": "3.290.0",
        "@aws-sdk/middleware-user-agent": "3.290.0",
        "@aws-sdk/node-config-provider": "3.290.0",
        "@aws-sdk/node-http-handler": "3.290.0",
        "@aws-sdk/protocol-http": "3.290.0",
        "@aws-sdk/smithy-client": "3.290.0",
        "@aws-sdk/types": "3.290.0",
        "@aws-sdk/url-parser": "3.290.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.290.0",
        "@aws-sdk/util-defaults-mode-node": "3.290.0",
        "@aws-sdk/util-endpoints": "3.290.0",
        "@aws-sdk/util-retry": "3.290.0",
        "@aws-sdk/util-user-agent-browser": "3.290.0",
        "@aws-sdk/util-user-agent-node": "3.290.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-secrets-manager",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-secrets-manager"
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetSessionTokenRequestFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.FederatedUserFilterSensitiveLog = exports.GetFederationTokenRequestFilterSensitiveLog = exports.GetCallerIdentityResponseFilterSensitiveLog = exports.GetCallerIdentityRequestFilterSensitiveLog = exports.GetAccessKeyInfoResponseFilterSensitiveLog = exports.GetAccessKeyInfoRequestFilterSensitiveLog = exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.AssumeRoleRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.PolicyDescriptorTypeFilterSensitiveLog = exports.AssumedRoleUserFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// ../../../node_modules/fast-xml-parser/src/util.js
var require_util2 = __commonJS({
  "../../../node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// ../../../node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../../node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util2();
    var defaultOptions = {
      allowBooleanAttributes: false,
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      allowBooleanAttributes: false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module2) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") {
              i += 7;
              entity = true;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") {
              i += 9;
            } else if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-") {
              comment = true;
            } else {
              throw new Error("Invalid DOCTYPE");
            }
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              if (entity) {
                parseEntityExp(exp, entities);
                entity = false;
              }
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, "g"),
          val: match[3]
        };
      }
    }
    module2.exports = readDocType;
  }
});

// ../../../node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../../node_modules/strnum/strnum.js"(exports, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module2) {
    "use strict";
    var util = require_util2();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities)
            val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val == void 0)
                val = "";
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false, isLeafNode);
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[":@"]) {
            assignAttributes(val, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode)
              val[options.textNodeName] = "";
            else
              val = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || propCount === 1 && obj[options.textNodeName])
        return true;
      return false;
    }
    exports.prettify = prettify;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// ../../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: []
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextValNode(item, key, "", level);
            }
          }
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
      if (val === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// ../../../node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../../node_modules/fast-xml-parser/src/fxp.js"(exports, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var smithy_client_1 = require_dist_cjs8();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_3, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// ../../../node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "../../../node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs25();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/package.json
var require_package4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.290.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.290.0",
        "@aws-sdk/credential-provider-node": "3.290.0",
        "@aws-sdk/fetch-http-handler": "3.290.0",
        "@aws-sdk/hash-node": "3.290.0",
        "@aws-sdk/invalid-dependency": "3.290.0",
        "@aws-sdk/middleware-content-length": "3.290.0",
        "@aws-sdk/middleware-endpoint": "3.290.0",
        "@aws-sdk/middleware-host-header": "3.290.0",
        "@aws-sdk/middleware-logger": "3.290.0",
        "@aws-sdk/middleware-recursion-detection": "3.290.0",
        "@aws-sdk/middleware-retry": "3.290.0",
        "@aws-sdk/middleware-sdk-sts": "3.290.0",
        "@aws-sdk/middleware-serde": "3.290.0",
        "@aws-sdk/middleware-signing": "3.290.0",
        "@aws-sdk/middleware-stack": "3.290.0",
        "@aws-sdk/middleware-user-agent": "3.290.0",
        "@aws-sdk/node-config-provider": "3.290.0",
        "@aws-sdk/node-http-handler": "3.290.0",
        "@aws-sdk/protocol-http": "3.290.0",
        "@aws-sdk/smithy-client": "3.290.0",
        "@aws-sdk/types": "3.290.0",
        "@aws-sdk/url-parser": "3.290.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.290.0",
        "@aws-sdk/util-defaults-mode-node": "3.290.0",
        "@aws-sdk/util-endpoints": "3.290.0",
        "@aws-sdk/util-retry": "3.290.0",
        "@aws-sdk/util-user-agent-browser": "3.290.0",
        "@aws-sdk/util-user-agent-node": "3.290.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "fast-xml-parser": "4.1.2",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region2) => {
      if (typeof region2 !== "function") {
        return region2 === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region2;
      }
      return async () => {
        try {
          return await region2();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region: region2, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region2 || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region: region2, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region2 || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs18();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports.getProfileData = getProfileData;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports.getSsoSessionData = getSsoSessionData;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types3 = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "../../../node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs18();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs18();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// ../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// ../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// ../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs18();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// ../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// ../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "../../../node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs30();
    var url_parser_1 = require_dist_cjs3();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs18();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types4 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs28();
    var credential_provider_imds_1 = require_dist_cjs31();
    var property_provider_1 = require_dist_cjs18();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs18();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs32();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsResponseFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesResponseFilterSensitiveLog = exports.RoleInfoFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.AccountInfoFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/package.json
var require_package5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.290.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.290.0",
        "@aws-sdk/fetch-http-handler": "3.290.0",
        "@aws-sdk/hash-node": "3.290.0",
        "@aws-sdk/invalid-dependency": "3.290.0",
        "@aws-sdk/middleware-content-length": "3.290.0",
        "@aws-sdk/middleware-endpoint": "3.290.0",
        "@aws-sdk/middleware-host-header": "3.290.0",
        "@aws-sdk/middleware-logger": "3.290.0",
        "@aws-sdk/middleware-recursion-detection": "3.290.0",
        "@aws-sdk/middleware-retry": "3.290.0",
        "@aws-sdk/middleware-serde": "3.290.0",
        "@aws-sdk/middleware-stack": "3.290.0",
        "@aws-sdk/middleware-user-agent": "3.290.0",
        "@aws-sdk/node-config-provider": "3.290.0",
        "@aws-sdk/node-http-handler": "3.290.0",
        "@aws-sdk/protocol-http": "3.290.0",
        "@aws-sdk/smithy-client": "3.290.0",
        "@aws-sdk/types": "3.290.0",
        "@aws-sdk/url-parser": "3.290.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.290.0",
        "@aws-sdk/util-defaults-mode-node": "3.290.0",
        "@aws-sdk/util-endpoints": "3.290.0",
        "@aws-sdk/util-retry": "3.290.0",
        "@aws-sdk/util-user-agent-browser": "3.290.0",
        "@aws-sdk/util-user-agent-node": "3.290.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "../../../node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var util_utf8_1 = require_dist_cjs22();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// ../../../node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "../../../node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs23();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var querystring_builder_1 = require_dist_cjs34();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants7();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var querystring_builder_1 = require_dist_cjs34();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// ../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "../../../node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "../../../node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// ../../../node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "../../../node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "../../../node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// ../../../node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "../../../node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs30();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// ../../../node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "../../../node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase64;
  }
});

// ../../../node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "../../../node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports.toBase64 = toBase64;
  }
});

// ../../../node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "../../../node_modules/@aws-sdk/util-base64/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }],
      version: "1.1"
    };
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var tslib_1 = require_tslib();
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var { partitions } = partitions_json_1.default;
    var DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    var partition = (value) => {
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region2, regionData] of Object.entries(regions)) {
          if (region2 === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports.partition = partition;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debugId = void 0;
    exports.debugId = "endpoints";
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports.EndpointError = EndpointError;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types5 = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports.isIpAddress = isIpAddress;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region2, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region: region2,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports.parseArn = parseArn;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types5();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types5();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports.getAttr = getAttr;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports.HostAddressType || (exports.HostAddressType = {}));
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger2 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry2 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util3 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "../../../node_modules/@aws-sdk/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_identity(), exports);
    tslib_1.__exportStar(require_logger2(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry2(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_util3(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs39();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports.parseURL = parseURL;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports.uriEncode = uriEncode;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib6 = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws = void 0;
    var tslib_1 = require_tslib();
    exports.aws = tslib_1.__importStar(require_aws2());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib6();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports.evaluateTemplate = evaluateTemplate;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports.evaluateExpression = evaluateExpression;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callFunction = void 0;
    var tslib_1 = require_tslib();
    var lib = tslib_1.__importStar(require_lib6());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports.callFunction = callFunction;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug2();
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports.evaluateCondition = evaluateCondition;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug2();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports.getEndpointHeaders = getEndpointHeaders;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types5();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports.getEndpointProperties = getEndpointProperties;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports.getEndpointUrl = getEndpointUrl;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug2();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types5();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types5();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_evaluateRules(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug2();
    var types_1 = require_types5();
    var utils_1 = require_utils2();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, debug_1.debugId, `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  }
});

// ../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "../../../node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants8 = __commonJS({
  "../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// ../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// ../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs11();
    var credential_provider_imds_1 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs30();
    var property_provider_1 = require_dist_cjs18();
    var constants_1 = require_constants8();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region: region2 = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region2);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "../../../node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs8();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs8();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs11();
    var middleware_content_length_1 = require_dist_cjs12();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs13();
    var middleware_logger_1 = require_dist_cjs14();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs8();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants9 = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SSOOIDCServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
      }
    };
    exports.SSOOIDCServiceException = SSOOIDCServiceException;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationResponseFilterSensitiveLog = exports.StartDeviceAuthorizationRequestFilterSensitiveLog = exports.RegisterClientResponseFilterSensitiveLog = exports.RegisterClientRequestFilterSensitiveLog = exports.CreateTokenResponseFilterSensitiveLog = exports.CreateTokenRequestFilterSensitiveLog = exports.InvalidClientMetadataException = exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidGrantException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientMetadataException = InvalidClientMetadataException;
    var CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateTokenRequestFilterSensitiveLog = CreateTokenRequestFilterSensitiveLog;
    var CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateTokenResponseFilterSensitiveLog = CreateTokenResponseFilterSensitiveLog;
    var RegisterClientRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterClientRequestFilterSensitiveLog = RegisterClientRequestFilterSensitiveLog;
    var RegisterClientResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterClientResponseFilterSensitiveLog = RegisterClientResponseFilterSensitiveLog;
    var StartDeviceAuthorizationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartDeviceAuthorizationRequestFilterSensitiveLog = StartDeviceAuthorizationRequestFilterSensitiveLog;
    var StartDeviceAuthorizationResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartDeviceAuthorizationResponseFilterSensitiveLog = StartDeviceAuthorizationResponseFilterSensitiveLog;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1StartDeviceAuthorizationCommand = exports.deserializeAws_restJson1RegisterClientCommand = exports.deserializeAws_restJson1CreateTokenCommand = exports.serializeAws_restJson1StartDeviceAuthorizationCommand = exports.serializeAws_restJson1RegisterClientCommand = exports.serializeAws_restJson1CreateTokenCommand = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_04();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var serializeAws_restJson1CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.code != null && { code: input.code },
        ...input.deviceCode != null && { deviceCode: input.deviceCode },
        ...input.grantType != null && { grantType: input.grantType },
        ...input.redirectUri != null && { redirectUri: input.redirectUri },
        ...input.refreshToken != null && { refreshToken: input.refreshToken },
        ...input.scope != null && { scope: serializeAws_restJson1Scopes(input.scope, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateTokenCommand = serializeAws_restJson1CreateTokenCommand;
    var serializeAws_restJson1RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify({
        ...input.clientName != null && { clientName: input.clientName },
        ...input.clientType != null && { clientType: input.clientType },
        ...input.scopes != null && { scopes: serializeAws_restJson1Scopes(input.scopes, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1RegisterClientCommand = serializeAws_restJson1RegisterClientCommand;
    var serializeAws_restJson1StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.startUrl != null && { startUrl: input.startUrl }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1StartDeviceAuthorizationCommand = serializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateTokenCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accessToken != null) {
        contents.accessToken = (0, smithy_client_1.expectString)(data.accessToken);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.idToken != null) {
        contents.idToken = (0, smithy_client_1.expectString)(data.idToken);
      }
      if (data.refreshToken != null) {
        contents.refreshToken = (0, smithy_client_1.expectString)(data.refreshToken);
      }
      if (data.tokenType != null) {
        contents.tokenType = (0, smithy_client_1.expectString)(data.tokenType);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateTokenCommand = deserializeAws_restJson1CreateTokenCommand;
    var deserializeAws_restJson1CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await deserializeAws_restJson1AuthorizationPendingExceptionResponse(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await deserializeAws_restJson1ExpiredTokenExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await deserializeAws_restJson1InvalidGrantExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RegisterClientCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.authorizationEndpoint != null) {
        contents.authorizationEndpoint = (0, smithy_client_1.expectString)(data.authorizationEndpoint);
      }
      if (data.clientId != null) {
        contents.clientId = (0, smithy_client_1.expectString)(data.clientId);
      }
      if (data.clientIdIssuedAt != null) {
        contents.clientIdIssuedAt = (0, smithy_client_1.expectLong)(data.clientIdIssuedAt);
      }
      if (data.clientSecret != null) {
        contents.clientSecret = (0, smithy_client_1.expectString)(data.clientSecret);
      }
      if (data.clientSecretExpiresAt != null) {
        contents.clientSecretExpiresAt = (0, smithy_client_1.expectLong)(data.clientSecretExpiresAt);
      }
      if (data.tokenEndpoint != null) {
        contents.tokenEndpoint = (0, smithy_client_1.expectString)(data.tokenEndpoint);
      }
      return contents;
    };
    exports.deserializeAws_restJson1RegisterClientCommand = deserializeAws_restJson1RegisterClientCommand;
    var deserializeAws_restJson1RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await deserializeAws_restJson1InvalidClientMetadataExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.deviceCode != null) {
        contents.deviceCode = (0, smithy_client_1.expectString)(data.deviceCode);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.interval != null) {
        contents.interval = (0, smithy_client_1.expectInt32)(data.interval);
      }
      if (data.userCode != null) {
        contents.userCode = (0, smithy_client_1.expectString)(data.userCode);
      }
      if (data.verificationUri != null) {
        contents.verificationUri = (0, smithy_client_1.expectString)(data.verificationUri);
      }
      if (data.verificationUriComplete != null) {
        contents.verificationUriComplete = (0, smithy_client_1.expectString)(data.verificationUriComplete);
      }
      return contents;
    };
    exports.deserializeAws_restJson1StartDeviceAuthorizationCommand = deserializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AuthorizationPendingExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientMetadataExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidGrantExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidScopeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SlowDownExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1Scopes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateTokenCommand)(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterClientRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterClientResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RegisterClientCommand)(output, context);
      }
    };
    exports.RegisterClientCommand = RegisterClientCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1StartDeviceAuthorizationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1StartDeviceAuthorizationCommand)(output, context);
      }
    };
    exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package6 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.290.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.290.0",
        "@aws-sdk/fetch-http-handler": "3.290.0",
        "@aws-sdk/hash-node": "3.290.0",
        "@aws-sdk/invalid-dependency": "3.290.0",
        "@aws-sdk/middleware-content-length": "3.290.0",
        "@aws-sdk/middleware-endpoint": "3.290.0",
        "@aws-sdk/middleware-host-header": "3.290.0",
        "@aws-sdk/middleware-logger": "3.290.0",
        "@aws-sdk/middleware-recursion-detection": "3.290.0",
        "@aws-sdk/middleware-retry": "3.290.0",
        "@aws-sdk/middleware-serde": "3.290.0",
        "@aws-sdk/middleware-stack": "3.290.0",
        "@aws-sdk/middleware-user-agent": "3.290.0",
        "@aws-sdk/node-config-provider": "3.290.0",
        "@aws-sdk/node-http-handler": "3.290.0",
        "@aws-sdk/protocol-http": "3.290.0",
        "@aws-sdk/smithy-client": "3.290.0",
        "@aws-sdk/types": "3.290.0",
        "@aws-sdk/url-parser": "3.290.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.290.0",
        "@aws-sdk/util-defaults-mode-node": "3.290.0",
        "@aws-sdk/util-endpoints": "3.290.0",
        "@aws-sdk/util-retry": "3.290.0",
        "@aws-sdk/util-user-agent-browser": "3.290.0",
        "@aws-sdk/util-user-agent-node": "3.290.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO OIDC",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package6());
    var config_resolver_1 = require_dist_cjs11();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs8();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs8();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCClient = void 0;
    var config_resolver_1 = require_dist_cjs11();
    var middleware_content_length_1 = require_dist_cjs12();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs13();
    var middleware_logger_1 = require_dist_cjs14();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs8();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDC = void 0;
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 = require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {
      createToken(args, optionsOrCb, cb) {
        const command = new CreateTokenCommand_1.CreateTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerClient(args, optionsOrCb, cb) {
        const command = new RegisterClientCommand_1.RegisterClientCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDeviceAuthorization(args, optionsOrCb, cb) {
        const command = new StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSOOIDC = SSOOIDC;
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CreateTokenCommand(), exports);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_04(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSOOIDC(), exports);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports, "SSOOIDCServiceException", { enumerable: true, get: function() {
      return SSOOIDCServiceException_1.SSOOIDCServiceException;
    } });
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs43();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs43();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs18();
    var constants_1 = require_constants9();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs18();
    var constants_1 = require_constants9();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenKey = validateTokenKey;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var constants_1 = require_constants9();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports.fromSso = fromSso;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports.fromStatic = fromStatic;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports.nodeProvider = nodeProvider;
  }
});

// ../../../node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "../../../node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs42();
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var token_providers_1 = require_dist_cjs44();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs45();
    var credential_provider_sso_2 = require_dist_cjs45();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs46();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs18();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs31();
    var property_provider_1 = require_dist_cjs18();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs28();
    var credential_provider_ini_1 = require_dist_cjs47();
    var credential_provider_process_1 = require_dist_cjs32();
    var credential_provider_sso_1 = require_dist_cjs45();
    var credential_provider_web_identity_1 = require_dist_cjs46();
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider2 = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider2;
  }
});

// ../../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "../../../node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var G = "required";
    var H = "type";
    var I = "fn";
    var J = "argv";
    var K = "ref";
    var L = "properties";
    var M = "headers";
    var a = false;
    var b = true;
    var c = "PartitionResult";
    var d = "tree";
    var e = "booleanEquals";
    var f = "stringEquals";
    var g = "sigv4";
    var h = "us-east-1";
    var i = "sts";
    var j = "endpoint";
    var k = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var l = "error";
    var m = "getAttr";
    var n = { [G]: false, [H]: "String" };
    var o = { [G]: true, "default": false, [H]: "Boolean" };
    var p = { [K]: "Region" };
    var q = { [K]: "UseFIPS" };
    var r = { [K]: "UseDualStack" };
    var s = { [I]: "isSet", [J]: [{ [K]: "Endpoint" }] };
    var t = { [K]: "Endpoint" };
    var u = { "url": "https://sts.amazonaws.com", [L]: { "authSchemes": [{ "name": g, "signingRegion": h, "signingName": i }] }, [M]: {} };
    var v = {};
    var w = { "conditions": [{ [I]: f, [J]: [p, "aws-global"] }], [j]: u, [H]: j };
    var x = { [I]: e, [J]: [q, true] };
    var y = { [I]: e, [J]: [r, true] };
    var z = { [I]: e, [J]: [true, { [I]: m, [J]: [{ [K]: c }, "supportsFIPS"] }] };
    var A = { [K]: c };
    var B = { [I]: e, [J]: [true, { [I]: m, [J]: [A, "supportsDualStack"] }] };
    var C = { "url": k, [L]: {}, [M]: {} };
    var D = [t];
    var E = [x];
    var F = [y];
    var _data = { version: "1.0", parameters: { Region: n, UseDualStack: o, UseFIPS: o, Endpoint: n, UseGlobalEndpoint: o }, rules: [{ conditions: [{ [I]: "aws.partition", [J]: [p], assign: c }], [H]: d, rules: [{ conditions: [{ [I]: e, [J]: [{ [K]: "UseGlobalEndpoint" }, b] }, { [I]: e, [J]: [q, a] }, { [I]: e, [J]: [r, a] }, { [I]: "not", [J]: [s] }], [H]: d, rules: [{ conditions: [{ [I]: f, [J]: [p, "ap-northeast-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-south-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-southeast-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-southeast-2"] }], endpoint: u, [H]: j }, w, { conditions: [{ [I]: f, [J]: [p, "ca-central-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-central-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-north-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-2"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-3"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "sa-east-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, h] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-east-2"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-west-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-west-2"] }], endpoint: u, [H]: j }, { endpoint: { url: k, [L]: { authSchemes: [{ name: g, signingRegion: "{Region}", signingName: i }] }, [M]: v }, [H]: j }] }, { conditions: [s, { [I]: "parseURL", [J]: D, assign: "url" }], [H]: d, rules: [{ conditions: E, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [H]: l }, { [H]: d, rules: [{ conditions: F, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [H]: l }, { endpoint: { url: t, [L]: v, [M]: v }, [H]: j }] }] }, { conditions: [x, y], [H]: d, rules: [{ conditions: [z, B], [H]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: v, [M]: v }, [H]: j }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [H]: l }] }, { conditions: E, [H]: d, rules: [{ conditions: [z], [H]: d, rules: [{ [H]: d, rules: [{ conditions: [{ [I]: f, [J]: ["aws-us-gov", { [I]: m, [J]: [A, "name"] }] }], endpoint: C, [H]: j }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", [L]: v, [M]: v }, [H]: j }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [H]: l }] }, { conditions: F, [H]: d, rules: [{ conditions: [B], [H]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: v, [M]: v }, [H]: j }] }, { error: "DualStack is enabled but this partition does not support DualStack", [H]: l }] }, { [H]: d, rules: [w, { endpoint: C, [H]: j }] }] }] };
    exports.ruleSet = _data;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs11();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs8();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs8();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs11();
    var middleware_content_length_1 = require_dist_cjs12();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs13();
    var middleware_logger_1 = require_dist_cjs14();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_sdk_sts_1 = require_dist_cjs27();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs8();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.STS = STS;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "../../../node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var q = "required";
    var r = "fn";
    var s = "argv";
    var t = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = { [q]: false, "type": "String" };
    var g = { [q]: true, "default": false, "type": "Boolean" };
    var h = { [t]: "Endpoint" };
    var i = { [r]: "booleanEquals", [s]: [{ [t]: "UseFIPS" }, true] };
    var j = { [r]: "booleanEquals", [s]: [{ [t]: "UseDualStack" }, true] };
    var k = {};
    var l = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsFIPS"] }] };
    var m = { [r]: "booleanEquals", [s]: [true, { [r]: "getAttr", [s]: [{ [t]: e }, "supportsDualStack"] }] };
    var n = [i];
    var o = [j];
    var p = [{ [t]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: f, UseDualStack: g, UseFIPS: g, Endpoint: f }, rules: [{ conditions: [{ [r]: a, [s]: [h] }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: h, properties: k, headers: k }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [r]: a, [s]: p }], type: b, rules: [{ conditions: [{ [r]: "aws.partition", [s]: p, assign: e }], type: b, rules: [{ conditions: [i, j], type: b, rules: [{ conditions: [l, m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://secretsmanager-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [l], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://secretsmanager-fips.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://secretsmanager.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: k, headers: k }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://secretsmanager.{Region}.{PartitionResult#dnsSuffix}", properties: k, headers: k }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports.ruleSet = _data;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2017-10-17",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "Secrets Manager",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var client_sts_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs11();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs8();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs8();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/SecretsManagerClient.js
var require_SecretsManagerClient = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/SecretsManagerClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SecretsManagerClient = void 0;
    var config_resolver_1 = require_dist_cjs11();
    var middleware_content_length_1 = require_dist_cjs12();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs13();
    var middleware_logger_1 = require_dist_cjs14();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_signing_1 = require_dist_cjs25();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs8();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var SecretsManagerClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SecretsManagerClient = SecretsManagerClient;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/SecretsManager.js
var require_SecretsManager = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/SecretsManager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SecretsManager = void 0;
    var CancelRotateSecretCommand_1 = require_CancelRotateSecretCommand();
    var CreateSecretCommand_1 = require_CreateSecretCommand();
    var DeleteResourcePolicyCommand_1 = require_DeleteResourcePolicyCommand();
    var DeleteSecretCommand_1 = require_DeleteSecretCommand();
    var DescribeSecretCommand_1 = require_DescribeSecretCommand();
    var GetRandomPasswordCommand_1 = require_GetRandomPasswordCommand();
    var GetResourcePolicyCommand_1 = require_GetResourcePolicyCommand();
    var GetSecretValueCommand_1 = require_GetSecretValueCommand();
    var ListSecretsCommand_1 = require_ListSecretsCommand();
    var ListSecretVersionIdsCommand_1 = require_ListSecretVersionIdsCommand();
    var PutResourcePolicyCommand_1 = require_PutResourcePolicyCommand();
    var PutSecretValueCommand_1 = require_PutSecretValueCommand();
    var RemoveRegionsFromReplicationCommand_1 = require_RemoveRegionsFromReplicationCommand();
    var ReplicateSecretToRegionsCommand_1 = require_ReplicateSecretToRegionsCommand();
    var RestoreSecretCommand_1 = require_RestoreSecretCommand();
    var RotateSecretCommand_1 = require_RotateSecretCommand();
    var StopReplicationToReplicaCommand_1 = require_StopReplicationToReplicaCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateSecretCommand_1 = require_UpdateSecretCommand();
    var UpdateSecretVersionStageCommand_1 = require_UpdateSecretVersionStageCommand();
    var ValidateResourcePolicyCommand_1 = require_ValidateResourcePolicyCommand();
    var SecretsManagerClient_1 = require_SecretsManagerClient();
    var SecretsManager2 = class extends SecretsManagerClient_1.SecretsManagerClient {
      cancelRotateSecret(args, optionsOrCb, cb) {
        const command = new CancelRotateSecretCommand_1.CancelRotateSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createSecret(args, optionsOrCb, cb) {
        const command = new CreateSecretCommand_1.CreateSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteResourcePolicy(args, optionsOrCb, cb) {
        const command = new DeleteResourcePolicyCommand_1.DeleteResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteSecret(args, optionsOrCb, cb) {
        const command = new DeleteSecretCommand_1.DeleteSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeSecret(args, optionsOrCb, cb) {
        const command = new DescribeSecretCommand_1.DescribeSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getRandomPassword(args, optionsOrCb, cb) {
        const command = new GetRandomPasswordCommand_1.GetRandomPasswordCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getResourcePolicy(args, optionsOrCb, cb) {
        const command = new GetResourcePolicyCommand_1.GetResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSecretValue(args, optionsOrCb, cb) {
        const command = new GetSecretValueCommand_1.GetSecretValueCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listSecrets(args, optionsOrCb, cb) {
        const command = new ListSecretsCommand_1.ListSecretsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listSecretVersionIds(args, optionsOrCb, cb) {
        const command = new ListSecretVersionIdsCommand_1.ListSecretVersionIdsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putResourcePolicy(args, optionsOrCb, cb) {
        const command = new PutResourcePolicyCommand_1.PutResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putSecretValue(args, optionsOrCb, cb) {
        const command = new PutSecretValueCommand_1.PutSecretValueCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeRegionsFromReplication(args, optionsOrCb, cb) {
        const command = new RemoveRegionsFromReplicationCommand_1.RemoveRegionsFromReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      replicateSecretToRegions(args, optionsOrCb, cb) {
        const command = new ReplicateSecretToRegionsCommand_1.ReplicateSecretToRegionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreSecret(args, optionsOrCb, cb) {
        const command = new RestoreSecretCommand_1.RestoreSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      rotateSecret(args, optionsOrCb, cb) {
        const command = new RotateSecretCommand_1.RotateSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopReplicationToReplica(args, optionsOrCb, cb) {
        const command = new StopReplicationToReplicaCommand_1.StopReplicationToReplicaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateSecret(args, optionsOrCb, cb) {
        const command = new UpdateSecretCommand_1.UpdateSecretCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateSecretVersionStage(args, optionsOrCb, cb) {
        const command = new UpdateSecretVersionStageCommand_1.UpdateSecretVersionStageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      validateResourcePolicy(args, optionsOrCb, cb) {
        const command = new ValidateResourcePolicyCommand_1.ValidateResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SecretsManager = SecretsManager2;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CancelRotateSecretCommand(), exports);
    tslib_1.__exportStar(require_CreateSecretCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourcePolicyCommand(), exports);
    tslib_1.__exportStar(require_DeleteSecretCommand(), exports);
    tslib_1.__exportStar(require_DescribeSecretCommand(), exports);
    tslib_1.__exportStar(require_GetRandomPasswordCommand(), exports);
    tslib_1.__exportStar(require_GetResourcePolicyCommand(), exports);
    tslib_1.__exportStar(require_GetSecretValueCommand(), exports);
    tslib_1.__exportStar(require_ListSecretVersionIdsCommand(), exports);
    tslib_1.__exportStar(require_ListSecretsCommand(), exports);
    tslib_1.__exportStar(require_PutResourcePolicyCommand(), exports);
    tslib_1.__exportStar(require_PutSecretValueCommand(), exports);
    tslib_1.__exportStar(require_RemoveRegionsFromReplicationCommand(), exports);
    tslib_1.__exportStar(require_ReplicateSecretToRegionsCommand(), exports);
    tslib_1.__exportStar(require_RestoreSecretCommand(), exports);
    tslib_1.__exportStar(require_RotateSecretCommand(), exports);
    tslib_1.__exportStar(require_StopReplicationToReplicaCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateSecretCommand(), exports);
    tslib_1.__exportStar(require_UpdateSecretVersionStageCommand(), exports);
    tslib_1.__exportStar(require_ValidateResourcePolicyCommand(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/models/index.js
var require_models4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_0(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/ListSecretVersionIdsPaginator.js
var require_ListSecretVersionIdsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/ListSecretVersionIdsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSecretVersionIds = void 0;
    var ListSecretVersionIdsCommand_1 = require_ListSecretVersionIdsCommand();
    var SecretsManagerClient_1 = require_SecretsManagerClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSecretVersionIdsCommand_1.ListSecretVersionIdsCommand(input), ...args);
    };
    async function* paginateListSecretVersionIds(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SecretsManagerClient_1.SecretsManagerClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SecretsManager | SecretsManagerClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSecretVersionIds = paginateListSecretVersionIds;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/ListSecretsPaginator.js
var require_ListSecretsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/ListSecretsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListSecrets = void 0;
    var ListSecretsCommand_1 = require_ListSecretsCommand();
    var SecretsManagerClient_1 = require_SecretsManagerClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListSecretsCommand_1.ListSecretsCommand(input), ...args);
    };
    async function* paginateListSecrets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SecretsManagerClient_1.SecretsManagerClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SecretsManager | SecretsManagerClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListSecrets = paginateListSecrets;
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListSecretVersionIdsPaginator(), exports);
    tslib_1.__exportStar(require_ListSecretsPaginator(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "../../../node_modules/@aws-sdk/client-secrets-manager/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SecretsManagerServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SecretsManager(), exports);
    tslib_1.__exportStar(require_SecretsManagerClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    var SecretsManagerServiceException_1 = require_SecretsManagerServiceException();
    Object.defineProperty(exports, "SecretsManagerServiceException", { enumerable: true, get: function() {
      return SecretsManagerServiceException_1.SecretsManagerServiceException;
    } });
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js
var require_SSMServiceException = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/SSMServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SSMServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSMServiceException.prototype);
      }
    };
    exports.SSMServiceException = SSMServiceException;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js
var require_models_05 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpsMetadataAlreadyExistsException = exports.OpsItemAlreadyExistsException = exports.OpsItemAccessDeniedException = exports.OpsItemDataType = exports.ResourceLimitExceededException = exports.IdempotentParameterMismatch = exports.MaxDocumentSizeExceeded = exports.InvalidDocumentSchemaVersion = exports.InvalidDocumentContent = exports.DocumentLimitExceeded = exports.DocumentAlreadyExists = exports.DocumentStatus = exports.ReviewStatus = exports.PlatformType = exports.DocumentParameterType = exports.DocumentHashType = exports.DocumentType = exports.DocumentFormat = exports.AttachmentsSourceKey = exports.Fault = exports.UnsupportedPlatformType = exports.InvalidTargetMaps = exports.InvalidTarget = exports.InvalidTag = exports.InvalidSchedule = exports.InvalidOutputLocation = exports.InvalidDocumentVersion = exports.InvalidDocument = exports.AssociationStatusName = exports.AssociationSyncCompliance = exports.AssociationComplianceSeverity = exports.AssociationLimitExceeded = exports.AssociationAlreadyExists = exports.InvalidParameters = exports.DoesNotExistException = exports.InvalidInstanceId = exports.InvalidCommandId = exports.DuplicateInstanceId = exports.OpsItemRelatedItemAlreadyExistsException = exports.OpsItemNotFoundException = exports.OpsItemLimitExceededException = exports.OpsItemInvalidParameterException = exports.AlreadyExistsException = exports.ExternalAlarmState = exports.TooManyUpdates = exports.TooManyTagsError = exports.InvalidResourceType = exports.InvalidResourceId = exports.InternalServerError = exports.ResourceTypeForTagging = void 0;
    exports.InstanceInformationFilterKey = exports.UnsupportedOperatingSystem = exports.PatchDeploymentStatus = exports.InvalidPermissionType = exports.DocumentPermissionType = exports.StepExecutionFilterKey = exports.AutomationExecutionNotFoundException = exports.InvalidFilterValue = exports.InvalidFilterKey = exports.ExecutionMode = exports.AutomationType = exports.AutomationSubtype = exports.AutomationExecutionStatus = exports.AutomationExecutionFilterKey = exports.AssociationExecutionTargetsFilterKey = exports.AssociationExecutionDoesNotExist = exports.AssociationFilterOperatorType = exports.AssociationExecutionFilterKey = exports.InvalidAssociationVersion = exports.InvalidNextToken = exports.InvalidFilter = exports.DescribeActivationsFilterKeys = exports.TargetInUseException = exports.ResourcePolicyInvalidParameterException = exports.ResourcePolicyConflictException = exports.ResourceDataSyncNotFoundException = exports.ResourceInUseException = exports.ParameterNotFound = exports.OpsMetadataNotFoundException = exports.InvalidTypeNameException = exports.InvalidOptionException = exports.InvalidInventoryRequestException = exports.InvalidDeleteInventoryParametersException = exports.InventorySchemaDeleteOption = exports.InvalidDocumentOperation = exports.AssociatedInstances = exports.AssociationDoesNotExist = exports.InvalidActivationId = exports.InvalidActivation = exports.ResourceDataSyncInvalidConfigurationException = exports.ResourceDataSyncCountExceededException = exports.ResourceDataSyncAlreadyExistsException = exports.ResourceDataSyncS3Format = exports.PatchAction = exports.OperatingSystem = exports.PatchFilterKey = exports.PatchComplianceLevel = exports.OpsMetadataTooManyUpdatesException = exports.OpsMetadataLimitExceededException = exports.OpsMetadataInvalidArgumentException = void 0;
    exports.AttachmentInformationFilterSensitiveLog = exports.CreateDocumentRequestFilterSensitiveLog = exports.DocumentRequiresFilterSensitiveLog = exports.AttachmentsSourceFilterSensitiveLog = exports.CreateAssociationBatchResultFilterSensitiveLog = exports.FailedCreateAssociationFilterSensitiveLog = exports.CreateAssociationBatchRequestFilterSensitiveLog = exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = exports.CreateAssociationResultFilterSensitiveLog = exports.AssociationDescriptionFilterSensitiveLog = exports.AssociationStatusFilterSensitiveLog = exports.AssociationOverviewFilterSensitiveLog = exports.CreateAssociationRequestFilterSensitiveLog = exports.TargetFilterSensitiveLog = exports.TargetLocationFilterSensitiveLog = exports.InstanceAssociationOutputLocationFilterSensitiveLog = exports.S3OutputLocationFilterSensitiveLog = exports.CreateActivationResultFilterSensitiveLog = exports.CreateActivationRequestFilterSensitiveLog = exports.RegistrationMetadataItemFilterSensitiveLog = exports.CancelMaintenanceWindowExecutionResultFilterSensitiveLog = exports.CancelMaintenanceWindowExecutionRequestFilterSensitiveLog = exports.CancelCommandResultFilterSensitiveLog = exports.CancelCommandRequestFilterSensitiveLog = exports.AssociateOpsItemRelatedItemResponseFilterSensitiveLog = exports.AssociateOpsItemRelatedItemRequestFilterSensitiveLog = exports.AlarmStateInformationFilterSensitiveLog = exports.AlarmConfigurationFilterSensitiveLog = exports.AlarmFilterSensitiveLog = exports.AddTagsToResourceResultFilterSensitiveLog = exports.AddTagsToResourceRequestFilterSensitiveLog = exports.ActivationFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.AccountSharingInfoFilterSensitiveLog = exports.OpsItemFilterOperator = exports.OpsItemFilterKey = exports.MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowResourceType = exports.MaintenanceWindowTaskType = exports.MaintenanceWindowExecutionStatus = exports.InvalidDeletionIdException = exports.InventoryDeletionStatus = exports.InstancePatchStateOperatorType = exports.RebootOption = exports.PatchOperationType = exports.PatchComplianceDataState = exports.InvalidInstanceInformationFilterValue = exports.SourceType = exports.ResourceType = exports.PingStatus = void 0;
    exports.DeleteResourceDataSyncResultFilterSensitiveLog = exports.DeleteResourceDataSyncRequestFilterSensitiveLog = exports.DeletePatchBaselineResultFilterSensitiveLog = exports.DeletePatchBaselineRequestFilterSensitiveLog = exports.DeleteParametersResultFilterSensitiveLog = exports.DeleteParametersRequestFilterSensitiveLog = exports.DeleteParameterResultFilterSensitiveLog = exports.DeleteParameterRequestFilterSensitiveLog = exports.DeleteOpsMetadataResultFilterSensitiveLog = exports.DeleteOpsMetadataRequestFilterSensitiveLog = exports.DeleteMaintenanceWindowResultFilterSensitiveLog = exports.DeleteMaintenanceWindowRequestFilterSensitiveLog = exports.DeleteInventoryResultFilterSensitiveLog = exports.InventoryDeletionSummaryFilterSensitiveLog = exports.InventoryDeletionSummaryItemFilterSensitiveLog = exports.DeleteInventoryRequestFilterSensitiveLog = exports.DeleteDocumentResultFilterSensitiveLog = exports.DeleteDocumentRequestFilterSensitiveLog = exports.DeleteAssociationResultFilterSensitiveLog = exports.DeleteAssociationRequestFilterSensitiveLog = exports.DeleteActivationResultFilterSensitiveLog = exports.DeleteActivationRequestFilterSensitiveLog = exports.CreateResourceDataSyncResultFilterSensitiveLog = exports.CreateResourceDataSyncRequestFilterSensitiveLog = exports.ResourceDataSyncSourceFilterSensitiveLog = exports.ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog = exports.ResourceDataSyncOrganizationalUnitFilterSensitiveLog = exports.ResourceDataSyncS3DestinationFilterSensitiveLog = exports.ResourceDataSyncDestinationDataSharingFilterSensitiveLog = exports.CreatePatchBaselineResultFilterSensitiveLog = exports.CreatePatchBaselineRequestFilterSensitiveLog = exports.PatchSourceFilterSensitiveLog = exports.PatchRuleGroupFilterSensitiveLog = exports.PatchRuleFilterSensitiveLog = exports.PatchFilterGroupFilterSensitiveLog = exports.PatchFilterFilterSensitiveLog = exports.CreateOpsMetadataResultFilterSensitiveLog = exports.CreateOpsMetadataRequestFilterSensitiveLog = exports.MetadataValueFilterSensitiveLog = exports.CreateOpsItemResponseFilterSensitiveLog = exports.CreateOpsItemRequestFilterSensitiveLog = exports.RelatedOpsItemFilterSensitiveLog = exports.OpsItemDataValueFilterSensitiveLog = exports.OpsItemNotificationFilterSensitiveLog = exports.CreateMaintenanceWindowResultFilterSensitiveLog = exports.CreateMaintenanceWindowRequestFilterSensitiveLog = exports.CreateDocumentResultFilterSensitiveLog = exports.DocumentDescriptionFilterSensitiveLog = exports.ReviewInformationFilterSensitiveLog = exports.DocumentParameterFilterSensitiveLog = void 0;
    exports.DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog = exports.EffectivePatchFilterSensitiveLog = exports.PatchStatusFilterSensitiveLog = exports.DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog = exports.DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog = exports.InstanceAssociationFilterSensitiveLog = exports.DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog = exports.DescribeDocumentPermissionResponseFilterSensitiveLog = exports.DescribeDocumentPermissionRequestFilterSensitiveLog = exports.DescribeDocumentResultFilterSensitiveLog = exports.DescribeDocumentRequestFilterSensitiveLog = exports.DescribeAvailablePatchesResultFilterSensitiveLog = exports.PatchFilterSensitiveLog = exports.DescribeAvailablePatchesRequestFilterSensitiveLog = exports.PatchOrchestratorFilterFilterSensitiveLog = exports.DescribeAutomationStepExecutionsResultFilterSensitiveLog = exports.StepExecutionFilterSensitiveLog = exports.FailureDetailsFilterSensitiveLog = exports.DescribeAutomationStepExecutionsRequestFilterSensitiveLog = exports.StepExecutionFilterFilterSensitiveLog = exports.DescribeAutomationExecutionsResultFilterSensitiveLog = exports.AutomationExecutionMetadataFilterSensitiveLog = exports.RunbookFilterSensitiveLog = exports.ResolvedTargetsFilterSensitiveLog = exports.DescribeAutomationExecutionsRequestFilterSensitiveLog = exports.AutomationExecutionFilterFilterSensitiveLog = exports.DescribeAssociationExecutionTargetsResultFilterSensitiveLog = exports.AssociationExecutionTargetFilterSensitiveLog = exports.OutputSourceFilterSensitiveLog = exports.DescribeAssociationExecutionTargetsRequestFilterSensitiveLog = exports.AssociationExecutionTargetsFilterFilterSensitiveLog = exports.DescribeAssociationExecutionsResultFilterSensitiveLog = exports.AssociationExecutionFilterSensitiveLog = exports.DescribeAssociationExecutionsRequestFilterSensitiveLog = exports.AssociationExecutionFilterFilterSensitiveLog = exports.DescribeAssociationResultFilterSensitiveLog = exports.DescribeAssociationRequestFilterSensitiveLog = exports.DescribeActivationsResultFilterSensitiveLog = exports.DescribeActivationsRequestFilterSensitiveLog = exports.DescribeActivationsFilterFilterSensitiveLog = exports.DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog = exports.DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog = exports.DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog = exports.DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog = exports.DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog = exports.DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = exports.DeregisterManagedInstanceResultFilterSensitiveLog = exports.DeregisterManagedInstanceRequestFilterSensitiveLog = exports.DeleteResourcePolicyResponseFilterSensitiveLog = exports.DeleteResourcePolicyRequestFilterSensitiveLog = void 0;
    exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = exports.MaintenanceWindowTaskFilterSensitiveLog = exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = exports.LoggingInfoFilterSensitiveLog = exports.DescribeMaintenanceWindowTasksRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = exports.MaintenanceWindowTargetFilterSensitiveLog = exports.DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog = exports.MaintenanceWindowIdentityForTargetFilterSensitiveLog = exports.DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowScheduleResultFilterSensitiveLog = exports.ScheduledWindowExecutionFilterSensitiveLog = exports.DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = exports.MaintenanceWindowIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowsRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog = exports.MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog = exports.MaintenanceWindowExecutionFilterSensitiveLog = exports.DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog = exports.MaintenanceWindowFilterFilterSensitiveLog = exports.DescribeInventoryDeletionsResultFilterSensitiveLog = exports.InventoryDeletionStatusItemFilterSensitiveLog = exports.DescribeInventoryDeletionsRequestFilterSensitiveLog = exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = exports.DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog = exports.InstancePatchStateFilterFilterSensitiveLog = exports.DescribeInstancePatchStatesResultFilterSensitiveLog = exports.InstancePatchStateFilterSensitiveLog = exports.DescribeInstancePatchStatesRequestFilterSensitiveLog = exports.DescribeInstancePatchesResultFilterSensitiveLog = exports.PatchComplianceDataFilterSensitiveLog = exports.DescribeInstancePatchesRequestFilterSensitiveLog = exports.DescribeInstanceInformationResultFilterSensitiveLog = exports.InstanceInformationFilterSensitiveLog = exports.InstanceAggregatedAssociationOverviewFilterSensitiveLog = exports.DescribeInstanceInformationRequestFilterSensitiveLog = exports.InstanceInformationFilterFilterSensitiveLog = exports.InstanceInformationStringFilterFilterSensitiveLog = exports.DescribeInstanceAssociationsStatusResultFilterSensitiveLog = exports.InstanceAssociationStatusInfoFilterSensitiveLog = exports.InstanceAssociationOutputUrlFilterSensitiveLog = exports.S3OutputUrlFilterSensitiveLog = exports.DescribeInstanceAssociationsStatusRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var SSMServiceException_1 = require_SSMServiceException();
    var ResourceTypeForTagging;
    (function(ResourceTypeForTagging2) {
      ResourceTypeForTagging2["ASSOCIATION"] = "Association";
      ResourceTypeForTagging2["AUTOMATION"] = "Automation";
      ResourceTypeForTagging2["DOCUMENT"] = "Document";
      ResourceTypeForTagging2["MAINTENANCE_WINDOW"] = "MaintenanceWindow";
      ResourceTypeForTagging2["MANAGED_INSTANCE"] = "ManagedInstance";
      ResourceTypeForTagging2["OPSMETADATA"] = "OpsMetadata";
      ResourceTypeForTagging2["OPS_ITEM"] = "OpsItem";
      ResourceTypeForTagging2["PARAMETER"] = "Parameter";
      ResourceTypeForTagging2["PATCH_BASELINE"] = "PatchBaseline";
    })(ResourceTypeForTagging = exports.ResourceTypeForTagging || (exports.ResourceTypeForTagging = {}));
    var InternalServerError = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InternalServerError",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InternalServerError = InternalServerError;
    var InvalidResourceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceId.prototype);
      }
    };
    exports.InvalidResourceId = InvalidResourceId;
    var InvalidResourceType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResourceType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResourceType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceType.prototype);
      }
    };
    exports.InvalidResourceType = InvalidResourceType;
    var TooManyTagsError = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyTagsError",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyTagsError";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsError.prototype);
      }
    };
    exports.TooManyTagsError = TooManyTagsError;
    var TooManyUpdates = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TooManyUpdates",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyUpdates";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyUpdates.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TooManyUpdates = TooManyUpdates;
    var ExternalAlarmState;
    (function(ExternalAlarmState2) {
      ExternalAlarmState2["ALARM"] = "ALARM";
      ExternalAlarmState2["UNKNOWN"] = "UNKNOWN";
    })(ExternalAlarmState = exports.ExternalAlarmState || (exports.ExternalAlarmState = {}));
    var AlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AlreadyExistsException = AlreadyExistsException;
    var OpsItemInvalidParameterException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    exports.OpsItemInvalidParameterException = OpsItemInvalidParameterException;
    var OpsItemLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemLimitExceededException.prototype);
        this.ResourceTypes = opts.ResourceTypes;
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    exports.OpsItemLimitExceededException = OpsItemLimitExceededException;
    var OpsItemNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemNotFoundException = OpsItemNotFoundException;
    var OpsItemRelatedItemAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.ResourceUri = opts.ResourceUri;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    exports.OpsItemRelatedItemAlreadyExistsException = OpsItemRelatedItemAlreadyExistsException;
    var DuplicateInstanceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateInstanceId.prototype);
      }
    };
    exports.DuplicateInstanceId = DuplicateInstanceId;
    var InvalidCommandId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidCommandId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCommandId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCommandId.prototype);
      }
    };
    exports.InvalidCommandId = InvalidCommandId;
    var InvalidInstanceId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceId.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInstanceId = InvalidInstanceId;
    var DoesNotExistException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DoesNotExistException",
          $fault: "client",
          ...opts
        });
        this.name = "DoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DoesNotExistException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DoesNotExistException = DoesNotExistException;
    var InvalidParameters = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameters",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameters";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameters.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidParameters = InvalidParameters;
    var AssociationAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationAlreadyExists.prototype);
      }
    };
    exports.AssociationAlreadyExists = AssociationAlreadyExists;
    var AssociationLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationLimitExceeded.prototype);
      }
    };
    exports.AssociationLimitExceeded = AssociationLimitExceeded;
    var AssociationComplianceSeverity;
    (function(AssociationComplianceSeverity2) {
      AssociationComplianceSeverity2["Critical"] = "CRITICAL";
      AssociationComplianceSeverity2["High"] = "HIGH";
      AssociationComplianceSeverity2["Low"] = "LOW";
      AssociationComplianceSeverity2["Medium"] = "MEDIUM";
      AssociationComplianceSeverity2["Unspecified"] = "UNSPECIFIED";
    })(AssociationComplianceSeverity = exports.AssociationComplianceSeverity || (exports.AssociationComplianceSeverity = {}));
    var AssociationSyncCompliance;
    (function(AssociationSyncCompliance2) {
      AssociationSyncCompliance2["Auto"] = "AUTO";
      AssociationSyncCompliance2["Manual"] = "MANUAL";
    })(AssociationSyncCompliance = exports.AssociationSyncCompliance || (exports.AssociationSyncCompliance = {}));
    var AssociationStatusName;
    (function(AssociationStatusName2) {
      AssociationStatusName2["Failed"] = "Failed";
      AssociationStatusName2["Pending"] = "Pending";
      AssociationStatusName2["Success"] = "Success";
    })(AssociationStatusName = exports.AssociationStatusName || (exports.AssociationStatusName = {}));
    var InvalidDocument = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocument",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocument";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocument.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocument = InvalidDocument;
    var InvalidDocumentVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentVersion = InvalidDocumentVersion;
    var InvalidOutputLocation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputLocation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputLocation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputLocation.prototype);
      }
    };
    exports.InvalidOutputLocation = InvalidOutputLocation;
    var InvalidSchedule = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidSchedule",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidSchedule";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSchedule.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidSchedule = InvalidSchedule;
    var InvalidTag = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTag",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTag";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTag.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTag = InvalidTag;
    var InvalidTarget = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTarget",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTarget";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTarget.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTarget = InvalidTarget;
    var InvalidTargetMaps = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTargetMaps",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTargetMaps";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTargetMaps.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTargetMaps = InvalidTargetMaps;
    var UnsupportedPlatformType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedPlatformType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedPlatformType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedPlatformType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedPlatformType = UnsupportedPlatformType;
    var Fault;
    (function(Fault2) {
      Fault2["Client"] = "Client";
      Fault2["Server"] = "Server";
      Fault2["Unknown"] = "Unknown";
    })(Fault = exports.Fault || (exports.Fault = {}));
    var AttachmentsSourceKey;
    (function(AttachmentsSourceKey2) {
      AttachmentsSourceKey2["AttachmentReference"] = "AttachmentReference";
      AttachmentsSourceKey2["S3FileUrl"] = "S3FileUrl";
      AttachmentsSourceKey2["SourceUrl"] = "SourceUrl";
    })(AttachmentsSourceKey = exports.AttachmentsSourceKey || (exports.AttachmentsSourceKey = {}));
    var DocumentFormat;
    (function(DocumentFormat2) {
      DocumentFormat2["JSON"] = "JSON";
      DocumentFormat2["TEXT"] = "TEXT";
      DocumentFormat2["YAML"] = "YAML";
    })(DocumentFormat = exports.DocumentFormat || (exports.DocumentFormat = {}));
    var DocumentType;
    (function(DocumentType2) {
      DocumentType2["ApplicationConfiguration"] = "ApplicationConfiguration";
      DocumentType2["ApplicationConfigurationSchema"] = "ApplicationConfigurationSchema";
      DocumentType2["Automation"] = "Automation";
      DocumentType2["ChangeCalendar"] = "ChangeCalendar";
      DocumentType2["ChangeTemplate"] = "Automation.ChangeTemplate";
      DocumentType2["CloudFormation"] = "CloudFormation";
      DocumentType2["Command"] = "Command";
      DocumentType2["ConformancePackTemplate"] = "ConformancePackTemplate";
      DocumentType2["DeploymentStrategy"] = "DeploymentStrategy";
      DocumentType2["Package"] = "Package";
      DocumentType2["Policy"] = "Policy";
      DocumentType2["ProblemAnalysis"] = "ProblemAnalysis";
      DocumentType2["ProblemAnalysisTemplate"] = "ProblemAnalysisTemplate";
      DocumentType2["QuickSetup"] = "QuickSetup";
      DocumentType2["Session"] = "Session";
    })(DocumentType = exports.DocumentType || (exports.DocumentType = {}));
    var DocumentHashType;
    (function(DocumentHashType2) {
      DocumentHashType2["SHA1"] = "Sha1";
      DocumentHashType2["SHA256"] = "Sha256";
    })(DocumentHashType = exports.DocumentHashType || (exports.DocumentHashType = {}));
    var DocumentParameterType;
    (function(DocumentParameterType2) {
      DocumentParameterType2["String"] = "String";
      DocumentParameterType2["StringList"] = "StringList";
    })(DocumentParameterType = exports.DocumentParameterType || (exports.DocumentParameterType = {}));
    var PlatformType;
    (function(PlatformType2) {
      PlatformType2["LINUX"] = "Linux";
      PlatformType2["MACOS"] = "MacOS";
      PlatformType2["WINDOWS"] = "Windows";
    })(PlatformType = exports.PlatformType || (exports.PlatformType = {}));
    var ReviewStatus;
    (function(ReviewStatus2) {
      ReviewStatus2["APPROVED"] = "APPROVED";
      ReviewStatus2["NOT_REVIEWED"] = "NOT_REVIEWED";
      ReviewStatus2["PENDING"] = "PENDING";
      ReviewStatus2["REJECTED"] = "REJECTED";
    })(ReviewStatus = exports.ReviewStatus || (exports.ReviewStatus = {}));
    var DocumentStatus;
    (function(DocumentStatus2) {
      DocumentStatus2["Active"] = "Active";
      DocumentStatus2["Creating"] = "Creating";
      DocumentStatus2["Deleting"] = "Deleting";
      DocumentStatus2["Failed"] = "Failed";
      DocumentStatus2["Updating"] = "Updating";
    })(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
    var DocumentAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentAlreadyExists.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentAlreadyExists = DocumentAlreadyExists;
    var DocumentLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentLimitExceeded = DocumentLimitExceeded;
    var InvalidDocumentContent = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentContent = InvalidDocumentContent;
    var InvalidDocumentSchemaVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentSchemaVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentSchemaVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentSchemaVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentSchemaVersion = InvalidDocumentSchemaVersion;
    var MaxDocumentSizeExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "MaxDocumentSizeExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "MaxDocumentSizeExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaxDocumentSizeExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.MaxDocumentSizeExceeded = MaxDocumentSizeExceeded;
    var IdempotentParameterMismatch = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IdempotentParameterMismatch",
          $fault: "client",
          ...opts
        });
        this.name = "IdempotentParameterMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatch = IdempotentParameterMismatch;
    var ResourceLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceLimitExceededException = ResourceLimitExceededException;
    var OpsItemDataType;
    (function(OpsItemDataType2) {
      OpsItemDataType2["SEARCHABLE_STRING"] = "SearchableString";
      OpsItemDataType2["STRING"] = "String";
    })(OpsItemDataType = exports.OpsItemDataType || (exports.OpsItemDataType = {}));
    var OpsItemAccessDeniedException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemAccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemAccessDeniedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemAccessDeniedException = OpsItemAccessDeniedException;
    var OpsItemAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.OpsItemId = opts.OpsItemId;
      }
    };
    exports.OpsItemAlreadyExistsException = OpsItemAlreadyExistsException;
    var OpsMetadataAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataAlreadyExistsException.prototype);
      }
    };
    exports.OpsMetadataAlreadyExistsException = OpsMetadataAlreadyExistsException;
    var OpsMetadataInvalidArgumentException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataInvalidArgumentException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataInvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataInvalidArgumentException.prototype);
      }
    };
    exports.OpsMetadataInvalidArgumentException = OpsMetadataInvalidArgumentException;
    var OpsMetadataLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataLimitExceededException.prototype);
      }
    };
    exports.OpsMetadataLimitExceededException = OpsMetadataLimitExceededException;
    var OpsMetadataTooManyUpdatesException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataTooManyUpdatesException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataTooManyUpdatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataTooManyUpdatesException.prototype);
      }
    };
    exports.OpsMetadataTooManyUpdatesException = OpsMetadataTooManyUpdatesException;
    var PatchComplianceLevel;
    (function(PatchComplianceLevel2) {
      PatchComplianceLevel2["Critical"] = "CRITICAL";
      PatchComplianceLevel2["High"] = "HIGH";
      PatchComplianceLevel2["Informational"] = "INFORMATIONAL";
      PatchComplianceLevel2["Low"] = "LOW";
      PatchComplianceLevel2["Medium"] = "MEDIUM";
      PatchComplianceLevel2["Unspecified"] = "UNSPECIFIED";
    })(PatchComplianceLevel = exports.PatchComplianceLevel || (exports.PatchComplianceLevel = {}));
    var PatchFilterKey;
    (function(PatchFilterKey2) {
      PatchFilterKey2["AdvisoryId"] = "ADVISORY_ID";
      PatchFilterKey2["Arch"] = "ARCH";
      PatchFilterKey2["BugzillaId"] = "BUGZILLA_ID";
      PatchFilterKey2["CVEId"] = "CVE_ID";
      PatchFilterKey2["Classification"] = "CLASSIFICATION";
      PatchFilterKey2["Epoch"] = "EPOCH";
      PatchFilterKey2["MsrcSeverity"] = "MSRC_SEVERITY";
      PatchFilterKey2["Name"] = "NAME";
      PatchFilterKey2["PatchId"] = "PATCH_ID";
      PatchFilterKey2["PatchSet"] = "PATCH_SET";
      PatchFilterKey2["Priority"] = "PRIORITY";
      PatchFilterKey2["Product"] = "PRODUCT";
      PatchFilterKey2["ProductFamily"] = "PRODUCT_FAMILY";
      PatchFilterKey2["Release"] = "RELEASE";
      PatchFilterKey2["Repository"] = "REPOSITORY";
      PatchFilterKey2["Section"] = "SECTION";
      PatchFilterKey2["Security"] = "SECURITY";
      PatchFilterKey2["Severity"] = "SEVERITY";
      PatchFilterKey2["Version"] = "VERSION";
    })(PatchFilterKey = exports.PatchFilterKey || (exports.PatchFilterKey = {}));
    var OperatingSystem;
    (function(OperatingSystem2) {
      OperatingSystem2["AmazonLinux"] = "AMAZON_LINUX";
      OperatingSystem2["AmazonLinux2"] = "AMAZON_LINUX_2";
      OperatingSystem2["AmazonLinux2022"] = "AMAZON_LINUX_2022";
      OperatingSystem2["CentOS"] = "CENTOS";
      OperatingSystem2["Debian"] = "DEBIAN";
      OperatingSystem2["MacOS"] = "MACOS";
      OperatingSystem2["OracleLinux"] = "ORACLE_LINUX";
      OperatingSystem2["Raspbian"] = "RASPBIAN";
      OperatingSystem2["RedhatEnterpriseLinux"] = "REDHAT_ENTERPRISE_LINUX";
      OperatingSystem2["Rocky_Linux"] = "ROCKY_LINUX";
      OperatingSystem2["Suse"] = "SUSE";
      OperatingSystem2["Ubuntu"] = "UBUNTU";
      OperatingSystem2["Windows"] = "WINDOWS";
    })(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));
    var PatchAction;
    (function(PatchAction2) {
      PatchAction2["AllowAsDependency"] = "ALLOW_AS_DEPENDENCY";
      PatchAction2["Block"] = "BLOCK";
    })(PatchAction = exports.PatchAction || (exports.PatchAction = {}));
    var ResourceDataSyncS3Format;
    (function(ResourceDataSyncS3Format2) {
      ResourceDataSyncS3Format2["JSON_SERDE"] = "JsonSerDe";
    })(ResourceDataSyncS3Format = exports.ResourceDataSyncS3Format || (exports.ResourceDataSyncS3Format = {}));
    var ResourceDataSyncAlreadyExistsException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncAlreadyExistsException.prototype);
        this.SyncName = opts.SyncName;
      }
    };
    exports.ResourceDataSyncAlreadyExistsException = ResourceDataSyncAlreadyExistsException;
    var ResourceDataSyncCountExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncCountExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncCountExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncCountExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncCountExceededException = ResourceDataSyncCountExceededException;
    var ResourceDataSyncInvalidConfigurationException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncInvalidConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncInvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncInvalidConfigurationException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncInvalidConfigurationException = ResourceDataSyncInvalidConfigurationException;
    var InvalidActivation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidActivation = InvalidActivation;
    var InvalidActivationId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidActivationId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidActivationId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidActivationId.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidActivationId = InvalidActivationId;
    var AssociationDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationDoesNotExist = AssociationDoesNotExist;
    var AssociatedInstances = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociatedInstances",
          $fault: "client",
          ...opts
        });
        this.name = "AssociatedInstances";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociatedInstances.prototype);
      }
    };
    exports.AssociatedInstances = AssociatedInstances;
    var InvalidDocumentOperation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentOperation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentOperation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentOperation = InvalidDocumentOperation;
    var InventorySchemaDeleteOption;
    (function(InventorySchemaDeleteOption2) {
      InventorySchemaDeleteOption2["DELETE_SCHEMA"] = "DeleteSchema";
      InventorySchemaDeleteOption2["DISABLE_SCHEMA"] = "DisableSchema";
    })(InventorySchemaDeleteOption = exports.InventorySchemaDeleteOption || (exports.InventorySchemaDeleteOption = {}));
    var InvalidDeleteInventoryParametersException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeleteInventoryParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeleteInventoryParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeleteInventoryParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDeleteInventoryParametersException = InvalidDeleteInventoryParametersException;
    var InvalidInventoryRequestException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryRequestException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryRequestException = InvalidInventoryRequestException;
    var InvalidOptionException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOptionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidOptionException = InvalidOptionException;
    var InvalidTypeNameException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidTypeNameException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidTypeNameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTypeNameException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidTypeNameException = InvalidTypeNameException;
    var OpsMetadataNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataNotFoundException.prototype);
      }
    };
    exports.OpsMetadataNotFoundException = OpsMetadataNotFoundException;
    var ParameterNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterNotFound.prototype);
      }
    };
    exports.ParameterNotFound = ParameterNotFound;
    var ResourceInUseException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    var ResourceDataSyncNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncNotFoundException.prototype);
        this.SyncName = opts.SyncName;
        this.SyncType = opts.SyncType;
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncNotFoundException = ResourceDataSyncNotFoundException;
    var ResourcePolicyConflictException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourcePolicyConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyConflictException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourcePolicyConflictException = ResourcePolicyConflictException;
    var ResourcePolicyInvalidParameterException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourcePolicyInvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyInvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyInvalidParameterException.prototype);
        this.ParameterNames = opts.ParameterNames;
        this.Message = opts.Message;
      }
    };
    exports.ResourcePolicyInvalidParameterException = ResourcePolicyInvalidParameterException;
    var TargetInUseException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "TargetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetInUseException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TargetInUseException = TargetInUseException;
    var DescribeActivationsFilterKeys;
    (function(DescribeActivationsFilterKeys2) {
      DescribeActivationsFilterKeys2["ACTIVATION_IDS"] = "ActivationIds";
      DescribeActivationsFilterKeys2["DEFAULT_INSTANCE_NAME"] = "DefaultInstanceName";
      DescribeActivationsFilterKeys2["IAM_ROLE"] = "IamRole";
    })(DescribeActivationsFilterKeys = exports.DescribeActivationsFilterKeys || (exports.DescribeActivationsFilterKeys = {}));
    var InvalidFilter = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilter",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilter";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilter.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidFilter = InvalidFilter;
    var InvalidNextToken = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNextToken",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNextToken = InvalidNextToken;
    var InvalidAssociationVersion = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociationVersion",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociationVersion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociationVersion.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAssociationVersion = InvalidAssociationVersion;
    var AssociationExecutionFilterKey;
    (function(AssociationExecutionFilterKey2) {
      AssociationExecutionFilterKey2["CreatedTime"] = "CreatedTime";
      AssociationExecutionFilterKey2["ExecutionId"] = "ExecutionId";
      AssociationExecutionFilterKey2["Status"] = "Status";
    })(AssociationExecutionFilterKey = exports.AssociationExecutionFilterKey || (exports.AssociationExecutionFilterKey = {}));
    var AssociationFilterOperatorType;
    (function(AssociationFilterOperatorType2) {
      AssociationFilterOperatorType2["Equal"] = "EQUAL";
      AssociationFilterOperatorType2["GreaterThan"] = "GREATER_THAN";
      AssociationFilterOperatorType2["LessThan"] = "LESS_THAN";
    })(AssociationFilterOperatorType = exports.AssociationFilterOperatorType || (exports.AssociationFilterOperatorType = {}));
    var AssociationExecutionDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationExecutionDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationExecutionDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationExecutionDoesNotExist.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationExecutionDoesNotExist = AssociationExecutionDoesNotExist;
    var AssociationExecutionTargetsFilterKey;
    (function(AssociationExecutionTargetsFilterKey2) {
      AssociationExecutionTargetsFilterKey2["ResourceId"] = "ResourceId";
      AssociationExecutionTargetsFilterKey2["ResourceType"] = "ResourceType";
      AssociationExecutionTargetsFilterKey2["Status"] = "Status";
    })(AssociationExecutionTargetsFilterKey = exports.AssociationExecutionTargetsFilterKey || (exports.AssociationExecutionTargetsFilterKey = {}));
    var AutomationExecutionFilterKey;
    (function(AutomationExecutionFilterKey2) {
      AutomationExecutionFilterKey2["AUTOMATION_SUBTYPE"] = "AutomationSubtype";
      AutomationExecutionFilterKey2["AUTOMATION_TYPE"] = "AutomationType";
      AutomationExecutionFilterKey2["CURRENT_ACTION"] = "CurrentAction";
      AutomationExecutionFilterKey2["DOCUMENT_NAME_PREFIX"] = "DocumentNamePrefix";
      AutomationExecutionFilterKey2["EXECUTION_ID"] = "ExecutionId";
      AutomationExecutionFilterKey2["EXECUTION_STATUS"] = "ExecutionStatus";
      AutomationExecutionFilterKey2["OPS_ITEM_ID"] = "OpsItemId";
      AutomationExecutionFilterKey2["PARENT_EXECUTION_ID"] = "ParentExecutionId";
      AutomationExecutionFilterKey2["START_TIME_AFTER"] = "StartTimeAfter";
      AutomationExecutionFilterKey2["START_TIME_BEFORE"] = "StartTimeBefore";
      AutomationExecutionFilterKey2["TAG_KEY"] = "TagKey";
      AutomationExecutionFilterKey2["TARGET_RESOURCE_GROUP"] = "TargetResourceGroup";
    })(AutomationExecutionFilterKey = exports.AutomationExecutionFilterKey || (exports.AutomationExecutionFilterKey = {}));
    var AutomationExecutionStatus;
    (function(AutomationExecutionStatus2) {
      AutomationExecutionStatus2["APPROVED"] = "Approved";
      AutomationExecutionStatus2["CANCELLED"] = "Cancelled";
      AutomationExecutionStatus2["CANCELLING"] = "Cancelling";
      AutomationExecutionStatus2["CHANGE_CALENDAR_OVERRIDE_APPROVED"] = "ChangeCalendarOverrideApproved";
      AutomationExecutionStatus2["CHANGE_CALENDAR_OVERRIDE_REJECTED"] = "ChangeCalendarOverrideRejected";
      AutomationExecutionStatus2["COMPLETED_WITH_FAILURE"] = "CompletedWithFailure";
      AutomationExecutionStatus2["COMPLETED_WITH_SUCCESS"] = "CompletedWithSuccess";
      AutomationExecutionStatus2["FAILED"] = "Failed";
      AutomationExecutionStatus2["INPROGRESS"] = "InProgress";
      AutomationExecutionStatus2["PENDING"] = "Pending";
      AutomationExecutionStatus2["PENDING_APPROVAL"] = "PendingApproval";
      AutomationExecutionStatus2["PENDING_CHANGE_CALENDAR_OVERRIDE"] = "PendingChangeCalendarOverride";
      AutomationExecutionStatus2["REJECTED"] = "Rejected";
      AutomationExecutionStatus2["RUNBOOK_INPROGRESS"] = "RunbookInProgress";
      AutomationExecutionStatus2["SCHEDULED"] = "Scheduled";
      AutomationExecutionStatus2["SUCCESS"] = "Success";
      AutomationExecutionStatus2["TIMEDOUT"] = "TimedOut";
      AutomationExecutionStatus2["WAITING"] = "Waiting";
    })(AutomationExecutionStatus = exports.AutomationExecutionStatus || (exports.AutomationExecutionStatus = {}));
    var AutomationSubtype;
    (function(AutomationSubtype2) {
      AutomationSubtype2["ChangeRequest"] = "ChangeRequest";
    })(AutomationSubtype = exports.AutomationSubtype || (exports.AutomationSubtype = {}));
    var AutomationType;
    (function(AutomationType2) {
      AutomationType2["CrossAccount"] = "CrossAccount";
      AutomationType2["Local"] = "Local";
    })(AutomationType = exports.AutomationType || (exports.AutomationType = {}));
    var ExecutionMode;
    (function(ExecutionMode2) {
      ExecutionMode2["Auto"] = "Auto";
      ExecutionMode2["Interactive"] = "Interactive";
    })(ExecutionMode = exports.ExecutionMode || (exports.ExecutionMode = {}));
    var InvalidFilterKey = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterKey",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterKey.prototype);
      }
    };
    exports.InvalidFilterKey = InvalidFilterKey;
    var InvalidFilterValue = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterValue.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidFilterValue = InvalidFilterValue;
    var AutomationExecutionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationExecutionNotFoundException = AutomationExecutionNotFoundException;
    var StepExecutionFilterKey;
    (function(StepExecutionFilterKey2) {
      StepExecutionFilterKey2["ACTION"] = "Action";
      StepExecutionFilterKey2["START_TIME_AFTER"] = "StartTimeAfter";
      StepExecutionFilterKey2["START_TIME_BEFORE"] = "StartTimeBefore";
      StepExecutionFilterKey2["STEP_EXECUTION_ID"] = "StepExecutionId";
      StepExecutionFilterKey2["STEP_EXECUTION_STATUS"] = "StepExecutionStatus";
      StepExecutionFilterKey2["STEP_NAME"] = "StepName";
    })(StepExecutionFilterKey = exports.StepExecutionFilterKey || (exports.StepExecutionFilterKey = {}));
    var DocumentPermissionType;
    (function(DocumentPermissionType2) {
      DocumentPermissionType2["SHARE"] = "Share";
    })(DocumentPermissionType = exports.DocumentPermissionType || (exports.DocumentPermissionType = {}));
    var InvalidPermissionType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPermissionType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPermissionType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPermissionType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidPermissionType = InvalidPermissionType;
    var PatchDeploymentStatus;
    (function(PatchDeploymentStatus2) {
      PatchDeploymentStatus2["Approved"] = "APPROVED";
      PatchDeploymentStatus2["ExplicitApproved"] = "EXPLICIT_APPROVED";
      PatchDeploymentStatus2["ExplicitRejected"] = "EXPLICIT_REJECTED";
      PatchDeploymentStatus2["PendingApproval"] = "PENDING_APPROVAL";
    })(PatchDeploymentStatus = exports.PatchDeploymentStatus || (exports.PatchDeploymentStatus = {}));
    var UnsupportedOperatingSystem = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedOperatingSystem",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedOperatingSystem";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperatingSystem.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedOperatingSystem = UnsupportedOperatingSystem;
    var InstanceInformationFilterKey;
    (function(InstanceInformationFilterKey2) {
      InstanceInformationFilterKey2["ACTIVATION_IDS"] = "ActivationIds";
      InstanceInformationFilterKey2["AGENT_VERSION"] = "AgentVersion";
      InstanceInformationFilterKey2["ASSOCIATION_STATUS"] = "AssociationStatus";
      InstanceInformationFilterKey2["IAM_ROLE"] = "IamRole";
      InstanceInformationFilterKey2["INSTANCE_IDS"] = "InstanceIds";
      InstanceInformationFilterKey2["PING_STATUS"] = "PingStatus";
      InstanceInformationFilterKey2["PLATFORM_TYPES"] = "PlatformTypes";
      InstanceInformationFilterKey2["RESOURCE_TYPE"] = "ResourceType";
    })(InstanceInformationFilterKey = exports.InstanceInformationFilterKey || (exports.InstanceInformationFilterKey = {}));
    var PingStatus;
    (function(PingStatus2) {
      PingStatus2["CONNECTION_LOST"] = "ConnectionLost";
      PingStatus2["INACTIVE"] = "Inactive";
      PingStatus2["ONLINE"] = "Online";
    })(PingStatus = exports.PingStatus || (exports.PingStatus = {}));
    var ResourceType;
    (function(ResourceType2) {
      ResourceType2["DOCUMENT"] = "Document";
      ResourceType2["EC2_INSTANCE"] = "EC2Instance";
      ResourceType2["MANAGED_INSTANCE"] = "ManagedInstance";
    })(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
    var SourceType;
    (function(SourceType2) {
      SourceType2["AWS_EC2_INSTANCE"] = "AWS::EC2::Instance";
      SourceType2["AWS_IOT_THING"] = "AWS::IoT::Thing";
      SourceType2["AWS_SSM_MANAGEDINSTANCE"] = "AWS::SSM::ManagedInstance";
    })(SourceType = exports.SourceType || (exports.SourceType = {}));
    var InvalidInstanceInformationFilterValue = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInstanceInformationFilterValue",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInstanceInformationFilterValue";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInstanceInformationFilterValue.prototype);
      }
    };
    exports.InvalidInstanceInformationFilterValue = InvalidInstanceInformationFilterValue;
    var PatchComplianceDataState;
    (function(PatchComplianceDataState2) {
      PatchComplianceDataState2["Failed"] = "FAILED";
      PatchComplianceDataState2["Installed"] = "INSTALLED";
      PatchComplianceDataState2["InstalledOther"] = "INSTALLED_OTHER";
      PatchComplianceDataState2["InstalledPendingReboot"] = "INSTALLED_PENDING_REBOOT";
      PatchComplianceDataState2["InstalledRejected"] = "INSTALLED_REJECTED";
      PatchComplianceDataState2["Missing"] = "MISSING";
      PatchComplianceDataState2["NotApplicable"] = "NOT_APPLICABLE";
    })(PatchComplianceDataState = exports.PatchComplianceDataState || (exports.PatchComplianceDataState = {}));
    var PatchOperationType;
    (function(PatchOperationType2) {
      PatchOperationType2["INSTALL"] = "Install";
      PatchOperationType2["SCAN"] = "Scan";
    })(PatchOperationType = exports.PatchOperationType || (exports.PatchOperationType = {}));
    var RebootOption;
    (function(RebootOption2) {
      RebootOption2["NO_REBOOT"] = "NoReboot";
      RebootOption2["REBOOT_IF_NEEDED"] = "RebootIfNeeded";
    })(RebootOption = exports.RebootOption || (exports.RebootOption = {}));
    var InstancePatchStateOperatorType;
    (function(InstancePatchStateOperatorType2) {
      InstancePatchStateOperatorType2["EQUAL"] = "Equal";
      InstancePatchStateOperatorType2["GREATER_THAN"] = "GreaterThan";
      InstancePatchStateOperatorType2["LESS_THAN"] = "LessThan";
      InstancePatchStateOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(InstancePatchStateOperatorType = exports.InstancePatchStateOperatorType || (exports.InstancePatchStateOperatorType = {}));
    var InventoryDeletionStatus;
    (function(InventoryDeletionStatus2) {
      InventoryDeletionStatus2["COMPLETE"] = "Complete";
      InventoryDeletionStatus2["IN_PROGRESS"] = "InProgress";
    })(InventoryDeletionStatus = exports.InventoryDeletionStatus || (exports.InventoryDeletionStatus = {}));
    var InvalidDeletionIdException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDeletionIdException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDeletionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeletionIdException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDeletionIdException = InvalidDeletionIdException;
    var MaintenanceWindowExecutionStatus;
    (function(MaintenanceWindowExecutionStatus2) {
      MaintenanceWindowExecutionStatus2["Cancelled"] = "CANCELLED";
      MaintenanceWindowExecutionStatus2["Cancelling"] = "CANCELLING";
      MaintenanceWindowExecutionStatus2["Failed"] = "FAILED";
      MaintenanceWindowExecutionStatus2["InProgress"] = "IN_PROGRESS";
      MaintenanceWindowExecutionStatus2["Pending"] = "PENDING";
      MaintenanceWindowExecutionStatus2["SkippedOverlapping"] = "SKIPPED_OVERLAPPING";
      MaintenanceWindowExecutionStatus2["Success"] = "SUCCESS";
      MaintenanceWindowExecutionStatus2["TimedOut"] = "TIMED_OUT";
    })(MaintenanceWindowExecutionStatus = exports.MaintenanceWindowExecutionStatus || (exports.MaintenanceWindowExecutionStatus = {}));
    var MaintenanceWindowTaskType;
    (function(MaintenanceWindowTaskType2) {
      MaintenanceWindowTaskType2["Automation"] = "AUTOMATION";
      MaintenanceWindowTaskType2["Lambda"] = "LAMBDA";
      MaintenanceWindowTaskType2["RunCommand"] = "RUN_COMMAND";
      MaintenanceWindowTaskType2["StepFunctions"] = "STEP_FUNCTIONS";
    })(MaintenanceWindowTaskType = exports.MaintenanceWindowTaskType || (exports.MaintenanceWindowTaskType = {}));
    var MaintenanceWindowResourceType;
    (function(MaintenanceWindowResourceType2) {
      MaintenanceWindowResourceType2["Instance"] = "INSTANCE";
      MaintenanceWindowResourceType2["ResourceGroup"] = "RESOURCE_GROUP";
    })(MaintenanceWindowResourceType = exports.MaintenanceWindowResourceType || (exports.MaintenanceWindowResourceType = {}));
    var MaintenanceWindowTaskCutoffBehavior;
    (function(MaintenanceWindowTaskCutoffBehavior2) {
      MaintenanceWindowTaskCutoffBehavior2["CancelTask"] = "CANCEL_TASK";
      MaintenanceWindowTaskCutoffBehavior2["ContinueTask"] = "CONTINUE_TASK";
    })(MaintenanceWindowTaskCutoffBehavior = exports.MaintenanceWindowTaskCutoffBehavior || (exports.MaintenanceWindowTaskCutoffBehavior = {}));
    var OpsItemFilterKey;
    (function(OpsItemFilterKey2) {
      OpsItemFilterKey2["ACCOUNT_ID"] = "AccountId";
      OpsItemFilterKey2["ACTUAL_END_TIME"] = "ActualEndTime";
      OpsItemFilterKey2["ACTUAL_START_TIME"] = "ActualStartTime";
      OpsItemFilterKey2["AUTOMATION_ID"] = "AutomationId";
      OpsItemFilterKey2["CATEGORY"] = "Category";
      OpsItemFilterKey2["CHANGE_REQUEST_APPROVER_ARN"] = "ChangeRequestByApproverArn";
      OpsItemFilterKey2["CHANGE_REQUEST_APPROVER_NAME"] = "ChangeRequestByApproverName";
      OpsItemFilterKey2["CHANGE_REQUEST_REQUESTER_ARN"] = "ChangeRequestByRequesterArn";
      OpsItemFilterKey2["CHANGE_REQUEST_REQUESTER_NAME"] = "ChangeRequestByRequesterName";
      OpsItemFilterKey2["CHANGE_REQUEST_TARGETS_RESOURCE_GROUP"] = "ChangeRequestByTargetsResourceGroup";
      OpsItemFilterKey2["CHANGE_REQUEST_TEMPLATE"] = "ChangeRequestByTemplate";
      OpsItemFilterKey2["CREATED_BY"] = "CreatedBy";
      OpsItemFilterKey2["CREATED_TIME"] = "CreatedTime";
      OpsItemFilterKey2["INSIGHT_TYPE"] = "InsightByType";
      OpsItemFilterKey2["LAST_MODIFIED_TIME"] = "LastModifiedTime";
      OpsItemFilterKey2["OPERATIONAL_DATA"] = "OperationalData";
      OpsItemFilterKey2["OPERATIONAL_DATA_KEY"] = "OperationalDataKey";
      OpsItemFilterKey2["OPERATIONAL_DATA_VALUE"] = "OperationalDataValue";
      OpsItemFilterKey2["OPSITEM_ID"] = "OpsItemId";
      OpsItemFilterKey2["OPSITEM_TYPE"] = "OpsItemType";
      OpsItemFilterKey2["PLANNED_END_TIME"] = "PlannedEndTime";
      OpsItemFilterKey2["PLANNED_START_TIME"] = "PlannedStartTime";
      OpsItemFilterKey2["PRIORITY"] = "Priority";
      OpsItemFilterKey2["RESOURCE_ID"] = "ResourceId";
      OpsItemFilterKey2["SEVERITY"] = "Severity";
      OpsItemFilterKey2["SOURCE"] = "Source";
      OpsItemFilterKey2["STATUS"] = "Status";
      OpsItemFilterKey2["TITLE"] = "Title";
    })(OpsItemFilterKey = exports.OpsItemFilterKey || (exports.OpsItemFilterKey = {}));
    var OpsItemFilterOperator;
    (function(OpsItemFilterOperator2) {
      OpsItemFilterOperator2["CONTAINS"] = "Contains";
      OpsItemFilterOperator2["EQUAL"] = "Equal";
      OpsItemFilterOperator2["GREATER_THAN"] = "GreaterThan";
      OpsItemFilterOperator2["LESS_THAN"] = "LessThan";
    })(OpsItemFilterOperator = exports.OpsItemFilterOperator || (exports.OpsItemFilterOperator = {}));
    var AccountSharingInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountSharingInfoFilterSensitiveLog = AccountSharingInfoFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var ActivationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ActivationFilterSensitiveLog = ActivationFilterSensitiveLog;
    var AddTagsToResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddTagsToResourceRequestFilterSensitiveLog = AddTagsToResourceRequestFilterSensitiveLog;
    var AddTagsToResourceResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddTagsToResourceResultFilterSensitiveLog = AddTagsToResourceResultFilterSensitiveLog;
    var AlarmFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AlarmFilterSensitiveLog = AlarmFilterSensitiveLog;
    var AlarmConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AlarmConfigurationFilterSensitiveLog = AlarmConfigurationFilterSensitiveLog;
    var AlarmStateInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AlarmStateInformationFilterSensitiveLog = AlarmStateInformationFilterSensitiveLog;
    var AssociateOpsItemRelatedItemRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociateOpsItemRelatedItemRequestFilterSensitiveLog = AssociateOpsItemRelatedItemRequestFilterSensitiveLog;
    var AssociateOpsItemRelatedItemResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociateOpsItemRelatedItemResponseFilterSensitiveLog = AssociateOpsItemRelatedItemResponseFilterSensitiveLog;
    var CancelCommandRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelCommandRequestFilterSensitiveLog = CancelCommandRequestFilterSensitiveLog;
    var CancelCommandResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelCommandResultFilterSensitiveLog = CancelCommandResultFilterSensitiveLog;
    var CancelMaintenanceWindowExecutionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelMaintenanceWindowExecutionRequestFilterSensitiveLog = CancelMaintenanceWindowExecutionRequestFilterSensitiveLog;
    var CancelMaintenanceWindowExecutionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelMaintenanceWindowExecutionResultFilterSensitiveLog = CancelMaintenanceWindowExecutionResultFilterSensitiveLog;
    var RegistrationMetadataItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegistrationMetadataItemFilterSensitiveLog = RegistrationMetadataItemFilterSensitiveLog;
    var CreateActivationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateActivationRequestFilterSensitiveLog = CreateActivationRequestFilterSensitiveLog;
    var CreateActivationResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateActivationResultFilterSensitiveLog = CreateActivationResultFilterSensitiveLog;
    var S3OutputLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.S3OutputLocationFilterSensitiveLog = S3OutputLocationFilterSensitiveLog;
    var InstanceAssociationOutputLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceAssociationOutputLocationFilterSensitiveLog = InstanceAssociationOutputLocationFilterSensitiveLog;
    var TargetLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TargetLocationFilterSensitiveLog = TargetLocationFilterSensitiveLog;
    var TargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TargetFilterSensitiveLog = TargetFilterSensitiveLog;
    var CreateAssociationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateAssociationRequestFilterSensitiveLog = CreateAssociationRequestFilterSensitiveLog;
    var AssociationOverviewFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationOverviewFilterSensitiveLog = AssociationOverviewFilterSensitiveLog;
    var AssociationStatusFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationStatusFilterSensitiveLog = AssociationStatusFilterSensitiveLog;
    var AssociationDescriptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociationDescriptionFilterSensitiveLog = AssociationDescriptionFilterSensitiveLog;
    var CreateAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.CreateAssociationResultFilterSensitiveLog = CreateAssociationResultFilterSensitiveLog;
    var CreateAssociationBatchRequestEntryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateAssociationBatchRequestEntryFilterSensitiveLog = CreateAssociationBatchRequestEntryFilterSensitiveLog;
    var CreateAssociationBatchRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Entries && {
        Entries: obj.Entries.map((item) => (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(item))
      }
    });
    exports.CreateAssociationBatchRequestFilterSensitiveLog = CreateAssociationBatchRequestFilterSensitiveLog;
    var FailedCreateAssociationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Entry && { Entry: (0, exports.CreateAssociationBatchRequestEntryFilterSensitiveLog)(obj.Entry) }
    });
    exports.FailedCreateAssociationFilterSensitiveLog = FailedCreateAssociationFilterSensitiveLog;
    var CreateAssociationBatchResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Successful && { Successful: obj.Successful.map((item) => (0, exports.AssociationDescriptionFilterSensitiveLog)(item)) },
      ...obj.Failed && { Failed: obj.Failed.map((item) => (0, exports.FailedCreateAssociationFilterSensitiveLog)(item)) }
    });
    exports.CreateAssociationBatchResultFilterSensitiveLog = CreateAssociationBatchResultFilterSensitiveLog;
    var AttachmentsSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachmentsSourceFilterSensitiveLog = AttachmentsSourceFilterSensitiveLog;
    var DocumentRequiresFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentRequiresFilterSensitiveLog = DocumentRequiresFilterSensitiveLog;
    var CreateDocumentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateDocumentRequestFilterSensitiveLog = CreateDocumentRequestFilterSensitiveLog;
    var AttachmentInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachmentInformationFilterSensitiveLog = AttachmentInformationFilterSensitiveLog;
    var DocumentParameterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentParameterFilterSensitiveLog = DocumentParameterFilterSensitiveLog;
    var ReviewInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ReviewInformationFilterSensitiveLog = ReviewInformationFilterSensitiveLog;
    var DocumentDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentDescriptionFilterSensitiveLog = DocumentDescriptionFilterSensitiveLog;
    var CreateDocumentResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateDocumentResultFilterSensitiveLog = CreateDocumentResultFilterSensitiveLog;
    var CreateMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CreateMaintenanceWindowRequestFilterSensitiveLog = CreateMaintenanceWindowRequestFilterSensitiveLog;
    var CreateMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateMaintenanceWindowResultFilterSensitiveLog = CreateMaintenanceWindowResultFilterSensitiveLog;
    var OpsItemNotificationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemNotificationFilterSensitiveLog = OpsItemNotificationFilterSensitiveLog;
    var OpsItemDataValueFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemDataValueFilterSensitiveLog = OpsItemDataValueFilterSensitiveLog;
    var RelatedOpsItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RelatedOpsItemFilterSensitiveLog = RelatedOpsItemFilterSensitiveLog;
    var CreateOpsItemRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateOpsItemRequestFilterSensitiveLog = CreateOpsItemRequestFilterSensitiveLog;
    var CreateOpsItemResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateOpsItemResponseFilterSensitiveLog = CreateOpsItemResponseFilterSensitiveLog;
    var MetadataValueFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MetadataValueFilterSensitiveLog = MetadataValueFilterSensitiveLog;
    var CreateOpsMetadataRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateOpsMetadataRequestFilterSensitiveLog = CreateOpsMetadataRequestFilterSensitiveLog;
    var CreateOpsMetadataResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateOpsMetadataResultFilterSensitiveLog = CreateOpsMetadataResultFilterSensitiveLog;
    var PatchFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchFilterFilterSensitiveLog = PatchFilterFilterSensitiveLog;
    var PatchFilterGroupFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchFilterGroupFilterSensitiveLog = PatchFilterGroupFilterSensitiveLog;
    var PatchRuleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchRuleFilterSensitiveLog = PatchRuleFilterSensitiveLog;
    var PatchRuleGroupFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchRuleGroupFilterSensitiveLog = PatchRuleGroupFilterSensitiveLog;
    var PatchSourceFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Configuration && { Configuration: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PatchSourceFilterSensitiveLog = PatchSourceFilterSensitiveLog;
    var CreatePatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, exports.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.CreatePatchBaselineRequestFilterSensitiveLog = CreatePatchBaselineRequestFilterSensitiveLog;
    var CreatePatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreatePatchBaselineResultFilterSensitiveLog = CreatePatchBaselineResultFilterSensitiveLog;
    var ResourceDataSyncDestinationDataSharingFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncDestinationDataSharingFilterSensitiveLog = ResourceDataSyncDestinationDataSharingFilterSensitiveLog;
    var ResourceDataSyncS3DestinationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncS3DestinationFilterSensitiveLog = ResourceDataSyncS3DestinationFilterSensitiveLog;
    var ResourceDataSyncOrganizationalUnitFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncOrganizationalUnitFilterSensitiveLog = ResourceDataSyncOrganizationalUnitFilterSensitiveLog;
    var ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog = ResourceDataSyncAwsOrganizationsSourceFilterSensitiveLog;
    var ResourceDataSyncSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncSourceFilterSensitiveLog = ResourceDataSyncSourceFilterSensitiveLog;
    var CreateResourceDataSyncRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateResourceDataSyncRequestFilterSensitiveLog = CreateResourceDataSyncRequestFilterSensitiveLog;
    var CreateResourceDataSyncResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateResourceDataSyncResultFilterSensitiveLog = CreateResourceDataSyncResultFilterSensitiveLog;
    var DeleteActivationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteActivationRequestFilterSensitiveLog = DeleteActivationRequestFilterSensitiveLog;
    var DeleteActivationResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteActivationResultFilterSensitiveLog = DeleteActivationResultFilterSensitiveLog;
    var DeleteAssociationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteAssociationRequestFilterSensitiveLog = DeleteAssociationRequestFilterSensitiveLog;
    var DeleteAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteAssociationResultFilterSensitiveLog = DeleteAssociationResultFilterSensitiveLog;
    var DeleteDocumentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteDocumentRequestFilterSensitiveLog = DeleteDocumentRequestFilterSensitiveLog;
    var DeleteDocumentResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteDocumentResultFilterSensitiveLog = DeleteDocumentResultFilterSensitiveLog;
    var DeleteInventoryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteInventoryRequestFilterSensitiveLog = DeleteInventoryRequestFilterSensitiveLog;
    var InventoryDeletionSummaryItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryDeletionSummaryItemFilterSensitiveLog = InventoryDeletionSummaryItemFilterSensitiveLog;
    var InventoryDeletionSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryDeletionSummaryFilterSensitiveLog = InventoryDeletionSummaryFilterSensitiveLog;
    var DeleteInventoryResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteInventoryResultFilterSensitiveLog = DeleteInventoryResultFilterSensitiveLog;
    var DeleteMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteMaintenanceWindowRequestFilterSensitiveLog = DeleteMaintenanceWindowRequestFilterSensitiveLog;
    var DeleteMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteMaintenanceWindowResultFilterSensitiveLog = DeleteMaintenanceWindowResultFilterSensitiveLog;
    var DeleteOpsMetadataRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteOpsMetadataRequestFilterSensitiveLog = DeleteOpsMetadataRequestFilterSensitiveLog;
    var DeleteOpsMetadataResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteOpsMetadataResultFilterSensitiveLog = DeleteOpsMetadataResultFilterSensitiveLog;
    var DeleteParameterRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteParameterRequestFilterSensitiveLog = DeleteParameterRequestFilterSensitiveLog;
    var DeleteParameterResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteParameterResultFilterSensitiveLog = DeleteParameterResultFilterSensitiveLog;
    var DeleteParametersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteParametersRequestFilterSensitiveLog = DeleteParametersRequestFilterSensitiveLog;
    var DeleteParametersResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteParametersResultFilterSensitiveLog = DeleteParametersResultFilterSensitiveLog;
    var DeletePatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeletePatchBaselineRequestFilterSensitiveLog = DeletePatchBaselineRequestFilterSensitiveLog;
    var DeletePatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeletePatchBaselineResultFilterSensitiveLog = DeletePatchBaselineResultFilterSensitiveLog;
    var DeleteResourceDataSyncRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteResourceDataSyncRequestFilterSensitiveLog = DeleteResourceDataSyncRequestFilterSensitiveLog;
    var DeleteResourceDataSyncResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteResourceDataSyncResultFilterSensitiveLog = DeleteResourceDataSyncResultFilterSensitiveLog;
    var DeleteResourcePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteResourcePolicyRequestFilterSensitiveLog = DeleteResourcePolicyRequestFilterSensitiveLog;
    var DeleteResourcePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteResourcePolicyResponseFilterSensitiveLog = DeleteResourcePolicyResponseFilterSensitiveLog;
    var DeregisterManagedInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterManagedInstanceRequestFilterSensitiveLog = DeregisterManagedInstanceRequestFilterSensitiveLog;
    var DeregisterManagedInstanceResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterManagedInstanceResultFilterSensitiveLog = DeregisterManagedInstanceResultFilterSensitiveLog;
    var DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog;
    var DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog = DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog;
    var DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog = DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog;
    var DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog = DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog;
    var DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog = DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog;
    var DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog = DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog;
    var DescribeActivationsFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeActivationsFilterFilterSensitiveLog = DescribeActivationsFilterFilterSensitiveLog;
    var DescribeActivationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeActivationsRequestFilterSensitiveLog = DescribeActivationsRequestFilterSensitiveLog;
    var DescribeActivationsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeActivationsResultFilterSensitiveLog = DescribeActivationsResultFilterSensitiveLog;
    var DescribeAssociationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAssociationRequestFilterSensitiveLog = DescribeAssociationRequestFilterSensitiveLog;
    var DescribeAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, exports.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.DescribeAssociationResultFilterSensitiveLog = DescribeAssociationResultFilterSensitiveLog;
    var AssociationExecutionFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationExecutionFilterFilterSensitiveLog = AssociationExecutionFilterFilterSensitiveLog;
    var DescribeAssociationExecutionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAssociationExecutionsRequestFilterSensitiveLog = DescribeAssociationExecutionsRequestFilterSensitiveLog;
    var AssociationExecutionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationExecutionFilterSensitiveLog = AssociationExecutionFilterSensitiveLog;
    var DescribeAssociationExecutionsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAssociationExecutionsResultFilterSensitiveLog = DescribeAssociationExecutionsResultFilterSensitiveLog;
    var AssociationExecutionTargetsFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationExecutionTargetsFilterFilterSensitiveLog = AssociationExecutionTargetsFilterFilterSensitiveLog;
    var DescribeAssociationExecutionTargetsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAssociationExecutionTargetsRequestFilterSensitiveLog = DescribeAssociationExecutionTargetsRequestFilterSensitiveLog;
    var OutputSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OutputSourceFilterSensitiveLog = OutputSourceFilterSensitiveLog;
    var AssociationExecutionTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationExecutionTargetFilterSensitiveLog = AssociationExecutionTargetFilterSensitiveLog;
    var DescribeAssociationExecutionTargetsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAssociationExecutionTargetsResultFilterSensitiveLog = DescribeAssociationExecutionTargetsResultFilterSensitiveLog;
    var AutomationExecutionFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AutomationExecutionFilterFilterSensitiveLog = AutomationExecutionFilterFilterSensitiveLog;
    var DescribeAutomationExecutionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAutomationExecutionsRequestFilterSensitiveLog = DescribeAutomationExecutionsRequestFilterSensitiveLog;
    var ResolvedTargetsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResolvedTargetsFilterSensitiveLog = ResolvedTargetsFilterSensitiveLog;
    var RunbookFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RunbookFilterSensitiveLog = RunbookFilterSensitiveLog;
    var AutomationExecutionMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AutomationExecutionMetadataFilterSensitiveLog = AutomationExecutionMetadataFilterSensitiveLog;
    var DescribeAutomationExecutionsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAutomationExecutionsResultFilterSensitiveLog = DescribeAutomationExecutionsResultFilterSensitiveLog;
    var StepExecutionFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StepExecutionFilterFilterSensitiveLog = StepExecutionFilterFilterSensitiveLog;
    var DescribeAutomationStepExecutionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAutomationStepExecutionsRequestFilterSensitiveLog = DescribeAutomationStepExecutionsRequestFilterSensitiveLog;
    var FailureDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FailureDetailsFilterSensitiveLog = FailureDetailsFilterSensitiveLog;
    var StepExecutionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StepExecutionFilterSensitiveLog = StepExecutionFilterSensitiveLog;
    var DescribeAutomationStepExecutionsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAutomationStepExecutionsResultFilterSensitiveLog = DescribeAutomationStepExecutionsResultFilterSensitiveLog;
    var PatchOrchestratorFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchOrchestratorFilterFilterSensitiveLog = PatchOrchestratorFilterFilterSensitiveLog;
    var DescribeAvailablePatchesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAvailablePatchesRequestFilterSensitiveLog = DescribeAvailablePatchesRequestFilterSensitiveLog;
    var PatchFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchFilterSensitiveLog = PatchFilterSensitiveLog;
    var DescribeAvailablePatchesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAvailablePatchesResultFilterSensitiveLog = DescribeAvailablePatchesResultFilterSensitiveLog;
    var DescribeDocumentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeDocumentRequestFilterSensitiveLog = DescribeDocumentRequestFilterSensitiveLog;
    var DescribeDocumentResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeDocumentResultFilterSensitiveLog = DescribeDocumentResultFilterSensitiveLog;
    var DescribeDocumentPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeDocumentPermissionRequestFilterSensitiveLog = DescribeDocumentPermissionRequestFilterSensitiveLog;
    var DescribeDocumentPermissionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeDocumentPermissionResponseFilterSensitiveLog = DescribeDocumentPermissionResponseFilterSensitiveLog;
    var DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog = DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog;
    var InstanceAssociationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceAssociationFilterSensitiveLog = InstanceAssociationFilterSensitiveLog;
    var DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog = DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog;
    var DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog = DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog;
    var PatchStatusFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchStatusFilterSensitiveLog = PatchStatusFilterSensitiveLog;
    var EffectivePatchFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EffectivePatchFilterSensitiveLog = EffectivePatchFilterSensitiveLog;
    var DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog = DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog;
    var DescribeInstanceAssociationsStatusRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstanceAssociationsStatusRequestFilterSensitiveLog = DescribeInstanceAssociationsStatusRequestFilterSensitiveLog;
    var S3OutputUrlFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.S3OutputUrlFilterSensitiveLog = S3OutputUrlFilterSensitiveLog;
    var InstanceAssociationOutputUrlFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceAssociationOutputUrlFilterSensitiveLog = InstanceAssociationOutputUrlFilterSensitiveLog;
    var InstanceAssociationStatusInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceAssociationStatusInfoFilterSensitiveLog = InstanceAssociationStatusInfoFilterSensitiveLog;
    var DescribeInstanceAssociationsStatusResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstanceAssociationsStatusResultFilterSensitiveLog = DescribeInstanceAssociationsStatusResultFilterSensitiveLog;
    var InstanceInformationStringFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceInformationStringFilterFilterSensitiveLog = InstanceInformationStringFilterFilterSensitiveLog;
    var InstanceInformationFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceInformationFilterFilterSensitiveLog = InstanceInformationFilterFilterSensitiveLog;
    var DescribeInstanceInformationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstanceInformationRequestFilterSensitiveLog = DescribeInstanceInformationRequestFilterSensitiveLog;
    var InstanceAggregatedAssociationOverviewFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceAggregatedAssociationOverviewFilterSensitiveLog = InstanceAggregatedAssociationOverviewFilterSensitiveLog;
    var InstanceInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstanceInformationFilterSensitiveLog = InstanceInformationFilterSensitiveLog;
    var DescribeInstanceInformationResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstanceInformationResultFilterSensitiveLog = DescribeInstanceInformationResultFilterSensitiveLog;
    var DescribeInstancePatchesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstancePatchesRequestFilterSensitiveLog = DescribeInstancePatchesRequestFilterSensitiveLog;
    var PatchComplianceDataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchComplianceDataFilterSensitiveLog = PatchComplianceDataFilterSensitiveLog;
    var DescribeInstancePatchesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstancePatchesResultFilterSensitiveLog = DescribeInstancePatchesResultFilterSensitiveLog;
    var DescribeInstancePatchStatesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstancePatchStatesRequestFilterSensitiveLog = DescribeInstancePatchStatesRequestFilterSensitiveLog;
    var InstancePatchStateFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    });
    exports.InstancePatchStateFilterSensitiveLog = InstancePatchStateFilterSensitiveLog;
    var DescribeInstancePatchStatesResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => (0, exports.InstancePatchStateFilterSensitiveLog)(item))
      }
    });
    exports.DescribeInstancePatchStatesResultFilterSensitiveLog = DescribeInstancePatchStatesResultFilterSensitiveLog;
    var InstancePatchStateFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InstancePatchStateFilterFilterSensitiveLog = InstancePatchStateFilterFilterSensitiveLog;
    var DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog = DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog;
    var DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InstancePatchStates && {
        InstancePatchStates: obj.InstancePatchStates.map((item) => (0, exports.InstancePatchStateFilterSensitiveLog)(item))
      }
    });
    exports.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog;
    var DescribeInventoryDeletionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInventoryDeletionsRequestFilterSensitiveLog = DescribeInventoryDeletionsRequestFilterSensitiveLog;
    var InventoryDeletionStatusItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryDeletionStatusItemFilterSensitiveLog = InventoryDeletionStatusItemFilterSensitiveLog;
    var DescribeInventoryDeletionsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeInventoryDeletionsResultFilterSensitiveLog = DescribeInventoryDeletionsResultFilterSensitiveLog;
    var MaintenanceWindowFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MaintenanceWindowFilterFilterSensitiveLog = MaintenanceWindowFilterFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog = DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog;
    var MaintenanceWindowExecutionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MaintenanceWindowExecutionFilterSensitiveLog = MaintenanceWindowExecutionFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog = DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog;
    var MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WindowExecutionTaskInvocationIdentities && {
        WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item) => (0, exports.MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog)(item))
      }
    });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog = DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog;
    var MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog = MaintenanceWindowExecutionTaskIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog = DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog;
    var DescribeMaintenanceWindowsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowsRequestFilterSensitiveLog = DescribeMaintenanceWindowsRequestFilterSensitiveLog;
    var MaintenanceWindowIdentityFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowIdentityFilterSensitiveLog = MaintenanceWindowIdentityFilterSensitiveLog;
    var DescribeMaintenanceWindowsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WindowIdentities && {
        WindowIdentities: obj.WindowIdentities.map((item) => (0, exports.MaintenanceWindowIdentityFilterSensitiveLog)(item))
      }
    });
    exports.DescribeMaintenanceWindowsResultFilterSensitiveLog = DescribeMaintenanceWindowsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog = DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog;
    var ScheduledWindowExecutionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ScheduledWindowExecutionFilterSensitiveLog = ScheduledWindowExecutionFilterSensitiveLog;
    var DescribeMaintenanceWindowScheduleResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowScheduleResultFilterSensitiveLog = DescribeMaintenanceWindowScheduleResultFilterSensitiveLog;
    var DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog = DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog;
    var MaintenanceWindowIdentityForTargetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MaintenanceWindowIdentityForTargetFilterSensitiveLog = MaintenanceWindowIdentityForTargetFilterSensitiveLog;
    var DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog = DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog;
    var DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog = DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog;
    var MaintenanceWindowTargetFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowTargetFilterSensitiveLog = MaintenanceWindowTargetFilterSensitiveLog;
    var DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Targets && { Targets: obj.Targets.map((item) => (0, exports.MaintenanceWindowTargetFilterSensitiveLog)(item)) }
    });
    exports.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = DescribeMaintenanceWindowTargetsResultFilterSensitiveLog;
    var DescribeMaintenanceWindowTasksRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeMaintenanceWindowTasksRequestFilterSensitiveLog = DescribeMaintenanceWindowTasksRequestFilterSensitiveLog;
    var LoggingInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LoggingInfoFilterSensitiveLog = LoggingInfoFilterSensitiveLog;
    var MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Values && { Values: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog;
    var MaintenanceWindowTaskFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowTaskFilterSensitiveLog = MaintenanceWindowTaskFilterSensitiveLog;
    var DescribeMaintenanceWindowTasksResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Tasks && { Tasks: obj.Tasks.map((item) => (0, exports.MaintenanceWindowTaskFilterSensitiveLog)(item)) }
    });
    exports.DescribeMaintenanceWindowTasksResultFilterSensitiveLog = DescribeMaintenanceWindowTasksResultFilterSensitiveLog;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js
var require_models_1 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidItemContentException = exports.ComplianceTypeCountLimitExceededException = exports.DocumentPermissionLimit = exports.LastResourceDataSyncStatus = exports.OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterKey = exports.OpsItemEventFilterOperator = exports.OpsItemEventFilterKey = exports.DocumentFilterKey = exports.DocumentReviewCommentType = exports.DocumentMetadataEnum = exports.ComplianceStatus = exports.ComplianceSeverity = exports.ComplianceQueryOperatorType = exports.CommandStatus = exports.CommandPluginStatus = exports.CommandFilterKey = exports.AssociationFilterKey = exports.ParameterVersionLabelLimitExceeded = exports.ServiceSettingNotFound = exports.ParameterVersionNotFound = exports.InvalidKeyId = exports.OpsFilterOperatorType = exports.NotificationType = exports.NotificationEvent = exports.InventoryAttributeDataType = exports.InvalidResultAttributeException = exports.InvalidInventoryGroupException = exports.InvalidAggregatorException = exports.InventoryQueryOperatorType = exports.AttachmentHashType = exports.UnsupportedFeatureRequiredException = exports.ConnectionStatus = exports.InvocationDoesNotExist = exports.InvalidPluginName = exports.CommandInvocationStatus = exports.UnsupportedCalendarException = exports.InvalidDocumentType = exports.CalendarState = exports.OpsItemRelatedItemAssociationNotFoundException = exports.SessionStatus = exports.SessionState = exports.SessionFilterKey = exports.PatchProperty = exports.PatchSet = exports.InvalidFilterOption = exports.ParameterType = exports.ParameterTier = exports.ParametersFilterKey = exports.OpsItemStatus = void 0;
    exports.DescribePatchBaselinesRequestFilterSensitiveLog = exports.DescribeParametersResultFilterSensitiveLog = exports.ParameterMetadataFilterSensitiveLog = exports.ParameterInlinePolicyFilterSensitiveLog = exports.DescribeParametersRequestFilterSensitiveLog = exports.ParameterStringFilterFilterSensitiveLog = exports.ParametersFilterFilterSensitiveLog = exports.DescribeOpsItemsResponseFilterSensitiveLog = exports.OpsItemSummaryFilterSensitiveLog = exports.DescribeOpsItemsRequestFilterSensitiveLog = exports.OpsItemFilterFilterSensitiveLog = exports.AssociationVersionLimitExceeded = exports.StopType = exports.InvalidAutomationStatusUpdateException = exports.TargetNotConnected = exports.AutomationDefinitionNotApprovedException = exports.InvalidAutomationExecutionParametersException = exports.AutomationExecutionLimitExceededException = exports.AutomationDefinitionVersionNotFoundException = exports.AutomationDefinitionNotFoundException = exports.InvalidAssociation = exports.InvalidRole = exports.InvalidOutputFolder = exports.InvalidNotificationConfig = exports.SignalType = exports.InvalidAutomationSignalException = exports.AutomationStepNotFoundException = exports.FeatureNotAvailableException = exports.ResourcePolicyLimitExceededException = exports.UnsupportedParameterType = exports.PoliciesLimitExceededException = exports.ParameterPatternMismatchException = exports.ParameterMaxVersionLimitExceeded = exports.ParameterLimitExceeded = exports.ParameterAlreadyExists = exports.InvalidPolicyTypeException = exports.InvalidPolicyAttributeException = exports.InvalidAllowedPatternException = exports.IncompatiblePolicyException = exports.HierarchyTypeMismatchException = exports.HierarchyLevelLimitExceededException = exports.UnsupportedInventorySchemaVersionException = exports.UnsupportedInventoryItemContextException = exports.SubTypeCountLimitExceededException = exports.ItemContentMismatchException = exports.InvalidInventoryItemContextException = exports.CustomSchemaCountLimitExceededException = exports.TotalSizeLimitExceededException = exports.ComplianceUploadType = exports.ItemSizeLimitExceededException = void 0;
    exports.GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog = exports.GetMaintenanceWindowExecutionResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionRequestFilterSensitiveLog = exports.GetMaintenanceWindowResultFilterSensitiveLog = exports.GetMaintenanceWindowRequestFilterSensitiveLog = exports.GetInventorySchemaResultFilterSensitiveLog = exports.InventoryItemSchemaFilterSensitiveLog = exports.InventoryItemAttributeFilterSensitiveLog = exports.GetInventorySchemaRequestFilterSensitiveLog = exports.GetInventoryResultFilterSensitiveLog = exports.InventoryResultEntityFilterSensitiveLog = exports.InventoryResultItemFilterSensitiveLog = exports.ResultAttributeFilterSensitiveLog = exports.InventoryGroupFilterSensitiveLog = exports.InventoryFilterFilterSensitiveLog = exports.GetDocumentResultFilterSensitiveLog = exports.AttachmentContentFilterSensitiveLog = exports.GetDocumentRequestFilterSensitiveLog = exports.GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog = exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = exports.BaselineOverrideFilterSensitiveLog = exports.GetDefaultPatchBaselineResultFilterSensitiveLog = exports.GetDefaultPatchBaselineRequestFilterSensitiveLog = exports.GetConnectionStatusResponseFilterSensitiveLog = exports.GetConnectionStatusRequestFilterSensitiveLog = exports.GetCommandInvocationResultFilterSensitiveLog = exports.CloudWatchOutputConfigFilterSensitiveLog = exports.GetCommandInvocationRequestFilterSensitiveLog = exports.GetCalendarStateResponseFilterSensitiveLog = exports.GetCalendarStateRequestFilterSensitiveLog = exports.GetAutomationExecutionResultFilterSensitiveLog = exports.AutomationExecutionFilterSensitiveLog = exports.ProgressCountersFilterSensitiveLog = exports.GetAutomationExecutionRequestFilterSensitiveLog = exports.DisassociateOpsItemRelatedItemResponseFilterSensitiveLog = exports.DisassociateOpsItemRelatedItemRequestFilterSensitiveLog = exports.DescribeSessionsResponseFilterSensitiveLog = exports.SessionFilterSensitiveLog = exports.SessionManagerOutputUrlFilterSensitiveLog = exports.DescribeSessionsRequestFilterSensitiveLog = exports.SessionFilterFilterSensitiveLog = exports.DescribePatchPropertiesResultFilterSensitiveLog = exports.DescribePatchPropertiesRequestFilterSensitiveLog = exports.DescribePatchGroupStateResultFilterSensitiveLog = exports.DescribePatchGroupStateRequestFilterSensitiveLog = exports.DescribePatchGroupsResultFilterSensitiveLog = exports.PatchGroupPatchBaselineMappingFilterSensitiveLog = exports.DescribePatchGroupsRequestFilterSensitiveLog = exports.DescribePatchBaselinesResultFilterSensitiveLog = exports.PatchBaselineIdentityFilterSensitiveLog = void 0;
    exports.ListAssociationVersionsResultFilterSensitiveLog = exports.AssociationVersionInfoFilterSensitiveLog = exports.ListAssociationVersionsRequestFilterSensitiveLog = exports.ListAssociationsResultFilterSensitiveLog = exports.AssociationFilterSensitiveLog = exports.ListAssociationsRequestFilterSensitiveLog = exports.AssociationFilterFilterSensitiveLog = exports.LabelParameterVersionResultFilterSensitiveLog = exports.LabelParameterVersionRequestFilterSensitiveLog = exports.GetServiceSettingResultFilterSensitiveLog = exports.ServiceSettingFilterSensitiveLog = exports.GetServiceSettingRequestFilterSensitiveLog = exports.GetResourcePoliciesResponseFilterSensitiveLog = exports.GetResourcePoliciesResponseEntryFilterSensitiveLog = exports.GetResourcePoliciesRequestFilterSensitiveLog = exports.GetPatchBaselineForPatchGroupResultFilterSensitiveLog = exports.GetPatchBaselineForPatchGroupRequestFilterSensitiveLog = exports.GetPatchBaselineResultFilterSensitiveLog = exports.GetPatchBaselineRequestFilterSensitiveLog = exports.GetParametersByPathResultFilterSensitiveLog = exports.GetParametersByPathRequestFilterSensitiveLog = exports.GetParametersResultFilterSensitiveLog = exports.GetParametersRequestFilterSensitiveLog = exports.GetParameterHistoryResultFilterSensitiveLog = exports.ParameterHistoryFilterSensitiveLog = exports.GetParameterHistoryRequestFilterSensitiveLog = exports.GetParameterResultFilterSensitiveLog = exports.ParameterFilterSensitiveLog = exports.GetParameterRequestFilterSensitiveLog = exports.GetOpsSummaryResultFilterSensitiveLog = exports.OpsEntityFilterSensitiveLog = exports.OpsEntityItemFilterSensitiveLog = exports.OpsResultAttributeFilterSensitiveLog = exports.OpsFilterFilterSensitiveLog = exports.GetOpsMetadataResultFilterSensitiveLog = exports.GetOpsMetadataRequestFilterSensitiveLog = exports.GetOpsItemResponseFilterSensitiveLog = exports.OpsItemFilterSensitiveLog = exports.GetOpsItemRequestFilterSensitiveLog = exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = exports.NotificationConfigFilterSensitiveLog = exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = exports.MaintenanceWindowAutomationParametersFilterSensitiveLog = exports.GetMaintenanceWindowTaskRequestFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog = exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = void 0;
    exports.ListResourceComplianceSummariesResultFilterSensitiveLog = exports.ResourceComplianceSummaryItemFilterSensitiveLog = exports.ListResourceComplianceSummariesRequestFilterSensitiveLog = exports.ListOpsMetadataResultFilterSensitiveLog = exports.OpsMetadataFilterSensitiveLog = exports.ListOpsMetadataRequestFilterSensitiveLog = exports.OpsMetadataFilterFilterSensitiveLog = exports.ListOpsItemRelatedItemsResponseFilterSensitiveLog = exports.OpsItemRelatedItemSummaryFilterSensitiveLog = exports.ListOpsItemRelatedItemsRequestFilterSensitiveLog = exports.OpsItemRelatedItemsFilterFilterSensitiveLog = exports.ListOpsItemEventsResponseFilterSensitiveLog = exports.OpsItemEventSummaryFilterSensitiveLog = exports.OpsItemIdentityFilterSensitiveLog = exports.ListOpsItemEventsRequestFilterSensitiveLog = exports.OpsItemEventFilterFilterSensitiveLog = exports.ListInventoryEntriesResultFilterSensitiveLog = exports.ListInventoryEntriesRequestFilterSensitiveLog = exports.ListDocumentVersionsResultFilterSensitiveLog = exports.DocumentVersionInfoFilterSensitiveLog = exports.ListDocumentVersionsRequestFilterSensitiveLog = exports.ListDocumentsResultFilterSensitiveLog = exports.DocumentIdentifierFilterSensitiveLog = exports.ListDocumentsRequestFilterSensitiveLog = exports.DocumentKeyValuesFilterFilterSensitiveLog = exports.DocumentFilterFilterSensitiveLog = exports.ListDocumentMetadataHistoryResponseFilterSensitiveLog = exports.DocumentMetadataResponseInfoFilterSensitiveLog = exports.DocumentReviewerResponseSourceFilterSensitiveLog = exports.DocumentReviewCommentSourceFilterSensitiveLog = exports.ListDocumentMetadataHistoryRequestFilterSensitiveLog = exports.ListComplianceSummariesResultFilterSensitiveLog = exports.ComplianceSummaryItemFilterSensitiveLog = exports.NonCompliantSummaryFilterSensitiveLog = exports.CompliantSummaryFilterSensitiveLog = exports.SeveritySummaryFilterSensitiveLog = exports.ListComplianceSummariesRequestFilterSensitiveLog = exports.ListComplianceItemsResultFilterSensitiveLog = exports.ComplianceItemFilterSensitiveLog = exports.ComplianceExecutionSummaryFilterSensitiveLog = exports.ListComplianceItemsRequestFilterSensitiveLog = exports.ComplianceStringFilterFilterSensitiveLog = exports.ListCommandsResultFilterSensitiveLog = exports.CommandFilterSensitiveLog = exports.ListCommandsRequestFilterSensitiveLog = exports.ListCommandInvocationsResultFilterSensitiveLog = exports.CommandInvocationFilterSensitiveLog = exports.CommandPluginFilterSensitiveLog = exports.ListCommandInvocationsRequestFilterSensitiveLog = exports.CommandFilterFilterSensitiveLog = void 0;
    exports.UnlabelParameterVersionResultFilterSensitiveLog = exports.UnlabelParameterVersionRequestFilterSensitiveLog = exports.TerminateSessionResponseFilterSensitiveLog = exports.TerminateSessionRequestFilterSensitiveLog = exports.StopAutomationExecutionResultFilterSensitiveLog = exports.StopAutomationExecutionRequestFilterSensitiveLog = exports.StartSessionResponseFilterSensitiveLog = exports.StartSessionRequestFilterSensitiveLog = exports.StartChangeRequestExecutionResultFilterSensitiveLog = exports.StartChangeRequestExecutionRequestFilterSensitiveLog = exports.StartAutomationExecutionResultFilterSensitiveLog = exports.StartAutomationExecutionRequestFilterSensitiveLog = exports.StartAssociationsOnceResultFilterSensitiveLog = exports.StartAssociationsOnceRequestFilterSensitiveLog = exports.SendCommandResultFilterSensitiveLog = exports.SendCommandRequestFilterSensitiveLog = exports.SendAutomationSignalResultFilterSensitiveLog = exports.SendAutomationSignalRequestFilterSensitiveLog = exports.ResumeSessionResponseFilterSensitiveLog = exports.ResumeSessionRequestFilterSensitiveLog = exports.ResetServiceSettingResultFilterSensitiveLog = exports.ResetServiceSettingRequestFilterSensitiveLog = exports.RemoveTagsFromResourceResultFilterSensitiveLog = exports.RemoveTagsFromResourceRequestFilterSensitiveLog = exports.RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog = exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = exports.RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog = exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = exports.RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog = exports.RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = exports.RegisterDefaultPatchBaselineResultFilterSensitiveLog = exports.RegisterDefaultPatchBaselineRequestFilterSensitiveLog = exports.PutResourcePolicyResponseFilterSensitiveLog = exports.PutResourcePolicyRequestFilterSensitiveLog = exports.PutParameterResultFilterSensitiveLog = exports.PutParameterRequestFilterSensitiveLog = exports.PutInventoryResultFilterSensitiveLog = exports.PutInventoryRequestFilterSensitiveLog = exports.InventoryItemFilterSensitiveLog = exports.PutComplianceItemsResultFilterSensitiveLog = exports.PutComplianceItemsRequestFilterSensitiveLog = exports.ComplianceItemEntryFilterSensitiveLog = exports.ModifyDocumentPermissionResponseFilterSensitiveLog = exports.ModifyDocumentPermissionRequestFilterSensitiveLog = exports.ListTagsForResourceResultFilterSensitiveLog = exports.ListTagsForResourceRequestFilterSensitiveLog = exports.ListResourceDataSyncResultFilterSensitiveLog = exports.ResourceDataSyncItemFilterSensitiveLog = exports.ResourceDataSyncSourceWithStateFilterSensitiveLog = exports.ListResourceDataSyncRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var SSMServiceException_1 = require_SSMServiceException();
    var OpsItemStatus;
    (function(OpsItemStatus2) {
      OpsItemStatus2["APPROVED"] = "Approved";
      OpsItemStatus2["CANCELLED"] = "Cancelled";
      OpsItemStatus2["CANCELLING"] = "Cancelling";
      OpsItemStatus2["CHANGE_CALENDAR_OVERRIDE_APPROVED"] = "ChangeCalendarOverrideApproved";
      OpsItemStatus2["CHANGE_CALENDAR_OVERRIDE_REJECTED"] = "ChangeCalendarOverrideRejected";
      OpsItemStatus2["CLOSED"] = "Closed";
      OpsItemStatus2["COMPLETED_WITH_FAILURE"] = "CompletedWithFailure";
      OpsItemStatus2["COMPLETED_WITH_SUCCESS"] = "CompletedWithSuccess";
      OpsItemStatus2["FAILED"] = "Failed";
      OpsItemStatus2["IN_PROGRESS"] = "InProgress";
      OpsItemStatus2["OPEN"] = "Open";
      OpsItemStatus2["PENDING"] = "Pending";
      OpsItemStatus2["PENDING_APPROVAL"] = "PendingApproval";
      OpsItemStatus2["PENDING_CHANGE_CALENDAR_OVERRIDE"] = "PendingChangeCalendarOverride";
      OpsItemStatus2["REJECTED"] = "Rejected";
      OpsItemStatus2["RESOLVED"] = "Resolved";
      OpsItemStatus2["RUNBOOK_IN_PROGRESS"] = "RunbookInProgress";
      OpsItemStatus2["SCHEDULED"] = "Scheduled";
      OpsItemStatus2["TIMED_OUT"] = "TimedOut";
    })(OpsItemStatus = exports.OpsItemStatus || (exports.OpsItemStatus = {}));
    var ParametersFilterKey;
    (function(ParametersFilterKey2) {
      ParametersFilterKey2["KEY_ID"] = "KeyId";
      ParametersFilterKey2["NAME"] = "Name";
      ParametersFilterKey2["TYPE"] = "Type";
    })(ParametersFilterKey = exports.ParametersFilterKey || (exports.ParametersFilterKey = {}));
    var ParameterTier;
    (function(ParameterTier2) {
      ParameterTier2["ADVANCED"] = "Advanced";
      ParameterTier2["INTELLIGENT_TIERING"] = "Intelligent-Tiering";
      ParameterTier2["STANDARD"] = "Standard";
    })(ParameterTier = exports.ParameterTier || (exports.ParameterTier = {}));
    var ParameterType;
    (function(ParameterType2) {
      ParameterType2["SECURE_STRING"] = "SecureString";
      ParameterType2["STRING"] = "String";
      ParameterType2["STRING_LIST"] = "StringList";
    })(ParameterType = exports.ParameterType || (exports.ParameterType = {}));
    var InvalidFilterOption = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidFilterOption",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidFilterOption";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterOption.prototype);
      }
    };
    exports.InvalidFilterOption = InvalidFilterOption;
    var PatchSet;
    (function(PatchSet2) {
      PatchSet2["Application"] = "APPLICATION";
      PatchSet2["Os"] = "OS";
    })(PatchSet = exports.PatchSet || (exports.PatchSet = {}));
    var PatchProperty;
    (function(PatchProperty2) {
      PatchProperty2["PatchClassification"] = "CLASSIFICATION";
      PatchProperty2["PatchMsrcSeverity"] = "MSRC_SEVERITY";
      PatchProperty2["PatchPriority"] = "PRIORITY";
      PatchProperty2["PatchProductFamily"] = "PRODUCT_FAMILY";
      PatchProperty2["PatchSeverity"] = "SEVERITY";
      PatchProperty2["Product"] = "PRODUCT";
    })(PatchProperty = exports.PatchProperty || (exports.PatchProperty = {}));
    var SessionFilterKey;
    (function(SessionFilterKey2) {
      SessionFilterKey2["INVOKED_AFTER"] = "InvokedAfter";
      SessionFilterKey2["INVOKED_BEFORE"] = "InvokedBefore";
      SessionFilterKey2["OWNER"] = "Owner";
      SessionFilterKey2["SESSION_ID"] = "SessionId";
      SessionFilterKey2["STATUS"] = "Status";
      SessionFilterKey2["TARGET_ID"] = "Target";
    })(SessionFilterKey = exports.SessionFilterKey || (exports.SessionFilterKey = {}));
    var SessionState;
    (function(SessionState2) {
      SessionState2["ACTIVE"] = "Active";
      SessionState2["HISTORY"] = "History";
    })(SessionState = exports.SessionState || (exports.SessionState = {}));
    var SessionStatus;
    (function(SessionStatus2) {
      SessionStatus2["CONNECTED"] = "Connected";
      SessionStatus2["CONNECTING"] = "Connecting";
      SessionStatus2["DISCONNECTED"] = "Disconnected";
      SessionStatus2["FAILED"] = "Failed";
      SessionStatus2["TERMINATED"] = "Terminated";
      SessionStatus2["TERMINATING"] = "Terminating";
    })(SessionStatus = exports.SessionStatus || (exports.SessionStatus = {}));
    var OpsItemRelatedItemAssociationNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsItemRelatedItemAssociationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsItemRelatedItemAssociationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsItemRelatedItemAssociationNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OpsItemRelatedItemAssociationNotFoundException = OpsItemRelatedItemAssociationNotFoundException;
    var CalendarState;
    (function(CalendarState2) {
      CalendarState2["CLOSED"] = "CLOSED";
      CalendarState2["OPEN"] = "OPEN";
    })(CalendarState = exports.CalendarState || (exports.CalendarState = {}));
    var InvalidDocumentType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidDocumentType",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidDocumentType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDocumentType.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidDocumentType = InvalidDocumentType;
    var UnsupportedCalendarException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedCalendarException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedCalendarException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedCalendarException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedCalendarException = UnsupportedCalendarException;
    var CommandInvocationStatus;
    (function(CommandInvocationStatus2) {
      CommandInvocationStatus2["CANCELLED"] = "Cancelled";
      CommandInvocationStatus2["CANCELLING"] = "Cancelling";
      CommandInvocationStatus2["DELAYED"] = "Delayed";
      CommandInvocationStatus2["FAILED"] = "Failed";
      CommandInvocationStatus2["IN_PROGRESS"] = "InProgress";
      CommandInvocationStatus2["PENDING"] = "Pending";
      CommandInvocationStatus2["SUCCESS"] = "Success";
      CommandInvocationStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandInvocationStatus = exports.CommandInvocationStatus || (exports.CommandInvocationStatus = {}));
    var InvalidPluginName = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPluginName",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPluginName";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPluginName.prototype);
      }
    };
    exports.InvalidPluginName = InvalidPluginName;
    var InvocationDoesNotExist = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvocationDoesNotExist",
          $fault: "client",
          ...opts
        });
        this.name = "InvocationDoesNotExist";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvocationDoesNotExist.prototype);
      }
    };
    exports.InvocationDoesNotExist = InvocationDoesNotExist;
    var ConnectionStatus;
    (function(ConnectionStatus2) {
      ConnectionStatus2["CONNECTED"] = "Connected";
      ConnectionStatus2["NOT_CONNECTED"] = "NotConnected";
    })(ConnectionStatus = exports.ConnectionStatus || (exports.ConnectionStatus = {}));
    var UnsupportedFeatureRequiredException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedFeatureRequiredException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedFeatureRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedFeatureRequiredException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedFeatureRequiredException = UnsupportedFeatureRequiredException;
    var AttachmentHashType;
    (function(AttachmentHashType2) {
      AttachmentHashType2["SHA256"] = "Sha256";
    })(AttachmentHashType = exports.AttachmentHashType || (exports.AttachmentHashType = {}));
    var InventoryQueryOperatorType;
    (function(InventoryQueryOperatorType2) {
      InventoryQueryOperatorType2["BEGIN_WITH"] = "BeginWith";
      InventoryQueryOperatorType2["EQUAL"] = "Equal";
      InventoryQueryOperatorType2["EXISTS"] = "Exists";
      InventoryQueryOperatorType2["GREATER_THAN"] = "GreaterThan";
      InventoryQueryOperatorType2["LESS_THAN"] = "LessThan";
      InventoryQueryOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(InventoryQueryOperatorType = exports.InventoryQueryOperatorType || (exports.InventoryQueryOperatorType = {}));
    var InvalidAggregatorException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAggregatorException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAggregatorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAggregatorException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAggregatorException = InvalidAggregatorException;
    var InvalidInventoryGroupException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryGroupException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryGroupException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryGroupException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryGroupException = InvalidInventoryGroupException;
    var InvalidResultAttributeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidResultAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidResultAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResultAttributeException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidResultAttributeException = InvalidResultAttributeException;
    var InventoryAttributeDataType;
    (function(InventoryAttributeDataType2) {
      InventoryAttributeDataType2["NUMBER"] = "number";
      InventoryAttributeDataType2["STRING"] = "string";
    })(InventoryAttributeDataType = exports.InventoryAttributeDataType || (exports.InventoryAttributeDataType = {}));
    var NotificationEvent;
    (function(NotificationEvent2) {
      NotificationEvent2["ALL"] = "All";
      NotificationEvent2["CANCELLED"] = "Cancelled";
      NotificationEvent2["FAILED"] = "Failed";
      NotificationEvent2["IN_PROGRESS"] = "InProgress";
      NotificationEvent2["SUCCESS"] = "Success";
      NotificationEvent2["TIMED_OUT"] = "TimedOut";
    })(NotificationEvent = exports.NotificationEvent || (exports.NotificationEvent = {}));
    var NotificationType;
    (function(NotificationType2) {
      NotificationType2["Command"] = "Command";
      NotificationType2["Invocation"] = "Invocation";
    })(NotificationType = exports.NotificationType || (exports.NotificationType = {}));
    var OpsFilterOperatorType;
    (function(OpsFilterOperatorType2) {
      OpsFilterOperatorType2["BEGIN_WITH"] = "BeginWith";
      OpsFilterOperatorType2["EQUAL"] = "Equal";
      OpsFilterOperatorType2["EXISTS"] = "Exists";
      OpsFilterOperatorType2["GREATER_THAN"] = "GreaterThan";
      OpsFilterOperatorType2["LESS_THAN"] = "LessThan";
      OpsFilterOperatorType2["NOT_EQUAL"] = "NotEqual";
    })(OpsFilterOperatorType = exports.OpsFilterOperatorType || (exports.OpsFilterOperatorType = {}));
    var InvalidKeyId = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidKeyId",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidKeyId";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidKeyId.prototype);
      }
    };
    exports.InvalidKeyId = InvalidKeyId;
    var ParameterVersionNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionNotFound.prototype);
      }
    };
    exports.ParameterVersionNotFound = ParameterVersionNotFound;
    var ServiceSettingNotFound = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ServiceSettingNotFound",
          $fault: "client",
          ...opts
        });
        this.name = "ServiceSettingNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceSettingNotFound.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ServiceSettingNotFound = ServiceSettingNotFound;
    var ParameterVersionLabelLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterVersionLabelLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterVersionLabelLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterVersionLabelLimitExceeded.prototype);
      }
    };
    exports.ParameterVersionLabelLimitExceeded = ParameterVersionLabelLimitExceeded;
    var AssociationFilterKey;
    (function(AssociationFilterKey2) {
      AssociationFilterKey2["AssociationId"] = "AssociationId";
      AssociationFilterKey2["AssociationName"] = "AssociationName";
      AssociationFilterKey2["InstanceId"] = "InstanceId";
      AssociationFilterKey2["LastExecutedAfter"] = "LastExecutedAfter";
      AssociationFilterKey2["LastExecutedBefore"] = "LastExecutedBefore";
      AssociationFilterKey2["Name"] = "Name";
      AssociationFilterKey2["ResourceGroupName"] = "ResourceGroupName";
      AssociationFilterKey2["Status"] = "AssociationStatusName";
    })(AssociationFilterKey = exports.AssociationFilterKey || (exports.AssociationFilterKey = {}));
    var CommandFilterKey;
    (function(CommandFilterKey2) {
      CommandFilterKey2["DOCUMENT_NAME"] = "DocumentName";
      CommandFilterKey2["EXECUTION_STAGE"] = "ExecutionStage";
      CommandFilterKey2["INVOKED_AFTER"] = "InvokedAfter";
      CommandFilterKey2["INVOKED_BEFORE"] = "InvokedBefore";
      CommandFilterKey2["STATUS"] = "Status";
    })(CommandFilterKey = exports.CommandFilterKey || (exports.CommandFilterKey = {}));
    var CommandPluginStatus;
    (function(CommandPluginStatus2) {
      CommandPluginStatus2["CANCELLED"] = "Cancelled";
      CommandPluginStatus2["FAILED"] = "Failed";
      CommandPluginStatus2["IN_PROGRESS"] = "InProgress";
      CommandPluginStatus2["PENDING"] = "Pending";
      CommandPluginStatus2["SUCCESS"] = "Success";
      CommandPluginStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandPluginStatus = exports.CommandPluginStatus || (exports.CommandPluginStatus = {}));
    var CommandStatus;
    (function(CommandStatus2) {
      CommandStatus2["CANCELLED"] = "Cancelled";
      CommandStatus2["CANCELLING"] = "Cancelling";
      CommandStatus2["FAILED"] = "Failed";
      CommandStatus2["IN_PROGRESS"] = "InProgress";
      CommandStatus2["PENDING"] = "Pending";
      CommandStatus2["SUCCESS"] = "Success";
      CommandStatus2["TIMED_OUT"] = "TimedOut";
    })(CommandStatus = exports.CommandStatus || (exports.CommandStatus = {}));
    var ComplianceQueryOperatorType;
    (function(ComplianceQueryOperatorType2) {
      ComplianceQueryOperatorType2["BeginWith"] = "BEGIN_WITH";
      ComplianceQueryOperatorType2["Equal"] = "EQUAL";
      ComplianceQueryOperatorType2["GreaterThan"] = "GREATER_THAN";
      ComplianceQueryOperatorType2["LessThan"] = "LESS_THAN";
      ComplianceQueryOperatorType2["NotEqual"] = "NOT_EQUAL";
    })(ComplianceQueryOperatorType = exports.ComplianceQueryOperatorType || (exports.ComplianceQueryOperatorType = {}));
    var ComplianceSeverity;
    (function(ComplianceSeverity2) {
      ComplianceSeverity2["Critical"] = "CRITICAL";
      ComplianceSeverity2["High"] = "HIGH";
      ComplianceSeverity2["Informational"] = "INFORMATIONAL";
      ComplianceSeverity2["Low"] = "LOW";
      ComplianceSeverity2["Medium"] = "MEDIUM";
      ComplianceSeverity2["Unspecified"] = "UNSPECIFIED";
    })(ComplianceSeverity = exports.ComplianceSeverity || (exports.ComplianceSeverity = {}));
    var ComplianceStatus;
    (function(ComplianceStatus2) {
      ComplianceStatus2["Compliant"] = "COMPLIANT";
      ComplianceStatus2["NonCompliant"] = "NON_COMPLIANT";
    })(ComplianceStatus = exports.ComplianceStatus || (exports.ComplianceStatus = {}));
    var DocumentMetadataEnum;
    (function(DocumentMetadataEnum2) {
      DocumentMetadataEnum2["DocumentReviews"] = "DocumentReviews";
    })(DocumentMetadataEnum = exports.DocumentMetadataEnum || (exports.DocumentMetadataEnum = {}));
    var DocumentReviewCommentType;
    (function(DocumentReviewCommentType2) {
      DocumentReviewCommentType2["Comment"] = "Comment";
    })(DocumentReviewCommentType = exports.DocumentReviewCommentType || (exports.DocumentReviewCommentType = {}));
    var DocumentFilterKey;
    (function(DocumentFilterKey2) {
      DocumentFilterKey2["DocumentType"] = "DocumentType";
      DocumentFilterKey2["Name"] = "Name";
      DocumentFilterKey2["Owner"] = "Owner";
      DocumentFilterKey2["PlatformTypes"] = "PlatformTypes";
    })(DocumentFilterKey = exports.DocumentFilterKey || (exports.DocumentFilterKey = {}));
    var OpsItemEventFilterKey;
    (function(OpsItemEventFilterKey2) {
      OpsItemEventFilterKey2["OPSITEM_ID"] = "OpsItemId";
    })(OpsItemEventFilterKey = exports.OpsItemEventFilterKey || (exports.OpsItemEventFilterKey = {}));
    var OpsItemEventFilterOperator;
    (function(OpsItemEventFilterOperator2) {
      OpsItemEventFilterOperator2["EQUAL"] = "Equal";
    })(OpsItemEventFilterOperator = exports.OpsItemEventFilterOperator || (exports.OpsItemEventFilterOperator = {}));
    var OpsItemRelatedItemsFilterKey;
    (function(OpsItemRelatedItemsFilterKey2) {
      OpsItemRelatedItemsFilterKey2["ASSOCIATION_ID"] = "AssociationId";
      OpsItemRelatedItemsFilterKey2["RESOURCE_TYPE"] = "ResourceType";
      OpsItemRelatedItemsFilterKey2["RESOURCE_URI"] = "ResourceUri";
    })(OpsItemRelatedItemsFilterKey = exports.OpsItemRelatedItemsFilterKey || (exports.OpsItemRelatedItemsFilterKey = {}));
    var OpsItemRelatedItemsFilterOperator;
    (function(OpsItemRelatedItemsFilterOperator2) {
      OpsItemRelatedItemsFilterOperator2["EQUAL"] = "Equal";
    })(OpsItemRelatedItemsFilterOperator = exports.OpsItemRelatedItemsFilterOperator || (exports.OpsItemRelatedItemsFilterOperator = {}));
    var LastResourceDataSyncStatus;
    (function(LastResourceDataSyncStatus2) {
      LastResourceDataSyncStatus2["FAILED"] = "Failed";
      LastResourceDataSyncStatus2["INPROGRESS"] = "InProgress";
      LastResourceDataSyncStatus2["SUCCESSFUL"] = "Successful";
    })(LastResourceDataSyncStatus = exports.LastResourceDataSyncStatus || (exports.LastResourceDataSyncStatus = {}));
    var DocumentPermissionLimit = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentPermissionLimit",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentPermissionLimit";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentPermissionLimit.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentPermissionLimit = DocumentPermissionLimit;
    var ComplianceTypeCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ComplianceTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ComplianceTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ComplianceTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ComplianceTypeCountLimitExceededException = ComplianceTypeCountLimitExceededException;
    var InvalidItemContentException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidItemContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidItemContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidItemContentException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.InvalidItemContentException = InvalidItemContentException;
    var ItemSizeLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemSizeLimitExceededException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.ItemSizeLimitExceededException = ItemSizeLimitExceededException;
    var ComplianceUploadType;
    (function(ComplianceUploadType2) {
      ComplianceUploadType2["Complete"] = "COMPLETE";
      ComplianceUploadType2["Partial"] = "PARTIAL";
    })(ComplianceUploadType = exports.ComplianceUploadType || (exports.ComplianceUploadType = {}));
    var TotalSizeLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TotalSizeLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "TotalSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TotalSizeLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TotalSizeLimitExceededException = TotalSizeLimitExceededException;
    var CustomSchemaCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "CustomSchemaCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CustomSchemaCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomSchemaCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.CustomSchemaCountLimitExceededException = CustomSchemaCountLimitExceededException;
    var InvalidInventoryItemContextException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInventoryItemContextException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidInventoryItemContextException = InvalidInventoryItemContextException;
    var ItemContentMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ItemContentMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ItemContentMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemContentMismatchException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.ItemContentMismatchException = ItemContentMismatchException;
    var SubTypeCountLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "SubTypeCountLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "SubTypeCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubTypeCountLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.SubTypeCountLimitExceededException = SubTypeCountLimitExceededException;
    var UnsupportedInventoryItemContextException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventoryItemContextException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventoryItemContextException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventoryItemContextException.prototype);
        this.TypeName = opts.TypeName;
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedInventoryItemContextException = UnsupportedInventoryItemContextException;
    var UnsupportedInventorySchemaVersionException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedInventorySchemaVersionException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedInventorySchemaVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedInventorySchemaVersionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.UnsupportedInventorySchemaVersionException = UnsupportedInventorySchemaVersionException;
    var HierarchyLevelLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyLevelLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyLevelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyLevelLimitExceededException.prototype);
      }
    };
    exports.HierarchyLevelLimitExceededException = HierarchyLevelLimitExceededException;
    var HierarchyTypeMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "HierarchyTypeMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "HierarchyTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HierarchyTypeMismatchException.prototype);
      }
    };
    exports.HierarchyTypeMismatchException = HierarchyTypeMismatchException;
    var IncompatiblePolicyException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "IncompatiblePolicyException",
          $fault: "client",
          ...opts
        });
        this.name = "IncompatiblePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatiblePolicyException.prototype);
      }
    };
    exports.IncompatiblePolicyException = IncompatiblePolicyException;
    var InvalidAllowedPatternException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAllowedPatternException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAllowedPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAllowedPatternException.prototype);
      }
    };
    exports.InvalidAllowedPatternException = InvalidAllowedPatternException;
    var InvalidPolicyAttributeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyAttributeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyAttributeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyAttributeException.prototype);
      }
    };
    exports.InvalidPolicyAttributeException = InvalidPolicyAttributeException;
    var InvalidPolicyTypeException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidPolicyTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidPolicyTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyTypeException.prototype);
      }
    };
    exports.InvalidPolicyTypeException = InvalidPolicyTypeException;
    var ParameterAlreadyExists = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterAlreadyExists.prototype);
      }
    };
    exports.ParameterAlreadyExists = ParameterAlreadyExists;
    var ParameterLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterLimitExceeded.prototype);
      }
    };
    exports.ParameterLimitExceeded = ParameterLimitExceeded;
    var ParameterMaxVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterMaxVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterMaxVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterMaxVersionLimitExceeded.prototype);
      }
    };
    exports.ParameterMaxVersionLimitExceeded = ParameterMaxVersionLimitExceeded;
    var ParameterPatternMismatchException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ParameterPatternMismatchException",
          $fault: "client",
          ...opts
        });
        this.name = "ParameterPatternMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ParameterPatternMismatchException.prototype);
      }
    };
    exports.ParameterPatternMismatchException = ParameterPatternMismatchException;
    var PoliciesLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "PoliciesLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PoliciesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PoliciesLimitExceededException.prototype);
      }
    };
    exports.PoliciesLimitExceededException = PoliciesLimitExceededException;
    var UnsupportedParameterType = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedParameterType",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedParameterType";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedParameterType.prototype);
      }
    };
    exports.UnsupportedParameterType = UnsupportedParameterType;
    var ResourcePolicyLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourcePolicyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourcePolicyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourcePolicyLimitExceededException.prototype);
        this.Limit = opts.Limit;
        this.LimitType = opts.LimitType;
        this.Message = opts.Message;
      }
    };
    exports.ResourcePolicyLimitExceededException = ResourcePolicyLimitExceededException;
    var FeatureNotAvailableException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "FeatureNotAvailableException",
          $fault: "client",
          ...opts
        });
        this.name = "FeatureNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FeatureNotAvailableException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.FeatureNotAvailableException = FeatureNotAvailableException;
    var AutomationStepNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationStepNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationStepNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationStepNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationStepNotFoundException = AutomationStepNotFoundException;
    var InvalidAutomationSignalException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationSignalException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationSignalException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationSignalException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationSignalException = InvalidAutomationSignalException;
    var SignalType;
    (function(SignalType2) {
      SignalType2["APPROVE"] = "Approve";
      SignalType2["REJECT"] = "Reject";
      SignalType2["RESUME"] = "Resume";
      SignalType2["START_STEP"] = "StartStep";
      SignalType2["STOP_STEP"] = "StopStep";
    })(SignalType = exports.SignalType || (exports.SignalType = {}));
    var InvalidNotificationConfig = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidNotificationConfig",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidNotificationConfig";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNotificationConfig.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidNotificationConfig = InvalidNotificationConfig;
    var InvalidOutputFolder = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidOutputFolder",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOutputFolder";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOutputFolder.prototype);
      }
    };
    exports.InvalidOutputFolder = InvalidOutputFolder;
    var InvalidRole = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidRole",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRole";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRole.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidRole = InvalidRole;
    var InvalidAssociation = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAssociation",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAssociation";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAssociation.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAssociation = InvalidAssociation;
    var AutomationDefinitionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionNotFoundException = AutomationDefinitionNotFoundException;
    var AutomationDefinitionVersionNotFoundException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionVersionNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionVersionNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionVersionNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionVersionNotFoundException = AutomationDefinitionVersionNotFoundException;
    var AutomationExecutionLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationExecutionLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationExecutionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionLimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationExecutionLimitExceededException = AutomationExecutionLimitExceededException;
    var InvalidAutomationExecutionParametersException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationExecutionParametersException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationExecutionParametersException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationExecutionParametersException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationExecutionParametersException = InvalidAutomationExecutionParametersException;
    var AutomationDefinitionNotApprovedException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AutomationDefinitionNotApprovedException",
          $fault: "client",
          ...opts
        });
        this.name = "AutomationDefinitionNotApprovedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationDefinitionNotApprovedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AutomationDefinitionNotApprovedException = AutomationDefinitionNotApprovedException;
    var TargetNotConnected = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "TargetNotConnected",
          $fault: "client",
          ...opts
        });
        this.name = "TargetNotConnected";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotConnected.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TargetNotConnected = TargetNotConnected;
    var InvalidAutomationStatusUpdateException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidAutomationStatusUpdateException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAutomationStatusUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAutomationStatusUpdateException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidAutomationStatusUpdateException = InvalidAutomationStatusUpdateException;
    var StopType;
    (function(StopType2) {
      StopType2["CANCEL"] = "Cancel";
      StopType2["COMPLETE"] = "Complete";
    })(StopType = exports.StopType || (exports.StopType = {}));
    var AssociationVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "AssociationVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "AssociationVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociationVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AssociationVersionLimitExceeded = AssociationVersionLimitExceeded;
    var OpsItemFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemFilterFilterSensitiveLog = OpsItemFilterFilterSensitiveLog;
    var DescribeOpsItemsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeOpsItemsRequestFilterSensitiveLog = DescribeOpsItemsRequestFilterSensitiveLog;
    var OpsItemSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemSummaryFilterSensitiveLog = OpsItemSummaryFilterSensitiveLog;
    var DescribeOpsItemsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeOpsItemsResponseFilterSensitiveLog = DescribeOpsItemsResponseFilterSensitiveLog;
    var ParametersFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParametersFilterFilterSensitiveLog = ParametersFilterFilterSensitiveLog;
    var ParameterStringFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParameterStringFilterFilterSensitiveLog = ParameterStringFilterFilterSensitiveLog;
    var DescribeParametersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeParametersRequestFilterSensitiveLog = DescribeParametersRequestFilterSensitiveLog;
    var ParameterInlinePolicyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParameterInlinePolicyFilterSensitiveLog = ParameterInlinePolicyFilterSensitiveLog;
    var ParameterMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParameterMetadataFilterSensitiveLog = ParameterMetadataFilterSensitiveLog;
    var DescribeParametersResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeParametersResultFilterSensitiveLog = DescribeParametersResultFilterSensitiveLog;
    var DescribePatchBaselinesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchBaselinesRequestFilterSensitiveLog = DescribePatchBaselinesRequestFilterSensitiveLog;
    var PatchBaselineIdentityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchBaselineIdentityFilterSensitiveLog = PatchBaselineIdentityFilterSensitiveLog;
    var DescribePatchBaselinesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchBaselinesResultFilterSensitiveLog = DescribePatchBaselinesResultFilterSensitiveLog;
    var DescribePatchGroupsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchGroupsRequestFilterSensitiveLog = DescribePatchGroupsRequestFilterSensitiveLog;
    var PatchGroupPatchBaselineMappingFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PatchGroupPatchBaselineMappingFilterSensitiveLog = PatchGroupPatchBaselineMappingFilterSensitiveLog;
    var DescribePatchGroupsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchGroupsResultFilterSensitiveLog = DescribePatchGroupsResultFilterSensitiveLog;
    var DescribePatchGroupStateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchGroupStateRequestFilterSensitiveLog = DescribePatchGroupStateRequestFilterSensitiveLog;
    var DescribePatchGroupStateResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchGroupStateResultFilterSensitiveLog = DescribePatchGroupStateResultFilterSensitiveLog;
    var DescribePatchPropertiesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchPropertiesRequestFilterSensitiveLog = DescribePatchPropertiesRequestFilterSensitiveLog;
    var DescribePatchPropertiesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePatchPropertiesResultFilterSensitiveLog = DescribePatchPropertiesResultFilterSensitiveLog;
    var SessionFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SessionFilterFilterSensitiveLog = SessionFilterFilterSensitiveLog;
    var DescribeSessionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeSessionsRequestFilterSensitiveLog = DescribeSessionsRequestFilterSensitiveLog;
    var SessionManagerOutputUrlFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SessionManagerOutputUrlFilterSensitiveLog = SessionManagerOutputUrlFilterSensitiveLog;
    var SessionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SessionFilterSensitiveLog = SessionFilterSensitiveLog;
    var DescribeSessionsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeSessionsResponseFilterSensitiveLog = DescribeSessionsResponseFilterSensitiveLog;
    var DisassociateOpsItemRelatedItemRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DisassociateOpsItemRelatedItemRequestFilterSensitiveLog = DisassociateOpsItemRelatedItemRequestFilterSensitiveLog;
    var DisassociateOpsItemRelatedItemResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DisassociateOpsItemRelatedItemResponseFilterSensitiveLog = DisassociateOpsItemRelatedItemResponseFilterSensitiveLog;
    var GetAutomationExecutionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAutomationExecutionRequestFilterSensitiveLog = GetAutomationExecutionRequestFilterSensitiveLog;
    var ProgressCountersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ProgressCountersFilterSensitiveLog = ProgressCountersFilterSensitiveLog;
    var AutomationExecutionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AutomationExecutionFilterSensitiveLog = AutomationExecutionFilterSensitiveLog;
    var GetAutomationExecutionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAutomationExecutionResultFilterSensitiveLog = GetAutomationExecutionResultFilterSensitiveLog;
    var GetCalendarStateRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCalendarStateRequestFilterSensitiveLog = GetCalendarStateRequestFilterSensitiveLog;
    var GetCalendarStateResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCalendarStateResponseFilterSensitiveLog = GetCalendarStateResponseFilterSensitiveLog;
    var GetCommandInvocationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCommandInvocationRequestFilterSensitiveLog = GetCommandInvocationRequestFilterSensitiveLog;
    var CloudWatchOutputConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CloudWatchOutputConfigFilterSensitiveLog = CloudWatchOutputConfigFilterSensitiveLog;
    var GetCommandInvocationResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCommandInvocationResultFilterSensitiveLog = GetCommandInvocationResultFilterSensitiveLog;
    var GetConnectionStatusRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetConnectionStatusRequestFilterSensitiveLog = GetConnectionStatusRequestFilterSensitiveLog;
    var GetConnectionStatusResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetConnectionStatusResponseFilterSensitiveLog = GetConnectionStatusResponseFilterSensitiveLog;
    var GetDefaultPatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDefaultPatchBaselineRequestFilterSensitiveLog = GetDefaultPatchBaselineRequestFilterSensitiveLog;
    var GetDefaultPatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDefaultPatchBaselineResultFilterSensitiveLog = GetDefaultPatchBaselineResultFilterSensitiveLog;
    var BaselineOverrideFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.BaselineOverrideFilterSensitiveLog = BaselineOverrideFilterSensitiveLog;
    var GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog;
    var GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog = GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog;
    var GetDocumentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDocumentRequestFilterSensitiveLog = GetDocumentRequestFilterSensitiveLog;
    var AttachmentContentFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AttachmentContentFilterSensitiveLog = AttachmentContentFilterSensitiveLog;
    var GetDocumentResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetDocumentResultFilterSensitiveLog = GetDocumentResultFilterSensitiveLog;
    var InventoryFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryFilterFilterSensitiveLog = InventoryFilterFilterSensitiveLog;
    var InventoryGroupFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryGroupFilterSensitiveLog = InventoryGroupFilterSensitiveLog;
    var ResultAttributeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResultAttributeFilterSensitiveLog = ResultAttributeFilterSensitiveLog;
    var InventoryResultItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryResultItemFilterSensitiveLog = InventoryResultItemFilterSensitiveLog;
    var InventoryResultEntityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryResultEntityFilterSensitiveLog = InventoryResultEntityFilterSensitiveLog;
    var GetInventoryResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetInventoryResultFilterSensitiveLog = GetInventoryResultFilterSensitiveLog;
    var GetInventorySchemaRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetInventorySchemaRequestFilterSensitiveLog = GetInventorySchemaRequestFilterSensitiveLog;
    var InventoryItemAttributeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryItemAttributeFilterSensitiveLog = InventoryItemAttributeFilterSensitiveLog;
    var InventoryItemSchemaFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryItemSchemaFilterSensitiveLog = InventoryItemSchemaFilterSensitiveLog;
    var GetInventorySchemaResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetInventorySchemaResultFilterSensitiveLog = GetInventorySchemaResultFilterSensitiveLog;
    var GetMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetMaintenanceWindowRequestFilterSensitiveLog = GetMaintenanceWindowRequestFilterSensitiveLog;
    var GetMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowResultFilterSensitiveLog = GetMaintenanceWindowResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetMaintenanceWindowExecutionRequestFilterSensitiveLog = GetMaintenanceWindowExecutionRequestFilterSensitiveLog;
    var GetMaintenanceWindowExecutionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetMaintenanceWindowExecutionResultFilterSensitiveLog = GetMaintenanceWindowExecutionResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog = GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog = GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog;
    var GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog;
    var GetMaintenanceWindowTaskRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetMaintenanceWindowTaskRequestFilterSensitiveLog = GetMaintenanceWindowTaskRequestFilterSensitiveLog;
    var MaintenanceWindowAutomationParametersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.MaintenanceWindowAutomationParametersFilterSensitiveLog = MaintenanceWindowAutomationParametersFilterSensitiveLog;
    var MaintenanceWindowLambdaParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowLambdaParametersFilterSensitiveLog = MaintenanceWindowLambdaParametersFilterSensitiveLog;
    var NotificationConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.NotificationConfigFilterSensitiveLog = NotificationConfigFilterSensitiveLog;
    var MaintenanceWindowRunCommandParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog = MaintenanceWindowRunCommandParametersFilterSensitiveLog;
    var MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Input && { Input: smithy_client_1.SENSITIVE_STRING }
    });
    exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = MaintenanceWindowStepFunctionsParametersFilterSensitiveLog;
    var MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RunCommand && { RunCommand: (0, exports.MaintenanceWindowRunCommandParametersFilterSensitiveLog)(obj.RunCommand) },
      ...obj.StepFunctions && {
        StepFunctions: (0, exports.MaintenanceWindowStepFunctionsParametersFilterSensitiveLog)(obj.StepFunctions)
      },
      ...obj.Lambda && { Lambda: (0, exports.MaintenanceWindowLambdaParametersFilterSensitiveLog)(obj.Lambda) }
    });
    exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = MaintenanceWindowTaskInvocationParametersFilterSensitiveLog;
    var GetMaintenanceWindowTaskResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetMaintenanceWindowTaskResultFilterSensitiveLog = GetMaintenanceWindowTaskResultFilterSensitiveLog;
    var GetOpsItemRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpsItemRequestFilterSensitiveLog = GetOpsItemRequestFilterSensitiveLog;
    var OpsItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemFilterSensitiveLog = OpsItemFilterSensitiveLog;
    var GetOpsItemResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpsItemResponseFilterSensitiveLog = GetOpsItemResponseFilterSensitiveLog;
    var GetOpsMetadataRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpsMetadataRequestFilterSensitiveLog = GetOpsMetadataRequestFilterSensitiveLog;
    var GetOpsMetadataResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpsMetadataResultFilterSensitiveLog = GetOpsMetadataResultFilterSensitiveLog;
    var OpsFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsFilterFilterSensitiveLog = OpsFilterFilterSensitiveLog;
    var OpsResultAttributeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsResultAttributeFilterSensitiveLog = OpsResultAttributeFilterSensitiveLog;
    var OpsEntityItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsEntityItemFilterSensitiveLog = OpsEntityItemFilterSensitiveLog;
    var OpsEntityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsEntityFilterSensitiveLog = OpsEntityFilterSensitiveLog;
    var GetOpsSummaryResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpsSummaryResultFilterSensitiveLog = GetOpsSummaryResultFilterSensitiveLog;
    var GetParameterRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetParameterRequestFilterSensitiveLog = GetParameterRequestFilterSensitiveLog;
    var ParameterFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ParameterFilterSensitiveLog = ParameterFilterSensitiveLog;
    var GetParameterResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameter && { Parameter: (0, exports.ParameterFilterSensitiveLog)(obj.Parameter) }
    });
    exports.GetParameterResultFilterSensitiveLog = GetParameterResultFilterSensitiveLog;
    var GetParameterHistoryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetParameterHistoryRequestFilterSensitiveLog = GetParameterHistoryRequestFilterSensitiveLog;
    var ParameterHistoryFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ParameterHistoryFilterSensitiveLog = ParameterHistoryFilterSensitiveLog;
    var GetParameterHistoryResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterHistoryFilterSensitiveLog)(item)) }
    });
    exports.GetParameterHistoryResultFilterSensitiveLog = GetParameterHistoryResultFilterSensitiveLog;
    var GetParametersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetParametersRequestFilterSensitiveLog = GetParametersRequestFilterSensitiveLog;
    var GetParametersResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterFilterSensitiveLog)(item)) }
    });
    exports.GetParametersResultFilterSensitiveLog = GetParametersResultFilterSensitiveLog;
    var GetParametersByPathRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetParametersByPathRequestFilterSensitiveLog = GetParametersByPathRequestFilterSensitiveLog;
    var GetParametersByPathResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports.ParameterFilterSensitiveLog)(item)) }
    });
    exports.GetParametersByPathResultFilterSensitiveLog = GetParametersByPathResultFilterSensitiveLog;
    var GetPatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPatchBaselineRequestFilterSensitiveLog = GetPatchBaselineRequestFilterSensitiveLog;
    var GetPatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.GetPatchBaselineResultFilterSensitiveLog = GetPatchBaselineResultFilterSensitiveLog;
    var GetPatchBaselineForPatchGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPatchBaselineForPatchGroupRequestFilterSensitiveLog = GetPatchBaselineForPatchGroupRequestFilterSensitiveLog;
    var GetPatchBaselineForPatchGroupResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPatchBaselineForPatchGroupResultFilterSensitiveLog = GetPatchBaselineForPatchGroupResultFilterSensitiveLog;
    var GetResourcePoliciesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetResourcePoliciesRequestFilterSensitiveLog = GetResourcePoliciesRequestFilterSensitiveLog;
    var GetResourcePoliciesResponseEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetResourcePoliciesResponseEntryFilterSensitiveLog = GetResourcePoliciesResponseEntryFilterSensitiveLog;
    var GetResourcePoliciesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetResourcePoliciesResponseFilterSensitiveLog = GetResourcePoliciesResponseFilterSensitiveLog;
    var GetServiceSettingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceSettingRequestFilterSensitiveLog = GetServiceSettingRequestFilterSensitiveLog;
    var ServiceSettingFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ServiceSettingFilterSensitiveLog = ServiceSettingFilterSensitiveLog;
    var GetServiceSettingResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetServiceSettingResultFilterSensitiveLog = GetServiceSettingResultFilterSensitiveLog;
    var LabelParameterVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LabelParameterVersionRequestFilterSensitiveLog = LabelParameterVersionRequestFilterSensitiveLog;
    var LabelParameterVersionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LabelParameterVersionResultFilterSensitiveLog = LabelParameterVersionResultFilterSensitiveLog;
    var AssociationFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationFilterFilterSensitiveLog = AssociationFilterFilterSensitiveLog;
    var ListAssociationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAssociationsRequestFilterSensitiveLog = ListAssociationsRequestFilterSensitiveLog;
    var AssociationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssociationFilterSensitiveLog = AssociationFilterSensitiveLog;
    var ListAssociationsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAssociationsResultFilterSensitiveLog = ListAssociationsResultFilterSensitiveLog;
    var ListAssociationVersionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAssociationVersionsRequestFilterSensitiveLog = ListAssociationVersionsRequestFilterSensitiveLog;
    var AssociationVersionInfoFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.AssociationVersionInfoFilterSensitiveLog = AssociationVersionInfoFilterSensitiveLog;
    var ListAssociationVersionsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationVersions && {
        AssociationVersions: obj.AssociationVersions.map((item) => (0, exports.AssociationVersionInfoFilterSensitiveLog)(item))
      }
    });
    exports.ListAssociationVersionsResultFilterSensitiveLog = ListAssociationVersionsResultFilterSensitiveLog;
    var CommandFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CommandFilterFilterSensitiveLog = CommandFilterFilterSensitiveLog;
    var ListCommandInvocationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListCommandInvocationsRequestFilterSensitiveLog = ListCommandInvocationsRequestFilterSensitiveLog;
    var CommandPluginFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CommandPluginFilterSensitiveLog = CommandPluginFilterSensitiveLog;
    var CommandInvocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CommandInvocationFilterSensitiveLog = CommandInvocationFilterSensitiveLog;
    var ListCommandInvocationsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListCommandInvocationsResultFilterSensitiveLog = ListCommandInvocationsResultFilterSensitiveLog;
    var ListCommandsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListCommandsRequestFilterSensitiveLog = ListCommandsRequestFilterSensitiveLog;
    var CommandFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.CommandFilterSensitiveLog = CommandFilterSensitiveLog;
    var ListCommandsResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Commands && { Commands: obj.Commands.map((item) => (0, exports.CommandFilterSensitiveLog)(item)) }
    });
    exports.ListCommandsResultFilterSensitiveLog = ListCommandsResultFilterSensitiveLog;
    var ComplianceStringFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ComplianceStringFilterFilterSensitiveLog = ComplianceStringFilterFilterSensitiveLog;
    var ListComplianceItemsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListComplianceItemsRequestFilterSensitiveLog = ListComplianceItemsRequestFilterSensitiveLog;
    var ComplianceExecutionSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ComplianceExecutionSummaryFilterSensitiveLog = ComplianceExecutionSummaryFilterSensitiveLog;
    var ComplianceItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ComplianceItemFilterSensitiveLog = ComplianceItemFilterSensitiveLog;
    var ListComplianceItemsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListComplianceItemsResultFilterSensitiveLog = ListComplianceItemsResultFilterSensitiveLog;
    var ListComplianceSummariesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListComplianceSummariesRequestFilterSensitiveLog = ListComplianceSummariesRequestFilterSensitiveLog;
    var SeveritySummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SeveritySummaryFilterSensitiveLog = SeveritySummaryFilterSensitiveLog;
    var CompliantSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CompliantSummaryFilterSensitiveLog = CompliantSummaryFilterSensitiveLog;
    var NonCompliantSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.NonCompliantSummaryFilterSensitiveLog = NonCompliantSummaryFilterSensitiveLog;
    var ComplianceSummaryItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ComplianceSummaryItemFilterSensitiveLog = ComplianceSummaryItemFilterSensitiveLog;
    var ListComplianceSummariesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListComplianceSummariesResultFilterSensitiveLog = ListComplianceSummariesResultFilterSensitiveLog;
    var ListDocumentMetadataHistoryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListDocumentMetadataHistoryRequestFilterSensitiveLog = ListDocumentMetadataHistoryRequestFilterSensitiveLog;
    var DocumentReviewCommentSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentReviewCommentSourceFilterSensitiveLog = DocumentReviewCommentSourceFilterSensitiveLog;
    var DocumentReviewerResponseSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentReviewerResponseSourceFilterSensitiveLog = DocumentReviewerResponseSourceFilterSensitiveLog;
    var DocumentMetadataResponseInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentMetadataResponseInfoFilterSensitiveLog = DocumentMetadataResponseInfoFilterSensitiveLog;
    var ListDocumentMetadataHistoryResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListDocumentMetadataHistoryResponseFilterSensitiveLog = ListDocumentMetadataHistoryResponseFilterSensitiveLog;
    var DocumentFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentFilterFilterSensitiveLog = DocumentFilterFilterSensitiveLog;
    var DocumentKeyValuesFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentKeyValuesFilterFilterSensitiveLog = DocumentKeyValuesFilterFilterSensitiveLog;
    var ListDocumentsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListDocumentsRequestFilterSensitiveLog = ListDocumentsRequestFilterSensitiveLog;
    var DocumentIdentifierFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentIdentifierFilterSensitiveLog = DocumentIdentifierFilterSensitiveLog;
    var ListDocumentsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListDocumentsResultFilterSensitiveLog = ListDocumentsResultFilterSensitiveLog;
    var ListDocumentVersionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListDocumentVersionsRequestFilterSensitiveLog = ListDocumentVersionsRequestFilterSensitiveLog;
    var DocumentVersionInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentVersionInfoFilterSensitiveLog = DocumentVersionInfoFilterSensitiveLog;
    var ListDocumentVersionsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListDocumentVersionsResultFilterSensitiveLog = ListDocumentVersionsResultFilterSensitiveLog;
    var ListInventoryEntriesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInventoryEntriesRequestFilterSensitiveLog = ListInventoryEntriesRequestFilterSensitiveLog;
    var ListInventoryEntriesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListInventoryEntriesResultFilterSensitiveLog = ListInventoryEntriesResultFilterSensitiveLog;
    var OpsItemEventFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemEventFilterFilterSensitiveLog = OpsItemEventFilterFilterSensitiveLog;
    var ListOpsItemEventsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpsItemEventsRequestFilterSensitiveLog = ListOpsItemEventsRequestFilterSensitiveLog;
    var OpsItemIdentityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemIdentityFilterSensitiveLog = OpsItemIdentityFilterSensitiveLog;
    var OpsItemEventSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemEventSummaryFilterSensitiveLog = OpsItemEventSummaryFilterSensitiveLog;
    var ListOpsItemEventsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpsItemEventsResponseFilterSensitiveLog = ListOpsItemEventsResponseFilterSensitiveLog;
    var OpsItemRelatedItemsFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemRelatedItemsFilterFilterSensitiveLog = OpsItemRelatedItemsFilterFilterSensitiveLog;
    var ListOpsItemRelatedItemsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpsItemRelatedItemsRequestFilterSensitiveLog = ListOpsItemRelatedItemsRequestFilterSensitiveLog;
    var OpsItemRelatedItemSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsItemRelatedItemSummaryFilterSensitiveLog = OpsItemRelatedItemSummaryFilterSensitiveLog;
    var ListOpsItemRelatedItemsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpsItemRelatedItemsResponseFilterSensitiveLog = ListOpsItemRelatedItemsResponseFilterSensitiveLog;
    var OpsMetadataFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsMetadataFilterFilterSensitiveLog = OpsMetadataFilterFilterSensitiveLog;
    var ListOpsMetadataRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpsMetadataRequestFilterSensitiveLog = ListOpsMetadataRequestFilterSensitiveLog;
    var OpsMetadataFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsMetadataFilterSensitiveLog = OpsMetadataFilterSensitiveLog;
    var ListOpsMetadataResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListOpsMetadataResultFilterSensitiveLog = ListOpsMetadataResultFilterSensitiveLog;
    var ListResourceComplianceSummariesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListResourceComplianceSummariesRequestFilterSensitiveLog = ListResourceComplianceSummariesRequestFilterSensitiveLog;
    var ResourceComplianceSummaryItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceComplianceSummaryItemFilterSensitiveLog = ResourceComplianceSummaryItemFilterSensitiveLog;
    var ListResourceComplianceSummariesResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListResourceComplianceSummariesResultFilterSensitiveLog = ListResourceComplianceSummariesResultFilterSensitiveLog;
    var ListResourceDataSyncRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListResourceDataSyncRequestFilterSensitiveLog = ListResourceDataSyncRequestFilterSensitiveLog;
    var ResourceDataSyncSourceWithStateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncSourceWithStateFilterSensitiveLog = ResourceDataSyncSourceWithStateFilterSensitiveLog;
    var ResourceDataSyncItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceDataSyncItemFilterSensitiveLog = ResourceDataSyncItemFilterSensitiveLog;
    var ListResourceDataSyncResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListResourceDataSyncResultFilterSensitiveLog = ListResourceDataSyncResultFilterSensitiveLog;
    var ListTagsForResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTagsForResourceRequestFilterSensitiveLog = ListTagsForResourceRequestFilterSensitiveLog;
    var ListTagsForResourceResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTagsForResourceResultFilterSensitiveLog = ListTagsForResourceResultFilterSensitiveLog;
    var ModifyDocumentPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ModifyDocumentPermissionRequestFilterSensitiveLog = ModifyDocumentPermissionRequestFilterSensitiveLog;
    var ModifyDocumentPermissionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ModifyDocumentPermissionResponseFilterSensitiveLog = ModifyDocumentPermissionResponseFilterSensitiveLog;
    var ComplianceItemEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ComplianceItemEntryFilterSensitiveLog = ComplianceItemEntryFilterSensitiveLog;
    var PutComplianceItemsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutComplianceItemsRequestFilterSensitiveLog = PutComplianceItemsRequestFilterSensitiveLog;
    var PutComplianceItemsResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutComplianceItemsResultFilterSensitiveLog = PutComplianceItemsResultFilterSensitiveLog;
    var InventoryItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryItemFilterSensitiveLog = InventoryItemFilterSensitiveLog;
    var PutInventoryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutInventoryRequestFilterSensitiveLog = PutInventoryRequestFilterSensitiveLog;
    var PutInventoryResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutInventoryResultFilterSensitiveLog = PutInventoryResultFilterSensitiveLog;
    var PutParameterRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: smithy_client_1.SENSITIVE_STRING }
    });
    exports.PutParameterRequestFilterSensitiveLog = PutParameterRequestFilterSensitiveLog;
    var PutParameterResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutParameterResultFilterSensitiveLog = PutParameterResultFilterSensitiveLog;
    var PutResourcePolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutResourcePolicyRequestFilterSensitiveLog = PutResourcePolicyRequestFilterSensitiveLog;
    var PutResourcePolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutResourcePolicyResponseFilterSensitiveLog = PutResourcePolicyResponseFilterSensitiveLog;
    var RegisterDefaultPatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterDefaultPatchBaselineRequestFilterSensitiveLog = RegisterDefaultPatchBaselineRequestFilterSensitiveLog;
    var RegisterDefaultPatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterDefaultPatchBaselineResultFilterSensitiveLog = RegisterDefaultPatchBaselineResultFilterSensitiveLog;
    var RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog = RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog;
    var RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog = RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog;
    var RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog;
    var RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog = RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog;
    var RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, exports.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog;
    var RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog = RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog;
    var RemoveTagsFromResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveTagsFromResourceRequestFilterSensitiveLog = RemoveTagsFromResourceRequestFilterSensitiveLog;
    var RemoveTagsFromResourceResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveTagsFromResourceResultFilterSensitiveLog = RemoveTagsFromResourceResultFilterSensitiveLog;
    var ResetServiceSettingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResetServiceSettingRequestFilterSensitiveLog = ResetServiceSettingRequestFilterSensitiveLog;
    var ResetServiceSettingResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResetServiceSettingResultFilterSensitiveLog = ResetServiceSettingResultFilterSensitiveLog;
    var ResumeSessionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResumeSessionRequestFilterSensitiveLog = ResumeSessionRequestFilterSensitiveLog;
    var ResumeSessionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResumeSessionResponseFilterSensitiveLog = ResumeSessionResponseFilterSensitiveLog;
    var SendAutomationSignalRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SendAutomationSignalRequestFilterSensitiveLog = SendAutomationSignalRequestFilterSensitiveLog;
    var SendAutomationSignalResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SendAutomationSignalResultFilterSensitiveLog = SendAutomationSignalResultFilterSensitiveLog;
    var SendCommandRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.SendCommandRequestFilterSensitiveLog = SendCommandRequestFilterSensitiveLog;
    var SendCommandResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Command && { Command: (0, exports.CommandFilterSensitiveLog)(obj.Command) }
    });
    exports.SendCommandResultFilterSensitiveLog = SendCommandResultFilterSensitiveLog;
    var StartAssociationsOnceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartAssociationsOnceRequestFilterSensitiveLog = StartAssociationsOnceRequestFilterSensitiveLog;
    var StartAssociationsOnceResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartAssociationsOnceResultFilterSensitiveLog = StartAssociationsOnceResultFilterSensitiveLog;
    var StartAutomationExecutionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartAutomationExecutionRequestFilterSensitiveLog = StartAutomationExecutionRequestFilterSensitiveLog;
    var StartAutomationExecutionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartAutomationExecutionResultFilterSensitiveLog = StartAutomationExecutionResultFilterSensitiveLog;
    var StartChangeRequestExecutionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartChangeRequestExecutionRequestFilterSensitiveLog = StartChangeRequestExecutionRequestFilterSensitiveLog;
    var StartChangeRequestExecutionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartChangeRequestExecutionResultFilterSensitiveLog = StartChangeRequestExecutionResultFilterSensitiveLog;
    var StartSessionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartSessionRequestFilterSensitiveLog = StartSessionRequestFilterSensitiveLog;
    var StartSessionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartSessionResponseFilterSensitiveLog = StartSessionResponseFilterSensitiveLog;
    var StopAutomationExecutionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StopAutomationExecutionRequestFilterSensitiveLog = StopAutomationExecutionRequestFilterSensitiveLog;
    var StopAutomationExecutionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StopAutomationExecutionResultFilterSensitiveLog = StopAutomationExecutionResultFilterSensitiveLog;
    var TerminateSessionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TerminateSessionRequestFilterSensitiveLog = TerminateSessionRequestFilterSensitiveLog;
    var TerminateSessionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TerminateSessionResponseFilterSensitiveLog = TerminateSessionResponseFilterSensitiveLog;
    var UnlabelParameterVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UnlabelParameterVersionRequestFilterSensitiveLog = UnlabelParameterVersionRequestFilterSensitiveLog;
    var UnlabelParameterVersionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UnlabelParameterVersionResultFilterSensitiveLog = UnlabelParameterVersionResultFilterSensitiveLog;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js
var require_models_2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/models_2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryRequestFilterSensitiveLog = exports.GetInventoryRequestFilterSensitiveLog = exports.OpsAggregatorFilterSensitiveLog = exports.InventoryAggregatorFilterSensitiveLog = exports.UpdateServiceSettingResultFilterSensitiveLog = exports.UpdateServiceSettingRequestFilterSensitiveLog = exports.UpdateResourceDataSyncResultFilterSensitiveLog = exports.UpdateResourceDataSyncRequestFilterSensitiveLog = exports.UpdatePatchBaselineResultFilterSensitiveLog = exports.UpdatePatchBaselineRequestFilterSensitiveLog = exports.UpdateOpsMetadataResultFilterSensitiveLog = exports.UpdateOpsMetadataRequestFilterSensitiveLog = exports.UpdateOpsItemResponseFilterSensitiveLog = exports.UpdateOpsItemRequestFilterSensitiveLog = exports.UpdateManagedInstanceRoleResultFilterSensitiveLog = exports.UpdateManagedInstanceRoleRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = exports.UpdateMaintenanceWindowResultFilterSensitiveLog = exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = exports.UpdateDocumentMetadataResponseFilterSensitiveLog = exports.UpdateDocumentMetadataRequestFilterSensitiveLog = exports.DocumentReviewsFilterSensitiveLog = exports.UpdateDocumentDefaultVersionResultFilterSensitiveLog = exports.DocumentDefaultVersionDescriptionFilterSensitiveLog = exports.UpdateDocumentDefaultVersionRequestFilterSensitiveLog = exports.UpdateDocumentResultFilterSensitiveLog = exports.UpdateDocumentRequestFilterSensitiveLog = exports.UpdateAssociationStatusResultFilterSensitiveLog = exports.UpdateAssociationStatusRequestFilterSensitiveLog = exports.UpdateAssociationResultFilterSensitiveLog = exports.UpdateAssociationRequestFilterSensitiveLog = exports.ResourceDataSyncConflictException = exports.OpsMetadataKeyLimitExceededException = exports.DocumentReviewAction = exports.DuplicateDocumentVersionName = exports.DuplicateDocumentContent = exports.DocumentVersionLimitExceeded = exports.StatusUnchanged = exports.InvalidUpdate = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var models_1_1 = require_models_1();
    var SSMServiceException_1 = require_SSMServiceException();
    var InvalidUpdate = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "InvalidUpdate",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidUpdate";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUpdate.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidUpdate = InvalidUpdate;
    var StatusUnchanged = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "StatusUnchanged",
          $fault: "client",
          ...opts
        });
        this.name = "StatusUnchanged";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatusUnchanged.prototype);
      }
    };
    exports.StatusUnchanged = StatusUnchanged;
    var DocumentVersionLimitExceeded = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DocumentVersionLimitExceeded",
          $fault: "client",
          ...opts
        });
        this.name = "DocumentVersionLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DocumentVersionLimitExceeded.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DocumentVersionLimitExceeded = DocumentVersionLimitExceeded;
    var DuplicateDocumentContent = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentContent",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentContent";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentContent.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DuplicateDocumentContent = DuplicateDocumentContent;
    var DuplicateDocumentVersionName = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "DuplicateDocumentVersionName",
          $fault: "client",
          ...opts
        });
        this.name = "DuplicateDocumentVersionName";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateDocumentVersionName.prototype);
        this.Message = opts.Message;
      }
    };
    exports.DuplicateDocumentVersionName = DuplicateDocumentVersionName;
    var DocumentReviewAction;
    (function(DocumentReviewAction2) {
      DocumentReviewAction2["Approve"] = "Approve";
      DocumentReviewAction2["Reject"] = "Reject";
      DocumentReviewAction2["SendForReview"] = "SendForReview";
      DocumentReviewAction2["UpdateReview"] = "UpdateReview";
    })(DocumentReviewAction = exports.DocumentReviewAction || (exports.DocumentReviewAction = {}));
    var OpsMetadataKeyLimitExceededException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "OpsMetadataKeyLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "OpsMetadataKeyLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OpsMetadataKeyLimitExceededException.prototype);
      }
    };
    exports.OpsMetadataKeyLimitExceededException = OpsMetadataKeyLimitExceededException;
    var ResourceDataSyncConflictException = class extends SSMServiceException_1.SSMServiceException {
      constructor(opts) {
        super({
          name: "ResourceDataSyncConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceDataSyncConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDataSyncConflictException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ResourceDataSyncConflictException = ResourceDataSyncConflictException;
    var UpdateAssociationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateAssociationRequestFilterSensitiveLog = UpdateAssociationRequestFilterSensitiveLog;
    var UpdateAssociationResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.UpdateAssociationResultFilterSensitiveLog = UpdateAssociationResultFilterSensitiveLog;
    var UpdateAssociationStatusRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateAssociationStatusRequestFilterSensitiveLog = UpdateAssociationStatusRequestFilterSensitiveLog;
    var UpdateAssociationStatusResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AssociationDescription && {
        AssociationDescription: (0, models_0_1.AssociationDescriptionFilterSensitiveLog)(obj.AssociationDescription)
      }
    });
    exports.UpdateAssociationStatusResultFilterSensitiveLog = UpdateAssociationStatusResultFilterSensitiveLog;
    var UpdateDocumentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateDocumentRequestFilterSensitiveLog = UpdateDocumentRequestFilterSensitiveLog;
    var UpdateDocumentResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateDocumentResultFilterSensitiveLog = UpdateDocumentResultFilterSensitiveLog;
    var UpdateDocumentDefaultVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateDocumentDefaultVersionRequestFilterSensitiveLog = UpdateDocumentDefaultVersionRequestFilterSensitiveLog;
    var DocumentDefaultVersionDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentDefaultVersionDescriptionFilterSensitiveLog = DocumentDefaultVersionDescriptionFilterSensitiveLog;
    var UpdateDocumentDefaultVersionResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateDocumentDefaultVersionResultFilterSensitiveLog = UpdateDocumentDefaultVersionResultFilterSensitiveLog;
    var DocumentReviewsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DocumentReviewsFilterSensitiveLog = DocumentReviewsFilterSensitiveLog;
    var UpdateDocumentMetadataRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateDocumentMetadataRequestFilterSensitiveLog = UpdateDocumentMetadataRequestFilterSensitiveLog;
    var UpdateDocumentMetadataResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateDocumentMetadataResponseFilterSensitiveLog = UpdateDocumentMetadataResponseFilterSensitiveLog;
    var UpdateMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowRequestFilterSensitiveLog = UpdateMaintenanceWindowRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowResultFilterSensitiveLog = UpdateMaintenanceWindowResultFilterSensitiveLog;
    var UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog = UpdateMaintenanceWindowTargetRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowTargetResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OwnerInformation && { OwnerInformation: smithy_client_1.SENSITIVE_STRING },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTargetResultFilterSensitiveLog = UpdateMaintenanceWindowTargetResultFilterSensitiveLog;
    var UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog = UpdateMaintenanceWindowTaskRequestFilterSensitiveLog;
    var UpdateMaintenanceWindowTaskResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TaskParameters && { TaskParameters: smithy_client_1.SENSITIVE_STRING },
      ...obj.TaskInvocationParameters && {
        TaskInvocationParameters: (0, models_1_1.MaintenanceWindowTaskInvocationParametersFilterSensitiveLog)(obj.TaskInvocationParameters)
      },
      ...obj.Description && { Description: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateMaintenanceWindowTaskResultFilterSensitiveLog = UpdateMaintenanceWindowTaskResultFilterSensitiveLog;
    var UpdateManagedInstanceRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateManagedInstanceRoleRequestFilterSensitiveLog = UpdateManagedInstanceRoleRequestFilterSensitiveLog;
    var UpdateManagedInstanceRoleResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateManagedInstanceRoleResultFilterSensitiveLog = UpdateManagedInstanceRoleResultFilterSensitiveLog;
    var UpdateOpsItemRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateOpsItemRequestFilterSensitiveLog = UpdateOpsItemRequestFilterSensitiveLog;
    var UpdateOpsItemResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateOpsItemResponseFilterSensitiveLog = UpdateOpsItemResponseFilterSensitiveLog;
    var UpdateOpsMetadataRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateOpsMetadataRequestFilterSensitiveLog = UpdateOpsMetadataRequestFilterSensitiveLog;
    var UpdateOpsMetadataResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateOpsMetadataResultFilterSensitiveLog = UpdateOpsMetadataResultFilterSensitiveLog;
    var UpdatePatchBaselineRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.UpdatePatchBaselineRequestFilterSensitiveLog = UpdatePatchBaselineRequestFilterSensitiveLog;
    var UpdatePatchBaselineResultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Sources && { Sources: obj.Sources.map((item) => (0, models_0_1.PatchSourceFilterSensitiveLog)(item)) }
    });
    exports.UpdatePatchBaselineResultFilterSensitiveLog = UpdatePatchBaselineResultFilterSensitiveLog;
    var UpdateResourceDataSyncRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateResourceDataSyncRequestFilterSensitiveLog = UpdateResourceDataSyncRequestFilterSensitiveLog;
    var UpdateResourceDataSyncResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateResourceDataSyncResultFilterSensitiveLog = UpdateResourceDataSyncResultFilterSensitiveLog;
    var UpdateServiceSettingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateServiceSettingRequestFilterSensitiveLog = UpdateServiceSettingRequestFilterSensitiveLog;
    var UpdateServiceSettingResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateServiceSettingResultFilterSensitiveLog = UpdateServiceSettingResultFilterSensitiveLog;
    var InventoryAggregatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InventoryAggregatorFilterSensitiveLog = InventoryAggregatorFilterSensitiveLog;
    var OpsAggregatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OpsAggregatorFilterSensitiveLog = OpsAggregatorFilterSensitiveLog;
    var GetInventoryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetInventoryRequestFilterSensitiveLog = GetInventoryRequestFilterSensitiveLog;
    var GetOpsSummaryRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetOpsSummaryRequestFilterSensitiveLog = GetOpsSummaryRequestFilterSensitiveLog;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js
var require_Aws_json1_12 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/protocols/Aws_json1_1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = exports.serializeAws_json1_1DescribeInventoryDeletionsCommand = exports.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = exports.serializeAws_json1_1DescribeInstancePatchStatesCommand = exports.serializeAws_json1_1DescribeInstancePatchesCommand = exports.serializeAws_json1_1DescribeInstanceInformationCommand = exports.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = exports.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = exports.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = exports.serializeAws_json1_1DescribeDocumentPermissionCommand = exports.serializeAws_json1_1DescribeDocumentCommand = exports.serializeAws_json1_1DescribeAvailablePatchesCommand = exports.serializeAws_json1_1DescribeAutomationStepExecutionsCommand = exports.serializeAws_json1_1DescribeAutomationExecutionsCommand = exports.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = exports.serializeAws_json1_1DescribeAssociationExecutionsCommand = exports.serializeAws_json1_1DescribeAssociationCommand = exports.serializeAws_json1_1DescribeActivationsCommand = exports.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = exports.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = exports.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1DeregisterManagedInstanceCommand = exports.serializeAws_json1_1DeleteResourcePolicyCommand = exports.serializeAws_json1_1DeleteResourceDataSyncCommand = exports.serializeAws_json1_1DeletePatchBaselineCommand = exports.serializeAws_json1_1DeleteParametersCommand = exports.serializeAws_json1_1DeleteParameterCommand = exports.serializeAws_json1_1DeleteOpsMetadataCommand = exports.serializeAws_json1_1DeleteMaintenanceWindowCommand = exports.serializeAws_json1_1DeleteInventoryCommand = exports.serializeAws_json1_1DeleteDocumentCommand = exports.serializeAws_json1_1DeleteAssociationCommand = exports.serializeAws_json1_1DeleteActivationCommand = exports.serializeAws_json1_1CreateResourceDataSyncCommand = exports.serializeAws_json1_1CreatePatchBaselineCommand = exports.serializeAws_json1_1CreateOpsMetadataCommand = exports.serializeAws_json1_1CreateOpsItemCommand = exports.serializeAws_json1_1CreateMaintenanceWindowCommand = exports.serializeAws_json1_1CreateDocumentCommand = exports.serializeAws_json1_1CreateAssociationBatchCommand = exports.serializeAws_json1_1CreateAssociationCommand = exports.serializeAws_json1_1CreateActivationCommand = exports.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = exports.serializeAws_json1_1CancelCommandCommand = exports.serializeAws_json1_1AssociateOpsItemRelatedItemCommand = exports.serializeAws_json1_1AddTagsToResourceCommand = void 0;
    exports.serializeAws_json1_1ListOpsMetadataCommand = exports.serializeAws_json1_1ListOpsItemRelatedItemsCommand = exports.serializeAws_json1_1ListOpsItemEventsCommand = exports.serializeAws_json1_1ListInventoryEntriesCommand = exports.serializeAws_json1_1ListDocumentVersionsCommand = exports.serializeAws_json1_1ListDocumentsCommand = exports.serializeAws_json1_1ListDocumentMetadataHistoryCommand = exports.serializeAws_json1_1ListComplianceSummariesCommand = exports.serializeAws_json1_1ListComplianceItemsCommand = exports.serializeAws_json1_1ListCommandsCommand = exports.serializeAws_json1_1ListCommandInvocationsCommand = exports.serializeAws_json1_1ListAssociationVersionsCommand = exports.serializeAws_json1_1ListAssociationsCommand = exports.serializeAws_json1_1LabelParameterVersionCommand = exports.serializeAws_json1_1GetServiceSettingCommand = exports.serializeAws_json1_1GetResourcePoliciesCommand = exports.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1GetPatchBaselineCommand = exports.serializeAws_json1_1GetParametersByPathCommand = exports.serializeAws_json1_1GetParametersCommand = exports.serializeAws_json1_1GetParameterHistoryCommand = exports.serializeAws_json1_1GetParameterCommand = exports.serializeAws_json1_1GetOpsSummaryCommand = exports.serializeAws_json1_1GetOpsMetadataCommand = exports.serializeAws_json1_1GetOpsItemCommand = exports.serializeAws_json1_1GetMaintenanceWindowTaskCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = exports.serializeAws_json1_1GetMaintenanceWindowExecutionCommand = exports.serializeAws_json1_1GetMaintenanceWindowCommand = exports.serializeAws_json1_1GetInventorySchemaCommand = exports.serializeAws_json1_1GetInventoryCommand = exports.serializeAws_json1_1GetDocumentCommand = exports.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = exports.serializeAws_json1_1GetDefaultPatchBaselineCommand = exports.serializeAws_json1_1GetConnectionStatusCommand = exports.serializeAws_json1_1GetCommandInvocationCommand = exports.serializeAws_json1_1GetCalendarStateCommand = exports.serializeAws_json1_1GetAutomationExecutionCommand = exports.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = exports.serializeAws_json1_1DescribeSessionsCommand = exports.serializeAws_json1_1DescribePatchPropertiesCommand = exports.serializeAws_json1_1DescribePatchGroupStateCommand = exports.serializeAws_json1_1DescribePatchGroupsCommand = exports.serializeAws_json1_1DescribePatchBaselinesCommand = exports.serializeAws_json1_1DescribeParametersCommand = exports.serializeAws_json1_1DescribeOpsItemsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = exports.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = void 0;
    exports.deserializeAws_json1_1CreatePatchBaselineCommand = exports.deserializeAws_json1_1CreateOpsMetadataCommand = exports.deserializeAws_json1_1CreateOpsItemCommand = exports.deserializeAws_json1_1CreateMaintenanceWindowCommand = exports.deserializeAws_json1_1CreateDocumentCommand = exports.deserializeAws_json1_1CreateAssociationBatchCommand = exports.deserializeAws_json1_1CreateAssociationCommand = exports.deserializeAws_json1_1CreateActivationCommand = exports.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = exports.deserializeAws_json1_1CancelCommandCommand = exports.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = exports.deserializeAws_json1_1AddTagsToResourceCommand = exports.serializeAws_json1_1UpdateServiceSettingCommand = exports.serializeAws_json1_1UpdateResourceDataSyncCommand = exports.serializeAws_json1_1UpdatePatchBaselineCommand = exports.serializeAws_json1_1UpdateOpsMetadataCommand = exports.serializeAws_json1_1UpdateOpsItemCommand = exports.serializeAws_json1_1UpdateManagedInstanceRoleCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = exports.serializeAws_json1_1UpdateMaintenanceWindowCommand = exports.serializeAws_json1_1UpdateDocumentMetadataCommand = exports.serializeAws_json1_1UpdateDocumentDefaultVersionCommand = exports.serializeAws_json1_1UpdateDocumentCommand = exports.serializeAws_json1_1UpdateAssociationStatusCommand = exports.serializeAws_json1_1UpdateAssociationCommand = exports.serializeAws_json1_1UnlabelParameterVersionCommand = exports.serializeAws_json1_1TerminateSessionCommand = exports.serializeAws_json1_1StopAutomationExecutionCommand = exports.serializeAws_json1_1StartSessionCommand = exports.serializeAws_json1_1StartChangeRequestExecutionCommand = exports.serializeAws_json1_1StartAutomationExecutionCommand = exports.serializeAws_json1_1StartAssociationsOnceCommand = exports.serializeAws_json1_1SendCommandCommand = exports.serializeAws_json1_1SendAutomationSignalCommand = exports.serializeAws_json1_1ResumeSessionCommand = exports.serializeAws_json1_1ResetServiceSettingCommand = exports.serializeAws_json1_1RemoveTagsFromResourceCommand = exports.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = exports.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = exports.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = exports.serializeAws_json1_1RegisterDefaultPatchBaselineCommand = exports.serializeAws_json1_1PutResourcePolicyCommand = exports.serializeAws_json1_1PutParameterCommand = exports.serializeAws_json1_1PutInventoryCommand = exports.serializeAws_json1_1PutComplianceItemsCommand = exports.serializeAws_json1_1ModifyDocumentPermissionCommand = exports.serializeAws_json1_1ListTagsForResourceCommand = exports.serializeAws_json1_1ListResourceDataSyncCommand = exports.serializeAws_json1_1ListResourceComplianceSummariesCommand = void 0;
    exports.deserializeAws_json1_1GetAutomationExecutionCommand = exports.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = exports.deserializeAws_json1_1DescribeSessionsCommand = exports.deserializeAws_json1_1DescribePatchPropertiesCommand = exports.deserializeAws_json1_1DescribePatchGroupStateCommand = exports.deserializeAws_json1_1DescribePatchGroupsCommand = exports.deserializeAws_json1_1DescribePatchBaselinesCommand = exports.deserializeAws_json1_1DescribeParametersCommand = exports.deserializeAws_json1_1DescribeOpsItemsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = exports.deserializeAws_json1_1DescribeInventoryDeletionsCommand = exports.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = exports.deserializeAws_json1_1DescribeInstancePatchStatesCommand = exports.deserializeAws_json1_1DescribeInstancePatchesCommand = exports.deserializeAws_json1_1DescribeInstanceInformationCommand = exports.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = exports.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = exports.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = exports.deserializeAws_json1_1DescribeDocumentPermissionCommand = exports.deserializeAws_json1_1DescribeDocumentCommand = exports.deserializeAws_json1_1DescribeAvailablePatchesCommand = exports.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = exports.deserializeAws_json1_1DescribeAutomationExecutionsCommand = exports.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = exports.deserializeAws_json1_1DescribeAssociationExecutionsCommand = exports.deserializeAws_json1_1DescribeAssociationCommand = exports.deserializeAws_json1_1DescribeActivationsCommand = exports.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = exports.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = exports.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1DeregisterManagedInstanceCommand = exports.deserializeAws_json1_1DeleteResourcePolicyCommand = exports.deserializeAws_json1_1DeleteResourceDataSyncCommand = exports.deserializeAws_json1_1DeletePatchBaselineCommand = exports.deserializeAws_json1_1DeleteParametersCommand = exports.deserializeAws_json1_1DeleteParameterCommand = exports.deserializeAws_json1_1DeleteOpsMetadataCommand = exports.deserializeAws_json1_1DeleteMaintenanceWindowCommand = exports.deserializeAws_json1_1DeleteInventoryCommand = exports.deserializeAws_json1_1DeleteDocumentCommand = exports.deserializeAws_json1_1DeleteAssociationCommand = exports.deserializeAws_json1_1DeleteActivationCommand = exports.deserializeAws_json1_1CreateResourceDataSyncCommand = void 0;
    exports.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = exports.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = exports.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = exports.deserializeAws_json1_1PutResourcePolicyCommand = exports.deserializeAws_json1_1PutParameterCommand = exports.deserializeAws_json1_1PutInventoryCommand = exports.deserializeAws_json1_1PutComplianceItemsCommand = exports.deserializeAws_json1_1ModifyDocumentPermissionCommand = exports.deserializeAws_json1_1ListTagsForResourceCommand = exports.deserializeAws_json1_1ListResourceDataSyncCommand = exports.deserializeAws_json1_1ListResourceComplianceSummariesCommand = exports.deserializeAws_json1_1ListOpsMetadataCommand = exports.deserializeAws_json1_1ListOpsItemRelatedItemsCommand = exports.deserializeAws_json1_1ListOpsItemEventsCommand = exports.deserializeAws_json1_1ListInventoryEntriesCommand = exports.deserializeAws_json1_1ListDocumentVersionsCommand = exports.deserializeAws_json1_1ListDocumentsCommand = exports.deserializeAws_json1_1ListDocumentMetadataHistoryCommand = exports.deserializeAws_json1_1ListComplianceSummariesCommand = exports.deserializeAws_json1_1ListComplianceItemsCommand = exports.deserializeAws_json1_1ListCommandsCommand = exports.deserializeAws_json1_1ListCommandInvocationsCommand = exports.deserializeAws_json1_1ListAssociationVersionsCommand = exports.deserializeAws_json1_1ListAssociationsCommand = exports.deserializeAws_json1_1LabelParameterVersionCommand = exports.deserializeAws_json1_1GetServiceSettingCommand = exports.deserializeAws_json1_1GetResourcePoliciesCommand = exports.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = exports.deserializeAws_json1_1GetPatchBaselineCommand = exports.deserializeAws_json1_1GetParametersByPathCommand = exports.deserializeAws_json1_1GetParametersCommand = exports.deserializeAws_json1_1GetParameterHistoryCommand = exports.deserializeAws_json1_1GetParameterCommand = exports.deserializeAws_json1_1GetOpsSummaryCommand = exports.deserializeAws_json1_1GetOpsMetadataCommand = exports.deserializeAws_json1_1GetOpsItemCommand = exports.deserializeAws_json1_1GetMaintenanceWindowTaskCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = exports.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = exports.deserializeAws_json1_1GetMaintenanceWindowCommand = exports.deserializeAws_json1_1GetInventorySchemaCommand = exports.deserializeAws_json1_1GetInventoryCommand = exports.deserializeAws_json1_1GetDocumentCommand = exports.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = exports.deserializeAws_json1_1GetDefaultPatchBaselineCommand = exports.deserializeAws_json1_1GetConnectionStatusCommand = exports.deserializeAws_json1_1GetCommandInvocationCommand = exports.deserializeAws_json1_1GetCalendarStateCommand = void 0;
    exports.deserializeAws_json1_1UpdateServiceSettingCommand = exports.deserializeAws_json1_1UpdateResourceDataSyncCommand = exports.deserializeAws_json1_1UpdatePatchBaselineCommand = exports.deserializeAws_json1_1UpdateOpsMetadataCommand = exports.deserializeAws_json1_1UpdateOpsItemCommand = exports.deserializeAws_json1_1UpdateManagedInstanceRoleCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = exports.deserializeAws_json1_1UpdateMaintenanceWindowCommand = exports.deserializeAws_json1_1UpdateDocumentMetadataCommand = exports.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = exports.deserializeAws_json1_1UpdateDocumentCommand = exports.deserializeAws_json1_1UpdateAssociationStatusCommand = exports.deserializeAws_json1_1UpdateAssociationCommand = exports.deserializeAws_json1_1UnlabelParameterVersionCommand = exports.deserializeAws_json1_1TerminateSessionCommand = exports.deserializeAws_json1_1StopAutomationExecutionCommand = exports.deserializeAws_json1_1StartSessionCommand = exports.deserializeAws_json1_1StartChangeRequestExecutionCommand = exports.deserializeAws_json1_1StartAutomationExecutionCommand = exports.deserializeAws_json1_1StartAssociationsOnceCommand = exports.deserializeAws_json1_1SendCommandCommand = exports.deserializeAws_json1_1SendAutomationSignalCommand = exports.deserializeAws_json1_1ResumeSessionCommand = exports.deserializeAws_json1_1ResetServiceSettingCommand = exports.deserializeAws_json1_1RemoveTagsFromResourceCommand = void 0;
    var protocol_http_1 = require_dist_cjs9();
    var smithy_client_1 = require_dist_cjs8();
    var uuid_1 = require_dist();
    var models_0_1 = require_models_05();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var SSMServiceException_1 = require_SSMServiceException();
    var serializeAws_json1_1AddTagsToResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.AddTagsToResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AddTagsToResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1AddTagsToResourceCommand = serializeAws_json1_1AddTagsToResourceCommand;
    var serializeAws_json1_1AssociateOpsItemRelatedItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.AssociateOpsItemRelatedItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1AssociateOpsItemRelatedItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1AssociateOpsItemRelatedItemCommand = serializeAws_json1_1AssociateOpsItemRelatedItemCommand;
    var serializeAws_json1_1CancelCommandCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CancelCommand"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelCommandRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CancelCommandCommand = serializeAws_json1_1CancelCommandCommand;
    var serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CancelMaintenanceWindowExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CancelMaintenanceWindowExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand = serializeAws_json1_1CancelMaintenanceWindowExecutionCommand;
    var serializeAws_json1_1CreateActivationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateActivation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateActivationCommand = serializeAws_json1_1CreateActivationCommand;
    var serializeAws_json1_1CreateAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateAssociationCommand = serializeAws_json1_1CreateAssociationCommand;
    var serializeAws_json1_1CreateAssociationBatchCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateAssociationBatch"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateAssociationBatchRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateAssociationBatchCommand = serializeAws_json1_1CreateAssociationBatchCommand;
    var serializeAws_json1_1CreateDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateDocumentCommand = serializeAws_json1_1CreateDocumentCommand;
    var serializeAws_json1_1CreateMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateMaintenanceWindowCommand = serializeAws_json1_1CreateMaintenanceWindowCommand;
    var serializeAws_json1_1CreateOpsItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateOpsItemCommand = serializeAws_json1_1CreateOpsItemCommand;
    var serializeAws_json1_1CreateOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateOpsMetadataCommand = serializeAws_json1_1CreateOpsMetadataCommand;
    var serializeAws_json1_1CreatePatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreatePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreatePatchBaselineCommand = serializeAws_json1_1CreatePatchBaselineCommand;
    var serializeAws_json1_1CreateResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.CreateResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1CreateResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1CreateResourceDataSyncCommand = serializeAws_json1_1CreateResourceDataSyncCommand;
    var serializeAws_json1_1DeleteActivationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteActivation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteActivationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteActivationCommand = serializeAws_json1_1DeleteActivationCommand;
    var serializeAws_json1_1DeleteAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteAssociationCommand = serializeAws_json1_1DeleteAssociationCommand;
    var serializeAws_json1_1DeleteDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteDocumentCommand = serializeAws_json1_1DeleteDocumentCommand;
    var serializeAws_json1_1DeleteInventoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteInventoryCommand = serializeAws_json1_1DeleteInventoryCommand;
    var serializeAws_json1_1DeleteMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteMaintenanceWindowCommand = serializeAws_json1_1DeleteMaintenanceWindowCommand;
    var serializeAws_json1_1DeleteOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteOpsMetadataCommand = serializeAws_json1_1DeleteOpsMetadataCommand;
    var serializeAws_json1_1DeleteParameterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteParameterCommand = serializeAws_json1_1DeleteParameterCommand;
    var serializeAws_json1_1DeleteParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteParametersCommand = serializeAws_json1_1DeleteParametersCommand;
    var serializeAws_json1_1DeletePatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeletePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeletePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeletePatchBaselineCommand = serializeAws_json1_1DeletePatchBaselineCommand;
    var serializeAws_json1_1DeleteResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteResourceDataSyncCommand = serializeAws_json1_1DeleteResourceDataSyncCommand;
    var serializeAws_json1_1DeleteResourcePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeleteResourcePolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeleteResourcePolicyCommand = serializeAws_json1_1DeleteResourcePolicyCommand;
    var serializeAws_json1_1DeregisterManagedInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterManagedInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterManagedInstanceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterManagedInstanceCommand = serializeAws_json1_1DeregisterManagedInstanceCommand;
    var serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterTargetFromMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand;
    var serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DeregisterTaskFromMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand;
    var serializeAws_json1_1DescribeActivationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeActivations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeActivationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeActivationsCommand = serializeAws_json1_1DescribeActivationsCommand;
    var serializeAws_json1_1DescribeAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAssociationCommand = serializeAws_json1_1DescribeAssociationCommand;
    var serializeAws_json1_1DescribeAssociationExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociationExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAssociationExecutionsCommand = serializeAws_json1_1DescribeAssociationExecutionsCommand;
    var serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAssociationExecutionTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAssociationExecutionTargetsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand = serializeAws_json1_1DescribeAssociationExecutionTargetsCommand;
    var serializeAws_json1_1DescribeAutomationExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAutomationExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAutomationExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAutomationExecutionsCommand = serializeAws_json1_1DescribeAutomationExecutionsCommand;
    var serializeAws_json1_1DescribeAutomationStepExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAutomationStepExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAutomationStepExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAutomationStepExecutionsCommand = serializeAws_json1_1DescribeAutomationStepExecutionsCommand;
    var serializeAws_json1_1DescribeAvailablePatchesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeAvailablePatches"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeAvailablePatchesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeAvailablePatchesCommand = serializeAws_json1_1DescribeAvailablePatchesCommand;
    var serializeAws_json1_1DescribeDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeDocumentCommand = serializeAws_json1_1DescribeDocumentCommand;
    var serializeAws_json1_1DescribeDocumentPermissionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeDocumentPermission"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeDocumentPermissionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeDocumentPermissionCommand = serializeAws_json1_1DescribeDocumentPermissionCommand;
    var serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeEffectiveInstanceAssociations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand;
    var serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeEffectivePatchesForPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand;
    var serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstanceAssociationsStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstanceAssociationsStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand = serializeAws_json1_1DescribeInstanceAssociationsStatusCommand;
    var serializeAws_json1_1DescribeInstanceInformationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstanceInformation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstanceInformationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstanceInformationCommand = serializeAws_json1_1DescribeInstanceInformationCommand;
    var serializeAws_json1_1DescribeInstancePatchesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatches"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstancePatchesCommand = serializeAws_json1_1DescribeInstancePatchesCommand;
    var serializeAws_json1_1DescribeInstancePatchStatesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatchStates"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchStatesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstancePatchStatesCommand = serializeAws_json1_1DescribeInstancePatchStatesCommand;
    var serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInstancePatchStatesForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand;
    var serializeAws_json1_1DescribeInventoryDeletionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeInventoryDeletions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeInventoryDeletionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeInventoryDeletionsCommand = serializeAws_json1_1DescribeInventoryDeletionsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowExecutionTasks"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindows"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowsCommand = serializeAws_json1_1DescribeMaintenanceWindowsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowSchedule"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowsForTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowTargets"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand;
    var serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeMaintenanceWindowTasks"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeMaintenanceWindowTasksRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand = serializeAws_json1_1DescribeMaintenanceWindowTasksCommand;
    var serializeAws_json1_1DescribeOpsItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeOpsItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeOpsItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeOpsItemsCommand = serializeAws_json1_1DescribeOpsItemsCommand;
    var serializeAws_json1_1DescribeParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeParametersCommand = serializeAws_json1_1DescribeParametersCommand;
    var serializeAws_json1_1DescribePatchBaselinesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchBaselines"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchBaselinesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchBaselinesCommand = serializeAws_json1_1DescribePatchBaselinesCommand;
    var serializeAws_json1_1DescribePatchGroupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchGroups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchGroupsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchGroupsCommand = serializeAws_json1_1DescribePatchGroupsCommand;
    var serializeAws_json1_1DescribePatchGroupStateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchGroupState"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchGroupStateRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchGroupStateCommand = serializeAws_json1_1DescribePatchGroupStateCommand;
    var serializeAws_json1_1DescribePatchPropertiesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribePatchProperties"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribePatchPropertiesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribePatchPropertiesCommand = serializeAws_json1_1DescribePatchPropertiesCommand;
    var serializeAws_json1_1DescribeSessionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DescribeSessions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DescribeSessionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DescribeSessionsCommand = serializeAws_json1_1DescribeSessionsCommand;
    var serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.DisassociateOpsItemRelatedItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1DisassociateOpsItemRelatedItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand = serializeAws_json1_1DisassociateOpsItemRelatedItemCommand;
    var serializeAws_json1_1GetAutomationExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetAutomationExecutionCommand = serializeAws_json1_1GetAutomationExecutionCommand;
    var serializeAws_json1_1GetCalendarStateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetCalendarState"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetCalendarStateRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetCalendarStateCommand = serializeAws_json1_1GetCalendarStateCommand;
    var serializeAws_json1_1GetCommandInvocationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetCommandInvocation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetCommandInvocationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetCommandInvocationCommand = serializeAws_json1_1GetCommandInvocationCommand;
    var serializeAws_json1_1GetConnectionStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetConnectionStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetConnectionStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetConnectionStatusCommand = serializeAws_json1_1GetConnectionStatusCommand;
    var serializeAws_json1_1GetDefaultPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDefaultPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDefaultPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetDefaultPatchBaselineCommand = serializeAws_json1_1GetDefaultPatchBaselineCommand;
    var serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDeployablePatchSnapshotForInstance"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand;
    var serializeAws_json1_1GetDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetDocumentCommand = serializeAws_json1_1GetDocumentCommand;
    var serializeAws_json1_1GetInventoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetInventoryCommand = serializeAws_json1_1GetInventoryCommand;
    var serializeAws_json1_1GetInventorySchemaCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetInventorySchema"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetInventorySchemaRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetInventorySchemaCommand = serializeAws_json1_1GetInventorySchemaCommand;
    var serializeAws_json1_1GetMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowCommand = serializeAws_json1_1GetMaintenanceWindowCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionCommand = serializeAws_json1_1GetMaintenanceWindowExecutionCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecutionTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand;
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand;
    var serializeAws_json1_1GetMaintenanceWindowTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetMaintenanceWindowTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetMaintenanceWindowTaskCommand = serializeAws_json1_1GetMaintenanceWindowTaskCommand;
    var serializeAws_json1_1GetOpsItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetOpsItemCommand = serializeAws_json1_1GetOpsItemCommand;
    var serializeAws_json1_1GetOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetOpsMetadataCommand = serializeAws_json1_1GetOpsMetadataCommand;
    var serializeAws_json1_1GetOpsSummaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetOpsSummary"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetOpsSummaryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetOpsSummaryCommand = serializeAws_json1_1GetOpsSummaryCommand;
    var serializeAws_json1_1GetParameterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParameterCommand = serializeAws_json1_1GetParameterCommand;
    var serializeAws_json1_1GetParameterHistoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameterHistory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParameterHistoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParameterHistoryCommand = serializeAws_json1_1GetParameterHistoryCommand;
    var serializeAws_json1_1GetParametersCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParameters"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParametersCommand = serializeAws_json1_1GetParametersCommand;
    var serializeAws_json1_1GetParametersByPathCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetParametersByPath"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetParametersByPathRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetParametersByPathCommand = serializeAws_json1_1GetParametersByPathCommand;
    var serializeAws_json1_1GetPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetPatchBaselineCommand = serializeAws_json1_1GetPatchBaselineCommand;
    var serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand = serializeAws_json1_1GetPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1GetResourcePoliciesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetResourcePolicies"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetResourcePoliciesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetResourcePoliciesCommand = serializeAws_json1_1GetResourcePoliciesCommand;
    var serializeAws_json1_1GetServiceSettingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.GetServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1GetServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1GetServiceSettingCommand = serializeAws_json1_1GetServiceSettingCommand;
    var serializeAws_json1_1LabelParameterVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.LabelParameterVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1LabelParameterVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1LabelParameterVersionCommand = serializeAws_json1_1LabelParameterVersionCommand;
    var serializeAws_json1_1ListAssociationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListAssociations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAssociationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListAssociationsCommand = serializeAws_json1_1ListAssociationsCommand;
    var serializeAws_json1_1ListAssociationVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListAssociationVersions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListAssociationVersionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListAssociationVersionsCommand = serializeAws_json1_1ListAssociationVersionsCommand;
    var serializeAws_json1_1ListCommandInvocationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListCommandInvocations"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListCommandInvocationsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListCommandInvocationsCommand = serializeAws_json1_1ListCommandInvocationsCommand;
    var serializeAws_json1_1ListCommandsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListCommands"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListCommandsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListCommandsCommand = serializeAws_json1_1ListCommandsCommand;
    var serializeAws_json1_1ListComplianceItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListComplianceItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListComplianceItemsCommand = serializeAws_json1_1ListComplianceItemsCommand;
    var serializeAws_json1_1ListComplianceSummariesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListComplianceSummaries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListComplianceSummariesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListComplianceSummariesCommand = serializeAws_json1_1ListComplianceSummariesCommand;
    var serializeAws_json1_1ListDocumentMetadataHistoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocumentMetadataHistory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentMetadataHistoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListDocumentMetadataHistoryCommand = serializeAws_json1_1ListDocumentMetadataHistoryCommand;
    var serializeAws_json1_1ListDocumentsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocuments"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListDocumentsCommand = serializeAws_json1_1ListDocumentsCommand;
    var serializeAws_json1_1ListDocumentVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListDocumentVersions"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListDocumentVersionsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListDocumentVersionsCommand = serializeAws_json1_1ListDocumentVersionsCommand;
    var serializeAws_json1_1ListInventoryEntriesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListInventoryEntries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListInventoryEntriesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListInventoryEntriesCommand = serializeAws_json1_1ListInventoryEntriesCommand;
    var serializeAws_json1_1ListOpsItemEventsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsItemEvents"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsItemEventsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListOpsItemEventsCommand = serializeAws_json1_1ListOpsItemEventsCommand;
    var serializeAws_json1_1ListOpsItemRelatedItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsItemRelatedItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsItemRelatedItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListOpsItemRelatedItemsCommand = serializeAws_json1_1ListOpsItemRelatedItemsCommand;
    var serializeAws_json1_1ListOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListOpsMetadataCommand = serializeAws_json1_1ListOpsMetadataCommand;
    var serializeAws_json1_1ListResourceComplianceSummariesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListResourceComplianceSummaries"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceComplianceSummariesRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListResourceComplianceSummariesCommand = serializeAws_json1_1ListResourceComplianceSummariesCommand;
    var serializeAws_json1_1ListResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListResourceDataSyncCommand = serializeAws_json1_1ListResourceDataSyncCommand;
    var serializeAws_json1_1ListTagsForResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ListTagsForResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ListTagsForResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ListTagsForResourceCommand = serializeAws_json1_1ListTagsForResourceCommand;
    var serializeAws_json1_1ModifyDocumentPermissionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ModifyDocumentPermission"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ModifyDocumentPermissionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ModifyDocumentPermissionCommand = serializeAws_json1_1ModifyDocumentPermissionCommand;
    var serializeAws_json1_1PutComplianceItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutComplianceItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutComplianceItemsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutComplianceItemsCommand = serializeAws_json1_1PutComplianceItemsCommand;
    var serializeAws_json1_1PutInventoryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutInventory"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutInventoryRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutInventoryCommand = serializeAws_json1_1PutInventoryCommand;
    var serializeAws_json1_1PutParameterCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutParameter"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutParameterRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutParameterCommand = serializeAws_json1_1PutParameterCommand;
    var serializeAws_json1_1PutResourcePolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.PutResourcePolicy"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1PutResourcePolicyRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1PutResourcePolicyCommand = serializeAws_json1_1PutResourcePolicyCommand;
    var serializeAws_json1_1RegisterDefaultPatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterDefaultPatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterDefaultPatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterDefaultPatchBaselineCommand = serializeAws_json1_1RegisterDefaultPatchBaselineCommand;
    var serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterPatchBaselineForPatchGroup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand;
    var serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterTargetWithMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand;
    var serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RegisterTaskWithMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand;
    var serializeAws_json1_1RemoveTagsFromResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.RemoveTagsFromResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1RemoveTagsFromResourceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1RemoveTagsFromResourceCommand = serializeAws_json1_1RemoveTagsFromResourceCommand;
    var serializeAws_json1_1ResetServiceSettingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ResetServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ResetServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ResetServiceSettingCommand = serializeAws_json1_1ResetServiceSettingCommand;
    var serializeAws_json1_1ResumeSessionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.ResumeSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1ResumeSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1ResumeSessionCommand = serializeAws_json1_1ResumeSessionCommand;
    var serializeAws_json1_1SendAutomationSignalCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.SendAutomationSignal"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SendAutomationSignalRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1SendAutomationSignalCommand = serializeAws_json1_1SendAutomationSignalCommand;
    var serializeAws_json1_1SendCommandCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.SendCommand"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1SendCommandRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1SendCommandCommand = serializeAws_json1_1SendCommandCommand;
    var serializeAws_json1_1StartAssociationsOnceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartAssociationsOnce"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartAssociationsOnceRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartAssociationsOnceCommand = serializeAws_json1_1StartAssociationsOnceCommand;
    var serializeAws_json1_1StartAutomationExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartAutomationExecutionCommand = serializeAws_json1_1StartAutomationExecutionCommand;
    var serializeAws_json1_1StartChangeRequestExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartChangeRequestExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartChangeRequestExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartChangeRequestExecutionCommand = serializeAws_json1_1StartChangeRequestExecutionCommand;
    var serializeAws_json1_1StartSessionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StartSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StartSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StartSessionCommand = serializeAws_json1_1StartSessionCommand;
    var serializeAws_json1_1StopAutomationExecutionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.StopAutomationExecution"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1StopAutomationExecutionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1StopAutomationExecutionCommand = serializeAws_json1_1StopAutomationExecutionCommand;
    var serializeAws_json1_1TerminateSessionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.TerminateSession"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1TerminateSessionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1TerminateSessionCommand = serializeAws_json1_1TerminateSessionCommand;
    var serializeAws_json1_1UnlabelParameterVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UnlabelParameterVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UnlabelParameterVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UnlabelParameterVersionCommand = serializeAws_json1_1UnlabelParameterVersionCommand;
    var serializeAws_json1_1UpdateAssociationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateAssociation"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAssociationRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateAssociationCommand = serializeAws_json1_1UpdateAssociationCommand;
    var serializeAws_json1_1UpdateAssociationStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateAssociationStatus"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateAssociationStatusRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateAssociationStatusCommand = serializeAws_json1_1UpdateAssociationStatusCommand;
    var serializeAws_json1_1UpdateDocumentCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocument"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateDocumentCommand = serializeAws_json1_1UpdateDocumentCommand;
    var serializeAws_json1_1UpdateDocumentDefaultVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocumentDefaultVersion"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentDefaultVersionRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateDocumentDefaultVersionCommand = serializeAws_json1_1UpdateDocumentDefaultVersionCommand;
    var serializeAws_json1_1UpdateDocumentMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateDocumentMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateDocumentMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateDocumentMetadataCommand = serializeAws_json1_1UpdateDocumentMetadataCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindow"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateMaintenanceWindowCommand = serializeAws_json1_1UpdateMaintenanceWindowCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindowTarget"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowTargetRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand = serializeAws_json1_1UpdateMaintenanceWindowTargetCommand;
    var serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateMaintenanceWindowTask"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateMaintenanceWindowTaskRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand = serializeAws_json1_1UpdateMaintenanceWindowTaskCommand;
    var serializeAws_json1_1UpdateManagedInstanceRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateManagedInstanceRole"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateManagedInstanceRoleRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateManagedInstanceRoleCommand = serializeAws_json1_1UpdateManagedInstanceRoleCommand;
    var serializeAws_json1_1UpdateOpsItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateOpsItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateOpsItemRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateOpsItemCommand = serializeAws_json1_1UpdateOpsItemCommand;
    var serializeAws_json1_1UpdateOpsMetadataCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateOpsMetadata"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateOpsMetadataRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateOpsMetadataCommand = serializeAws_json1_1UpdateOpsMetadataCommand;
    var serializeAws_json1_1UpdatePatchBaselineCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdatePatchBaseline"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdatePatchBaselineRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdatePatchBaselineCommand = serializeAws_json1_1UpdatePatchBaselineCommand;
    var serializeAws_json1_1UpdateResourceDataSyncCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateResourceDataSync"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateResourceDataSyncRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateResourceDataSyncCommand = serializeAws_json1_1UpdateResourceDataSyncCommand;
    var serializeAws_json1_1UpdateServiceSettingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AmazonSSM.UpdateServiceSetting"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_1UpdateServiceSettingRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_1UpdateServiceSettingCommand = serializeAws_json1_1UpdateServiceSettingCommand;
    var deserializeAws_json1_1AddTagsToResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AddTagsToResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1AddTagsToResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1AddTagsToResourceCommand = deserializeAws_json1_1AddTagsToResourceCommand;
    var deserializeAws_json1_1AddTagsToResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "TooManyTagsError":
        case "com.amazonaws.ssm#TooManyTagsError":
          throw await deserializeAws_json1_1TooManyTagsErrorResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1AssociateOpsItemRelatedItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand = deserializeAws_json1_1AssociateOpsItemRelatedItemCommand;
    var deserializeAws_json1_1AssociateOpsItemRelatedItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        case "OpsItemRelatedItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CancelCommandCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CancelCommandCommand = deserializeAws_json1_1CancelCommandCommand;
    var deserializeAws_json1_1CancelCommandCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CancelMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand = deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand;
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateActivationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateActivationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateActivationCommand = deserializeAws_json1_1CreateActivationCommand;
    var deserializeAws_json1_1CreateActivationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateAssociationCommand = deserializeAws_json1_1CreateAssociationCommand;
    var deserializeAws_json1_1CreateAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationAlreadyExists":
        case "com.amazonaws.ssm#AssociationAlreadyExists":
          throw await deserializeAws_json1_1AssociationAlreadyExistsResponse(parsedOutput, context);
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await deserializeAws_json1_1AssociationLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTag":
        case "com.amazonaws.ssm#InvalidTag":
          throw await deserializeAws_json1_1InvalidTagResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateAssociationBatchCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateAssociationBatchCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateAssociationBatchResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateAssociationBatchCommand = deserializeAws_json1_1CreateAssociationBatchCommand;
    var deserializeAws_json1_1CreateAssociationBatchCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationLimitExceeded":
        case "com.amazonaws.ssm#AssociationLimitExceeded":
          throw await deserializeAws_json1_1AssociationLimitExceededResponse(parsedOutput, context);
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateDocumentCommand = deserializeAws_json1_1CreateDocumentCommand;
    var deserializeAws_json1_1CreateDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentAlreadyExists":
        case "com.amazonaws.ssm#DocumentAlreadyExists":
          throw await deserializeAws_json1_1DocumentAlreadyExistsResponse(parsedOutput, context);
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await deserializeAws_json1_1DocumentLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await deserializeAws_json1_1InvalidDocumentContentResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateMaintenanceWindowCommand = deserializeAws_json1_1CreateMaintenanceWindowCommand;
    var deserializeAws_json1_1CreateMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateOpsItemCommand = deserializeAws_json1_1CreateOpsItemCommand;
    var deserializeAws_json1_1CreateOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await deserializeAws_json1_1OpsItemAccessDeniedExceptionResponse(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateOpsMetadataCommand = deserializeAws_json1_1CreateOpsMetadataCommand;
    var deserializeAws_json1_1CreateOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataAlreadyExistsException":
        case "com.amazonaws.ssm#OpsMetadataAlreadyExistsException":
          throw await deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataLimitExceededException":
          throw await deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreatePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreatePatchBaselineCommand = deserializeAws_json1_1CreatePatchBaselineCommand;
    var deserializeAws_json1_1CreatePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1CreateResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1CreateResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1CreateResourceDataSyncCommand = deserializeAws_json1_1CreateResourceDataSyncCommand;
    var deserializeAws_json1_1CreateResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncAlreadyExistsException":
        case "com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException":
          throw await deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncCountExceededException":
        case "com.amazonaws.ssm#ResourceDataSyncCountExceededException":
          throw await deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteActivationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteActivationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteActivationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteActivationCommand = deserializeAws_json1_1DeleteActivationCommand;
    var deserializeAws_json1_1DeleteActivationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidActivation":
        case "com.amazonaws.ssm#InvalidActivation":
          throw await deserializeAws_json1_1InvalidActivationResponse(parsedOutput, context);
        case "InvalidActivationId":
        case "com.amazonaws.ssm#InvalidActivationId":
          throw await deserializeAws_json1_1InvalidActivationIdResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteAssociationCommand = deserializeAws_json1_1DeleteAssociationCommand;
    var deserializeAws_json1_1DeleteAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteDocumentCommand = deserializeAws_json1_1DeleteDocumentCommand;
    var deserializeAws_json1_1DeleteDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociatedInstances":
        case "com.amazonaws.ssm#AssociatedInstances":
          throw await deserializeAws_json1_1AssociatedInstancesResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteInventoryCommand = deserializeAws_json1_1DeleteInventoryCommand;
    var deserializeAws_json1_1DeleteInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDeleteInventoryParametersException":
        case "com.amazonaws.ssm#InvalidDeleteInventoryParametersException":
          throw await deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse(parsedOutput, context);
        case "InvalidInventoryRequestException":
        case "com.amazonaws.ssm#InvalidInventoryRequestException":
          throw await deserializeAws_json1_1InvalidInventoryRequestExceptionResponse(parsedOutput, context);
        case "InvalidOptionException":
        case "com.amazonaws.ssm#InvalidOptionException":
          throw await deserializeAws_json1_1InvalidOptionExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteMaintenanceWindowCommand = deserializeAws_json1_1DeleteMaintenanceWindowCommand;
    var deserializeAws_json1_1DeleteMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteOpsMetadataCommand = deserializeAws_json1_1DeleteOpsMetadataCommand;
    var deserializeAws_json1_1DeleteOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteParameterCommand = deserializeAws_json1_1DeleteParameterCommand;
    var deserializeAws_json1_1DeleteParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteParametersCommand = deserializeAws_json1_1DeleteParametersCommand;
    var deserializeAws_json1_1DeleteParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeletePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeletePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeletePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeletePatchBaselineCommand = deserializeAws_json1_1DeletePatchBaselineCommand;
    var deserializeAws_json1_1DeletePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.ssm#ResourceInUseException":
          throw await deserializeAws_json1_1ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteResourceDataSyncCommand = deserializeAws_json1_1DeleteResourceDataSyncCommand;
    var deserializeAws_json1_1DeleteResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeleteResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeleteResourcePolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeleteResourcePolicyCommand = deserializeAws_json1_1DeleteResourcePolicyCommand;
    var deserializeAws_json1_1DeleteResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
          throw await deserializeAws_json1_1ResourcePolicyConflictExceptionResponse(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await deserializeAws_json1_1ResourcePolicyInvalidParameterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeregisterManagedInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterManagedInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterManagedInstanceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterManagedInstanceCommand = deserializeAws_json1_1DeregisterManagedInstanceCommand;
    var deserializeAws_json1_1DeregisterManagedInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand = deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand = deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand;
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "TargetInUseException":
        case "com.amazonaws.ssm#TargetInUseException":
          throw await deserializeAws_json1_1TargetInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand = deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand;
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeActivationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeActivationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeActivationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeActivationsCommand = deserializeAws_json1_1DescribeActivationsCommand;
    var deserializeAws_json1_1DescribeActivationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAssociationCommand = deserializeAws_json1_1DescribeAssociationCommand;
    var deserializeAws_json1_1DescribeAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await deserializeAws_json1_1InvalidAssociationVersionResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeAssociationExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAssociationExecutionsCommand = deserializeAws_json1_1DescribeAssociationExecutionsCommand;
    var deserializeAws_json1_1DescribeAssociationExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAssociationExecutionTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand = deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand;
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "AssociationExecutionDoesNotExist":
        case "com.amazonaws.ssm#AssociationExecutionDoesNotExist":
          throw await deserializeAws_json1_1AssociationExecutionDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeAutomationExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutomationExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAutomationExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAutomationExecutionsCommand = deserializeAws_json1_1DescribeAutomationExecutionsCommand;
    var deserializeAws_json1_1DescribeAutomationExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAutomationStepExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand = deserializeAws_json1_1DescribeAutomationStepExecutionsCommand;
    var deserializeAws_json1_1DescribeAutomationStepExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeAvailablePatchesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeAvailablePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeAvailablePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeAvailablePatchesCommand = deserializeAws_json1_1DescribeAvailablePatchesCommand;
    var deserializeAws_json1_1DescribeAvailablePatchesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeDocumentCommand = deserializeAws_json1_1DescribeDocumentCommand;
    var deserializeAws_json1_1DescribeDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeDocumentPermissionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeDocumentPermissionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeDocumentPermissionCommand = deserializeAws_json1_1DescribeDocumentPermissionCommand;
    var deserializeAws_json1_1DescribeDocumentPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await deserializeAws_json1_1InvalidPermissionTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand = deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand;
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand = deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand;
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await deserializeAws_json1_1UnsupportedOperatingSystemResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstanceAssociationsStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand = deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand;
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeInstanceInformationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstanceInformationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstanceInformationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstanceInformationCommand = deserializeAws_json1_1DescribeInstanceInformationCommand;
    var deserializeAws_json1_1DescribeInstanceInformationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidInstanceInformationFilterValue":
        case "com.amazonaws.ssm#InvalidInstanceInformationFilterValue":
          throw await deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeInstancePatchesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstancePatchesCommand = deserializeAws_json1_1DescribeInstancePatchesCommand;
    var deserializeAws_json1_1DescribeInstancePatchesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchStatesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchStatesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstancePatchStatesCommand = deserializeAws_json1_1DescribeInstancePatchStatesCommand;
    var deserializeAws_json1_1DescribeInstancePatchStatesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand = deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand;
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeInventoryDeletionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeInventoryDeletionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeInventoryDeletionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeInventoryDeletionsCommand = deserializeAws_json1_1DescribeInventoryDeletionsCommand;
    var deserializeAws_json1_1DescribeInventoryDeletionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDeletionIdException":
        case "com.amazonaws.ssm#InvalidDeletionIdException":
          throw await deserializeAws_json1_1InvalidDeletionIdExceptionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand = deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowsCommand = deserializeAws_json1_1DescribeMaintenanceWindowsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand = deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand = deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand = deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeMaintenanceWindowTasksResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand = deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand;
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeOpsItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeOpsItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeOpsItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeOpsItemsCommand = deserializeAws_json1_1DescribeOpsItemsCommand;
    var deserializeAws_json1_1DescribeOpsItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeParametersCommand = deserializeAws_json1_1DescribeParametersCommand;
    var deserializeAws_json1_1DescribeParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await deserializeAws_json1_1InvalidFilterOptionResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribePatchBaselinesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchBaselinesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchBaselinesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchBaselinesCommand = deserializeAws_json1_1DescribePatchBaselinesCommand;
    var deserializeAws_json1_1DescribePatchBaselinesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribePatchGroupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchGroupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchGroupsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchGroupsCommand = deserializeAws_json1_1DescribePatchGroupsCommand;
    var deserializeAws_json1_1DescribePatchGroupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribePatchGroupStateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchGroupStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchGroupStateResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchGroupStateCommand = deserializeAws_json1_1DescribePatchGroupStateCommand;
    var deserializeAws_json1_1DescribePatchGroupStateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribePatchPropertiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePatchPropertiesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribePatchPropertiesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribePatchPropertiesCommand = deserializeAws_json1_1DescribePatchPropertiesCommand;
    var deserializeAws_json1_1DescribePatchPropertiesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DescribeSessionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSessionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DescribeSessionsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DescribeSessionsCommand = deserializeAws_json1_1DescribeSessionsCommand;
    var deserializeAws_json1_1DescribeSessionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand = deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand;
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        case "OpsItemRelatedItemAssociationNotFoundException":
        case "com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException":
          throw await deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetAutomationExecutionCommand = deserializeAws_json1_1GetAutomationExecutionCommand;
    var deserializeAws_json1_1GetAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetCalendarStateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCalendarStateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetCalendarStateResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetCalendarStateCommand = deserializeAws_json1_1GetCalendarStateCommand;
    var deserializeAws_json1_1GetCalendarStateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentType":
        case "com.amazonaws.ssm#InvalidDocumentType":
          throw await deserializeAws_json1_1InvalidDocumentTypeResponse(parsedOutput, context);
        case "UnsupportedCalendarException":
        case "com.amazonaws.ssm#UnsupportedCalendarException":
          throw await deserializeAws_json1_1UnsupportedCalendarExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetCommandInvocationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetCommandInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetCommandInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetCommandInvocationCommand = deserializeAws_json1_1GetCommandInvocationCommand;
    var deserializeAws_json1_1GetCommandInvocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidPluginName":
        case "com.amazonaws.ssm#InvalidPluginName":
          throw await deserializeAws_json1_1InvalidPluginNameResponse(parsedOutput, context);
        case "InvocationDoesNotExist":
        case "com.amazonaws.ssm#InvocationDoesNotExist":
          throw await deserializeAws_json1_1InvocationDoesNotExistResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetConnectionStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetConnectionStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetConnectionStatusResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetConnectionStatusCommand = deserializeAws_json1_1GetConnectionStatusCommand;
    var deserializeAws_json1_1GetConnectionStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDefaultPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDefaultPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetDefaultPatchBaselineCommand = deserializeAws_json1_1GetDefaultPatchBaselineCommand;
    var deserializeAws_json1_1GetDefaultPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand = deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand;
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "UnsupportedFeatureRequiredException":
        case "com.amazonaws.ssm#UnsupportedFeatureRequiredException":
          throw await deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse(parsedOutput, context);
        case "UnsupportedOperatingSystem":
        case "com.amazonaws.ssm#UnsupportedOperatingSystem":
          throw await deserializeAws_json1_1UnsupportedOperatingSystemResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetDocumentCommand = deserializeAws_json1_1GetDocumentCommand;
    var deserializeAws_json1_1GetDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetInventoryCommand = deserializeAws_json1_1GetInventoryCommand;
    var deserializeAws_json1_1GetInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await deserializeAws_json1_1InvalidAggregatorExceptionResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInventoryGroupException":
        case "com.amazonaws.ssm#InvalidInventoryGroupException":
          throw await deserializeAws_json1_1InvalidInventoryGroupExceptionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidResultAttributeException":
        case "com.amazonaws.ssm#InvalidResultAttributeException":
          throw await deserializeAws_json1_1InvalidResultAttributeExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetInventorySchemaCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetInventorySchemaCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetInventorySchemaResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetInventorySchemaCommand = deserializeAws_json1_1GetInventorySchemaCommand;
    var deserializeAws_json1_1GetInventorySchemaCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowCommand = deserializeAws_json1_1GetMaintenanceWindowCommand;
    var deserializeAws_json1_1GetMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand = deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand;
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetMaintenanceWindowTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetMaintenanceWindowTaskCommand = deserializeAws_json1_1GetMaintenanceWindowTaskCommand;
    var deserializeAws_json1_1GetMaintenanceWindowTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetOpsItemCommand = deserializeAws_json1_1GetOpsItemCommand;
    var deserializeAws_json1_1GetOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await deserializeAws_json1_1OpsItemAccessDeniedExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetOpsMetadataCommand = deserializeAws_json1_1GetOpsMetadataCommand;
    var deserializeAws_json1_1GetOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetOpsSummaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetOpsSummaryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetOpsSummaryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetOpsSummaryCommand = deserializeAws_json1_1GetOpsSummaryCommand;
    var deserializeAws_json1_1GetOpsSummaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAggregatorException":
        case "com.amazonaws.ssm#InvalidAggregatorException":
          throw await deserializeAws_json1_1InvalidAggregatorExceptionResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParameterCommand = deserializeAws_json1_1GetParameterCommand;
    var deserializeAws_json1_1GetParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetParameterHistoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParameterHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParameterHistoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParameterHistoryCommand = deserializeAws_json1_1GetParameterHistoryCommand;
    var deserializeAws_json1_1GetParameterHistoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetParametersCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParametersCommand = deserializeAws_json1_1GetParametersCommand;
    var deserializeAws_json1_1GetParametersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetParametersByPathCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetParametersByPathCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetParametersByPathResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetParametersByPathCommand = deserializeAws_json1_1GetParametersByPathCommand;
    var deserializeAws_json1_1GetParametersByPathCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidFilterOption":
        case "com.amazonaws.ssm#InvalidFilterOption":
          throw await deserializeAws_json1_1InvalidFilterOptionResponse(parsedOutput, context);
        case "InvalidFilterValue":
        case "com.amazonaws.ssm#InvalidFilterValue":
          throw await deserializeAws_json1_1InvalidFilterValueResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetPatchBaselineCommand = deserializeAws_json1_1GetPatchBaselineCommand;
    var deserializeAws_json1_1GetPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand = deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetResourcePoliciesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetResourcePoliciesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetResourcePoliciesResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetResourcePoliciesCommand = deserializeAws_json1_1GetResourcePoliciesCommand;
    var deserializeAws_json1_1GetResourcePoliciesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await deserializeAws_json1_1ResourcePolicyInvalidParameterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1GetServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1GetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1GetServiceSettingCommand = deserializeAws_json1_1GetServiceSettingCommand;
    var deserializeAws_json1_1GetServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1LabelParameterVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1LabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1LabelParameterVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1LabelParameterVersionCommand = deserializeAws_json1_1LabelParameterVersionCommand;
    var deserializeAws_json1_1LabelParameterVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionLabelLimitExceeded":
        case "com.amazonaws.ssm#ParameterVersionLabelLimitExceeded":
          throw await deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListAssociationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAssociationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListAssociationsCommand = deserializeAws_json1_1ListAssociationsCommand;
    var deserializeAws_json1_1ListAssociationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListAssociationVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListAssociationVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListAssociationVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListAssociationVersionsCommand = deserializeAws_json1_1ListAssociationVersionsCommand;
    var deserializeAws_json1_1ListAssociationVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListCommandInvocationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCommandInvocationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListCommandInvocationsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListCommandInvocationsCommand = deserializeAws_json1_1ListCommandInvocationsCommand;
    var deserializeAws_json1_1ListCommandInvocationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListCommandsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCommandsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListCommandsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListCommandsCommand = deserializeAws_json1_1ListCommandsCommand;
    var deserializeAws_json1_1ListCommandsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidCommandId":
        case "com.amazonaws.ssm#InvalidCommandId":
          throw await deserializeAws_json1_1InvalidCommandIdResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListComplianceItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListComplianceItemsCommand = deserializeAws_json1_1ListComplianceItemsCommand;
    var deserializeAws_json1_1ListComplianceItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListComplianceSummariesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListComplianceSummariesCommand = deserializeAws_json1_1ListComplianceSummariesCommand;
    var deserializeAws_json1_1ListComplianceSummariesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDocumentMetadataHistoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentMetadataHistoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentMetadataHistoryResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListDocumentMetadataHistoryCommand = deserializeAws_json1_1ListDocumentMetadataHistoryCommand;
    var deserializeAws_json1_1ListDocumentMetadataHistoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDocumentsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListDocumentsCommand = deserializeAws_json1_1ListDocumentsCommand;
    var deserializeAws_json1_1ListDocumentsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilterKey":
        case "com.amazonaws.ssm#InvalidFilterKey":
          throw await deserializeAws_json1_1InvalidFilterKeyResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListDocumentVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListDocumentVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListDocumentVersionsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListDocumentVersionsCommand = deserializeAws_json1_1ListDocumentVersionsCommand;
    var deserializeAws_json1_1ListDocumentVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListInventoryEntriesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListInventoryEntriesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListInventoryEntriesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListInventoryEntriesCommand = deserializeAws_json1_1ListInventoryEntriesCommand;
    var deserializeAws_json1_1ListInventoryEntriesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListOpsItemEventsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsItemEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsItemEventsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListOpsItemEventsCommand = deserializeAws_json1_1ListOpsItemEventsCommand;
    var deserializeAws_json1_1ListOpsItemEventsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListOpsItemRelatedItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsItemRelatedItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsItemRelatedItemsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListOpsItemRelatedItemsCommand = deserializeAws_json1_1ListOpsItemRelatedItemsCommand;
    var deserializeAws_json1_1ListOpsItemRelatedItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListOpsMetadataCommand = deserializeAws_json1_1ListOpsMetadataCommand;
    var deserializeAws_json1_1ListOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListResourceComplianceSummariesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceComplianceSummariesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceComplianceSummariesResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListResourceComplianceSummariesCommand = deserializeAws_json1_1ListResourceComplianceSummariesCommand;
    var deserializeAws_json1_1ListResourceComplianceSummariesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidFilter":
        case "com.amazonaws.ssm#InvalidFilter":
          throw await deserializeAws_json1_1InvalidFilterResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListResourceDataSyncCommand = deserializeAws_json1_1ListResourceDataSyncCommand;
    var deserializeAws_json1_1ListResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidNextToken":
        case "com.amazonaws.ssm#InvalidNextToken":
          throw await deserializeAws_json1_1InvalidNextTokenResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ListTagsForResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ListTagsForResourceCommand = deserializeAws_json1_1ListTagsForResourceCommand;
    var deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ModifyDocumentPermissionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ModifyDocumentPermissionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ModifyDocumentPermissionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ModifyDocumentPermissionCommand = deserializeAws_json1_1ModifyDocumentPermissionCommand;
    var deserializeAws_json1_1ModifyDocumentPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentLimitExceeded":
        case "com.amazonaws.ssm#DocumentLimitExceeded":
          throw await deserializeAws_json1_1DocumentLimitExceededResponse(parsedOutput, context);
        case "DocumentPermissionLimit":
        case "com.amazonaws.ssm#DocumentPermissionLimit":
          throw await deserializeAws_json1_1DocumentPermissionLimitResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidPermissionType":
        case "com.amazonaws.ssm#InvalidPermissionType":
          throw await deserializeAws_json1_1InvalidPermissionTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutComplianceItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutComplianceItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutComplianceItemsResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutComplianceItemsCommand = deserializeAws_json1_1PutComplianceItemsCommand;
    var deserializeAws_json1_1PutComplianceItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ComplianceTypeCountLimitExceededException":
        case "com.amazonaws.ssm#ComplianceTypeCountLimitExceededException":
          throw await deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await deserializeAws_json1_1InvalidItemContentExceptionResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutInventoryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutInventoryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutInventoryResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutInventoryCommand = deserializeAws_json1_1PutInventoryCommand;
    var deserializeAws_json1_1PutInventoryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CustomSchemaCountLimitExceededException":
        case "com.amazonaws.ssm#CustomSchemaCountLimitExceededException":
          throw await deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidInventoryItemContextException":
        case "com.amazonaws.ssm#InvalidInventoryItemContextException":
          throw await deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse(parsedOutput, context);
        case "InvalidItemContentException":
        case "com.amazonaws.ssm#InvalidItemContentException":
          throw await deserializeAws_json1_1InvalidItemContentExceptionResponse(parsedOutput, context);
        case "InvalidTypeNameException":
        case "com.amazonaws.ssm#InvalidTypeNameException":
          throw await deserializeAws_json1_1InvalidTypeNameExceptionResponse(parsedOutput, context);
        case "ItemContentMismatchException":
        case "com.amazonaws.ssm#ItemContentMismatchException":
          throw await deserializeAws_json1_1ItemContentMismatchExceptionResponse(parsedOutput, context);
        case "ItemSizeLimitExceededException":
        case "com.amazonaws.ssm#ItemSizeLimitExceededException":
          throw await deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "SubTypeCountLimitExceededException":
        case "com.amazonaws.ssm#SubTypeCountLimitExceededException":
          throw await deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse(parsedOutput, context);
        case "TotalSizeLimitExceededException":
        case "com.amazonaws.ssm#TotalSizeLimitExceededException":
          throw await deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "UnsupportedInventoryItemContextException":
        case "com.amazonaws.ssm#UnsupportedInventoryItemContextException":
          throw await deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse(parsedOutput, context);
        case "UnsupportedInventorySchemaVersionException":
        case "com.amazonaws.ssm#UnsupportedInventorySchemaVersionException":
          throw await deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutParameterCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutParameterCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutParameterResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutParameterCommand = deserializeAws_json1_1PutParameterCommand;
    var deserializeAws_json1_1PutParameterCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "HierarchyLevelLimitExceededException":
        case "com.amazonaws.ssm#HierarchyLevelLimitExceededException":
          throw await deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse(parsedOutput, context);
        case "HierarchyTypeMismatchException":
        case "com.amazonaws.ssm#HierarchyTypeMismatchException":
          throw await deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse(parsedOutput, context);
        case "IncompatiblePolicyException":
        case "com.amazonaws.ssm#IncompatiblePolicyException":
          throw await deserializeAws_json1_1IncompatiblePolicyExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAllowedPatternException":
        case "com.amazonaws.ssm#InvalidAllowedPatternException":
          throw await deserializeAws_json1_1InvalidAllowedPatternExceptionResponse(parsedOutput, context);
        case "InvalidKeyId":
        case "com.amazonaws.ssm#InvalidKeyId":
          throw await deserializeAws_json1_1InvalidKeyIdResponse(parsedOutput, context);
        case "InvalidPolicyAttributeException":
        case "com.amazonaws.ssm#InvalidPolicyAttributeException":
          throw await deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse(parsedOutput, context);
        case "InvalidPolicyTypeException":
        case "com.amazonaws.ssm#InvalidPolicyTypeException":
          throw await deserializeAws_json1_1InvalidPolicyTypeExceptionResponse(parsedOutput, context);
        case "ParameterAlreadyExists":
        case "com.amazonaws.ssm#ParameterAlreadyExists":
          throw await deserializeAws_json1_1ParameterAlreadyExistsResponse(parsedOutput, context);
        case "ParameterLimitExceeded":
        case "com.amazonaws.ssm#ParameterLimitExceeded":
          throw await deserializeAws_json1_1ParameterLimitExceededResponse(parsedOutput, context);
        case "ParameterMaxVersionLimitExceeded":
        case "com.amazonaws.ssm#ParameterMaxVersionLimitExceeded":
          throw await deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse(parsedOutput, context);
        case "ParameterPatternMismatchException":
        case "com.amazonaws.ssm#ParameterPatternMismatchException":
          throw await deserializeAws_json1_1ParameterPatternMismatchExceptionResponse(parsedOutput, context);
        case "PoliciesLimitExceededException":
        case "com.amazonaws.ssm#PoliciesLimitExceededException":
          throw await deserializeAws_json1_1PoliciesLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        case "UnsupportedParameterType":
        case "com.amazonaws.ssm#UnsupportedParameterType":
          throw await deserializeAws_json1_1UnsupportedParameterTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1PutResourcePolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutResourcePolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1PutResourcePolicyResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1PutResourcePolicyCommand = deserializeAws_json1_1PutResourcePolicyCommand;
    var deserializeAws_json1_1PutResourcePolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourcePolicyConflictException":
        case "com.amazonaws.ssm#ResourcePolicyConflictException":
          throw await deserializeAws_json1_1ResourcePolicyConflictExceptionResponse(parsedOutput, context);
        case "ResourcePolicyInvalidParameterException":
        case "com.amazonaws.ssm#ResourcePolicyInvalidParameterException":
          throw await deserializeAws_json1_1ResourcePolicyInvalidParameterExceptionResponse(parsedOutput, context);
        case "ResourcePolicyLimitExceededException":
        case "com.amazonaws.ssm#ResourcePolicyLimitExceededException":
          throw await deserializeAws_json1_1ResourcePolicyLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterDefaultPatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand = deserializeAws_json1_1RegisterDefaultPatchBaselineCommand;
    var deserializeAws_json1_1RegisterDefaultPatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand = deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand;
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.ssm#AlreadyExistsException":
          throw await deserializeAws_json1_1AlreadyExistsExceptionResponse(parsedOutput, context);
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand = deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand;
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand = deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand;
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "FeatureNotAvailableException":
        case "com.amazonaws.ssm#FeatureNotAvailableException":
          throw await deserializeAws_json1_1FeatureNotAvailableExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.ssm#ResourceLimitExceededException":
          throw await deserializeAws_json1_1ResourceLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1RemoveTagsFromResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1RemoveTagsFromResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1RemoveTagsFromResourceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1RemoveTagsFromResourceCommand = deserializeAws_json1_1RemoveTagsFromResourceCommand;
    var deserializeAws_json1_1RemoveTagsFromResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidResourceId":
        case "com.amazonaws.ssm#InvalidResourceId":
          throw await deserializeAws_json1_1InvalidResourceIdResponse(parsedOutput, context);
        case "InvalidResourceType":
        case "com.amazonaws.ssm#InvalidResourceType":
          throw await deserializeAws_json1_1InvalidResourceTypeResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ResetServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ResetServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ResetServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ResetServiceSettingCommand = deserializeAws_json1_1ResetServiceSettingCommand;
    var deserializeAws_json1_1ResetServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1ResumeSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1ResumeSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1ResumeSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1ResumeSessionCommand = deserializeAws_json1_1ResumeSessionCommand;
    var deserializeAws_json1_1ResumeSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1SendAutomationSignalCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SendAutomationSignalCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SendAutomationSignalResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1SendAutomationSignalCommand = deserializeAws_json1_1SendAutomationSignalCommand;
    var deserializeAws_json1_1SendAutomationSignalCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationStepNotFoundException":
        case "com.amazonaws.ssm#AutomationStepNotFoundException":
          throw await deserializeAws_json1_1AutomationStepNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationSignalException":
        case "com.amazonaws.ssm#InvalidAutomationSignalException":
          throw await deserializeAws_json1_1InvalidAutomationSignalExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1SendCommandCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1SendCommandCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1SendCommandResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1SendCommandCommand = deserializeAws_json1_1SendCommandCommand;
    var deserializeAws_json1_1SendCommandCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DuplicateInstanceId":
        case "com.amazonaws.ssm#DuplicateInstanceId":
          throw await deserializeAws_json1_1DuplicateInstanceIdResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "InvalidNotificationConfig":
        case "com.amazonaws.ssm#InvalidNotificationConfig":
          throw await deserializeAws_json1_1InvalidNotificationConfigResponse(parsedOutput, context);
        case "InvalidOutputFolder":
        case "com.amazonaws.ssm#InvalidOutputFolder":
          throw await deserializeAws_json1_1InvalidOutputFolderResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidRole":
        case "com.amazonaws.ssm#InvalidRole":
          throw await deserializeAws_json1_1InvalidRoleResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        case "UnsupportedPlatformType":
        case "com.amazonaws.ssm#UnsupportedPlatformType":
          throw await deserializeAws_json1_1UnsupportedPlatformTypeResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StartAssociationsOnceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartAssociationsOnceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartAssociationsOnceResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartAssociationsOnceCommand = deserializeAws_json1_1StartAssociationsOnceCommand;
    var deserializeAws_json1_1StartAssociationsOnceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InvalidAssociation":
        case "com.amazonaws.ssm#InvalidAssociation":
          throw await deserializeAws_json1_1InvalidAssociationResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StartAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartAutomationExecutionCommand = deserializeAws_json1_1StartAutomationExecutionCommand;
    var deserializeAws_json1_1StartAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StartChangeRequestExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartChangeRequestExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartChangeRequestExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartChangeRequestExecutionCommand = deserializeAws_json1_1StartChangeRequestExecutionCommand;
    var deserializeAws_json1_1StartChangeRequestExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationDefinitionNotApprovedException":
        case "com.amazonaws.ssm#AutomationDefinitionNotApprovedException":
          throw await deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationDefinitionVersionNotFoundException":
        case "com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException":
          throw await deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse(parsedOutput, context);
        case "AutomationExecutionLimitExceededException":
        case "com.amazonaws.ssm#AutomationExecutionLimitExceededException":
          throw await deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse(parsedOutput, context);
        case "IdempotentParameterMismatch":
        case "com.amazonaws.ssm#IdempotentParameterMismatch":
          throw await deserializeAws_json1_1IdempotentParameterMismatchResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationExecutionParametersException":
        case "com.amazonaws.ssm#InvalidAutomationExecutionParametersException":
          throw await deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StartSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StartSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StartSessionCommand = deserializeAws_json1_1StartSessionCommand;
    var deserializeAws_json1_1StartSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "TargetNotConnected":
        case "com.amazonaws.ssm#TargetNotConnected":
          throw await deserializeAws_json1_1TargetNotConnectedResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1StopAutomationExecutionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopAutomationExecutionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1StopAutomationExecutionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1StopAutomationExecutionCommand = deserializeAws_json1_1StopAutomationExecutionCommand;
    var deserializeAws_json1_1StopAutomationExecutionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AutomationExecutionNotFoundException":
        case "com.amazonaws.ssm#AutomationExecutionNotFoundException":
          throw await deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAutomationStatusUpdateException":
        case "com.amazonaws.ssm#InvalidAutomationStatusUpdateException":
          throw await deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1TerminateSessionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1TerminateSessionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1TerminateSessionResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1TerminateSessionCommand = deserializeAws_json1_1TerminateSessionCommand;
    var deserializeAws_json1_1TerminateSessionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UnlabelParameterVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UnlabelParameterVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UnlabelParameterVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UnlabelParameterVersionCommand = deserializeAws_json1_1UnlabelParameterVersionCommand;
    var deserializeAws_json1_1UnlabelParameterVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ParameterNotFound":
        case "com.amazonaws.ssm#ParameterNotFound":
          throw await deserializeAws_json1_1ParameterNotFoundResponse(parsedOutput, context);
        case "ParameterVersionNotFound":
        case "com.amazonaws.ssm#ParameterVersionNotFound":
          throw await deserializeAws_json1_1ParameterVersionNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateAssociationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAssociationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateAssociationResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateAssociationCommand = deserializeAws_json1_1UpdateAssociationCommand;
    var deserializeAws_json1_1UpdateAssociationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "AssociationVersionLimitExceeded":
        case "com.amazonaws.ssm#AssociationVersionLimitExceeded":
          throw await deserializeAws_json1_1AssociationVersionLimitExceededResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidAssociationVersion":
        case "com.amazonaws.ssm#InvalidAssociationVersion":
          throw await deserializeAws_json1_1InvalidAssociationVersionResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "InvalidOutputLocation":
        case "com.amazonaws.ssm#InvalidOutputLocation":
          throw await deserializeAws_json1_1InvalidOutputLocationResponse(parsedOutput, context);
        case "InvalidParameters":
        case "com.amazonaws.ssm#InvalidParameters":
          throw await deserializeAws_json1_1InvalidParametersResponse(parsedOutput, context);
        case "InvalidSchedule":
        case "com.amazonaws.ssm#InvalidSchedule":
          throw await deserializeAws_json1_1InvalidScheduleResponse(parsedOutput, context);
        case "InvalidTarget":
        case "com.amazonaws.ssm#InvalidTarget":
          throw await deserializeAws_json1_1InvalidTargetResponse(parsedOutput, context);
        case "InvalidTargetMaps":
        case "com.amazonaws.ssm#InvalidTargetMaps":
          throw await deserializeAws_json1_1InvalidTargetMapsResponse(parsedOutput, context);
        case "InvalidUpdate":
        case "com.amazonaws.ssm#InvalidUpdate":
          throw await deserializeAws_json1_1InvalidUpdateResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateAssociationStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateAssociationStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateAssociationStatusResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateAssociationStatusCommand = deserializeAws_json1_1UpdateAssociationStatusCommand;
    var deserializeAws_json1_1UpdateAssociationStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AssociationDoesNotExist":
        case "com.amazonaws.ssm#AssociationDoesNotExist":
          throw await deserializeAws_json1_1AssociationDoesNotExistResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        case "StatusUnchanged":
        case "com.amazonaws.ssm#StatusUnchanged":
          throw await deserializeAws_json1_1StatusUnchangedResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateDocumentCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateDocumentCommand = deserializeAws_json1_1UpdateDocumentCommand;
    var deserializeAws_json1_1UpdateDocumentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DocumentVersionLimitExceeded":
        case "com.amazonaws.ssm#DocumentVersionLimitExceeded":
          throw await deserializeAws_json1_1DocumentVersionLimitExceededResponse(parsedOutput, context);
        case "DuplicateDocumentContent":
        case "com.amazonaws.ssm#DuplicateDocumentContent":
          throw await deserializeAws_json1_1DuplicateDocumentContentResponse(parsedOutput, context);
        case "DuplicateDocumentVersionName":
        case "com.amazonaws.ssm#DuplicateDocumentVersionName":
          throw await deserializeAws_json1_1DuplicateDocumentVersionNameResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentContent":
        case "com.amazonaws.ssm#InvalidDocumentContent":
          throw await deserializeAws_json1_1InvalidDocumentContentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        case "MaxDocumentSizeExceeded":
        case "com.amazonaws.ssm#MaxDocumentSizeExceeded":
          throw await deserializeAws_json1_1MaxDocumentSizeExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentDefaultVersionResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand = deserializeAws_json1_1UpdateDocumentDefaultVersionCommand;
    var deserializeAws_json1_1UpdateDocumentDefaultVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentSchemaVersion":
        case "com.amazonaws.ssm#InvalidDocumentSchemaVersion":
          throw await deserializeAws_json1_1InvalidDocumentSchemaVersionResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateDocumentMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateDocumentMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateDocumentMetadataResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateDocumentMetadataCommand = deserializeAws_json1_1UpdateDocumentMetadataCommand;
    var deserializeAws_json1_1UpdateDocumentMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidDocument":
        case "com.amazonaws.ssm#InvalidDocument":
          throw await deserializeAws_json1_1InvalidDocumentResponse(parsedOutput, context);
        case "InvalidDocumentOperation":
        case "com.amazonaws.ssm#InvalidDocumentOperation":
          throw await deserializeAws_json1_1InvalidDocumentOperationResponse(parsedOutput, context);
        case "InvalidDocumentVersion":
        case "com.amazonaws.ssm#InvalidDocumentVersion":
          throw await deserializeAws_json1_1InvalidDocumentVersionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateMaintenanceWindowCommand = deserializeAws_json1_1UpdateMaintenanceWindowCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowTargetResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand = deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateMaintenanceWindowTaskResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand = deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand;
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateManagedInstanceRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateManagedInstanceRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateManagedInstanceRoleResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateManagedInstanceRoleCommand = deserializeAws_json1_1UpdateManagedInstanceRoleCommand;
    var deserializeAws_json1_1UpdateManagedInstanceRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "InvalidInstanceId":
        case "com.amazonaws.ssm#InvalidInstanceId":
          throw await deserializeAws_json1_1InvalidInstanceIdResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateOpsItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateOpsItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateOpsItemResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateOpsItemCommand = deserializeAws_json1_1UpdateOpsItemCommand;
    var deserializeAws_json1_1UpdateOpsItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsItemAccessDeniedException":
        case "com.amazonaws.ssm#OpsItemAccessDeniedException":
          throw await deserializeAws_json1_1OpsItemAccessDeniedExceptionResponse(parsedOutput, context);
        case "OpsItemAlreadyExistsException":
        case "com.amazonaws.ssm#OpsItemAlreadyExistsException":
          throw await deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OpsItemInvalidParameterException":
        case "com.amazonaws.ssm#OpsItemInvalidParameterException":
          throw await deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse(parsedOutput, context);
        case "OpsItemLimitExceededException":
        case "com.amazonaws.ssm#OpsItemLimitExceededException":
          throw await deserializeAws_json1_1OpsItemLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsItemNotFoundException":
        case "com.amazonaws.ssm#OpsItemNotFoundException":
          throw await deserializeAws_json1_1OpsItemNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateOpsMetadataCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateOpsMetadataCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateOpsMetadataResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateOpsMetadataCommand = deserializeAws_json1_1UpdateOpsMetadataCommand;
    var deserializeAws_json1_1UpdateOpsMetadataCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "OpsMetadataInvalidArgumentException":
        case "com.amazonaws.ssm#OpsMetadataInvalidArgumentException":
          throw await deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse(parsedOutput, context);
        case "OpsMetadataKeyLimitExceededException":
        case "com.amazonaws.ssm#OpsMetadataKeyLimitExceededException":
          throw await deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse(parsedOutput, context);
        case "OpsMetadataNotFoundException":
        case "com.amazonaws.ssm#OpsMetadataNotFoundException":
          throw await deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse(parsedOutput, context);
        case "OpsMetadataTooManyUpdatesException":
        case "com.amazonaws.ssm#OpsMetadataTooManyUpdatesException":
          throw await deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdatePatchBaselineCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdatePatchBaselineCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdatePatchBaselineResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdatePatchBaselineCommand = deserializeAws_json1_1UpdatePatchBaselineCommand;
    var deserializeAws_json1_1UpdatePatchBaselineCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "DoesNotExistException":
        case "com.amazonaws.ssm#DoesNotExistException":
          throw await deserializeAws_json1_1DoesNotExistExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateResourceDataSyncCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateResourceDataSyncCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateResourceDataSyncResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateResourceDataSyncCommand = deserializeAws_json1_1UpdateResourceDataSyncCommand;
    var deserializeAws_json1_1UpdateResourceDataSyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ResourceDataSyncConflictException":
        case "com.amazonaws.ssm#ResourceDataSyncConflictException":
          throw await deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncInvalidConfigurationException":
        case "com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException":
          throw await deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse(parsedOutput, context);
        case "ResourceDataSyncNotFoundException":
        case "com.amazonaws.ssm#ResourceDataSyncNotFoundException":
          throw await deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1UpdateServiceSettingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateServiceSettingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_1UpdateServiceSettingResult(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_1UpdateServiceSettingCommand = deserializeAws_json1_1UpdateServiceSettingCommand;
    var deserializeAws_json1_1UpdateServiceSettingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.ssm#InternalServerError":
          throw await deserializeAws_json1_1InternalServerErrorResponse(parsedOutput, context);
        case "ServiceSettingNotFound":
        case "com.amazonaws.ssm#ServiceSettingNotFound":
          throw await deserializeAws_json1_1ServiceSettingNotFoundResponse(parsedOutput, context);
        case "TooManyUpdates":
        case "com.amazonaws.ssm#TooManyUpdates":
          throw await deserializeAws_json1_1TooManyUpdatesResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSMServiceException_1.SSMServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_1AlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AlreadyExistsException(body, context);
      const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociatedInstancesResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociatedInstances(body, context);
      const exception = new models_0_1.AssociatedInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationAlreadyExistsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationAlreadyExists(body, context);
      const exception = new models_0_1.AssociationAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationDoesNotExistResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationDoesNotExist(body, context);
      const exception = new models_0_1.AssociationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationExecutionDoesNotExistResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationExecutionDoesNotExist(body, context);
      const exception = new models_0_1.AssociationExecutionDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationLimitExceeded(body, context);
      const exception = new models_0_1.AssociationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AssociationVersionLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AssociationVersionLimitExceeded(body, context);
      const exception = new models_1_1.AssociationVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationDefinitionNotApprovedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionNotApprovedException(body, context);
      const exception = new models_1_1.AutomationDefinitionNotApprovedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationDefinitionNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionNotFoundException(body, context);
      const exception = new models_1_1.AutomationDefinitionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationDefinitionVersionNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationDefinitionVersionNotFoundException(body, context);
      const exception = new models_1_1.AutomationDefinitionVersionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationExecutionLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationExecutionLimitExceededException(body, context);
      const exception = new models_1_1.AutomationExecutionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationExecutionNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationExecutionNotFoundException(body, context);
      const exception = new models_0_1.AutomationExecutionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1AutomationStepNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1AutomationStepNotFoundException(body, context);
      const exception = new models_1_1.AutomationStepNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ComplianceTypeCountLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ComplianceTypeCountLimitExceededException(body, context);
      const exception = new models_1_1.ComplianceTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1CustomSchemaCountLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1CustomSchemaCountLimitExceededException(body, context);
      const exception = new models_1_1.CustomSchemaCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentAlreadyExistsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentAlreadyExists(body, context);
      const exception = new models_0_1.DocumentAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentLimitExceeded(body, context);
      const exception = new models_0_1.DocumentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentPermissionLimitResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentPermissionLimit(body, context);
      const exception = new models_1_1.DocumentPermissionLimit({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DocumentVersionLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DocumentVersionLimitExceeded(body, context);
      const exception = new models_2_1.DocumentVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DoesNotExistExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DoesNotExistException(body, context);
      const exception = new models_0_1.DoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DuplicateDocumentContentResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateDocumentContent(body, context);
      const exception = new models_2_1.DuplicateDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DuplicateDocumentVersionNameResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateDocumentVersionName(body, context);
      const exception = new models_2_1.DuplicateDocumentVersionName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1DuplicateInstanceIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1DuplicateInstanceId(body, context);
      const exception = new models_0_1.DuplicateInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1FeatureNotAvailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1FeatureNotAvailableException(body, context);
      const exception = new models_1_1.FeatureNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1HierarchyLevelLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1HierarchyLevelLimitExceededException(body, context);
      const exception = new models_1_1.HierarchyLevelLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1HierarchyTypeMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1HierarchyTypeMismatchException(body, context);
      const exception = new models_1_1.HierarchyTypeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IdempotentParameterMismatchResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IdempotentParameterMismatch(body, context);
      const exception = new models_0_1.IdempotentParameterMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1IncompatiblePolicyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1IncompatiblePolicyException(body, context);
      const exception = new models_1_1.IncompatiblePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InternalServerErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InternalServerError(body, context);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidActivationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidActivation(body, context);
      const exception = new models_0_1.InvalidActivation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidActivationIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidActivationId(body, context);
      const exception = new models_0_1.InvalidActivationId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAggregatorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAggregatorException(body, context);
      const exception = new models_1_1.InvalidAggregatorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAllowedPatternExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAllowedPatternException(body, context);
      const exception = new models_1_1.InvalidAllowedPatternException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAssociationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAssociation(body, context);
      const exception = new models_1_1.InvalidAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAssociationVersionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAssociationVersion(body, context);
      const exception = new models_0_1.InvalidAssociationVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutomationExecutionParametersExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationExecutionParametersException(body, context);
      const exception = new models_1_1.InvalidAutomationExecutionParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutomationSignalExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationSignalException(body, context);
      const exception = new models_1_1.InvalidAutomationSignalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidAutomationStatusUpdateExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidAutomationStatusUpdateException(body, context);
      const exception = new models_1_1.InvalidAutomationStatusUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidCommandIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidCommandId(body, context);
      const exception = new models_0_1.InvalidCommandId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeleteInventoryParametersExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeleteInventoryParametersException(body, context);
      const exception = new models_0_1.InvalidDeleteInventoryParametersException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDeletionIdExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDeletionIdException(body, context);
      const exception = new models_0_1.InvalidDeletionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocument(body, context);
      const exception = new models_0_1.InvalidDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentContentResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentContent(body, context);
      const exception = new models_0_1.InvalidDocumentContent({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentOperationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentOperation(body, context);
      const exception = new models_0_1.InvalidDocumentOperation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentSchemaVersionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentSchemaVersion(body, context);
      const exception = new models_0_1.InvalidDocumentSchemaVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentType(body, context);
      const exception = new models_1_1.InvalidDocumentType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidDocumentVersionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidDocumentVersion(body, context);
      const exception = new models_0_1.InvalidDocumentVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilter(body, context);
      const exception = new models_0_1.InvalidFilter({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterKeyResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterKey(body, context);
      const exception = new models_0_1.InvalidFilterKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterOptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterOption(body, context);
      const exception = new models_1_1.InvalidFilterOption({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidFilterValueResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidFilterValue(body, context);
      const exception = new models_0_1.InvalidFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceId(body, context);
      const exception = new models_0_1.InvalidInstanceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInstanceInformationFilterValueResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInstanceInformationFilterValue(body, context);
      const exception = new models_0_1.InvalidInstanceInformationFilterValue({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInventoryGroupExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryGroupException(body, context);
      const exception = new models_1_1.InvalidInventoryGroupException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInventoryItemContextExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryItemContextException(body, context);
      const exception = new models_1_1.InvalidInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidInventoryRequestExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidInventoryRequestException(body, context);
      const exception = new models_0_1.InvalidInventoryRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidItemContentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidItemContentException(body, context);
      const exception = new models_1_1.InvalidItemContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidKeyIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidKeyId(body, context);
      const exception = new models_1_1.InvalidKeyId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidNextTokenResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNextToken(body, context);
      const exception = new models_0_1.InvalidNextToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidNotificationConfigResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidNotificationConfig(body, context);
      const exception = new models_1_1.InvalidNotificationConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOptionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOptionException(body, context);
      const exception = new models_0_1.InvalidOptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOutputFolderResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOutputFolder(body, context);
      const exception = new models_1_1.InvalidOutputFolder({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidOutputLocationResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidOutputLocation(body, context);
      const exception = new models_0_1.InvalidOutputLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidParametersResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidParameters(body, context);
      const exception = new models_0_1.InvalidParameters({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPermissionTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPermissionType(body, context);
      const exception = new models_0_1.InvalidPermissionType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPluginNameResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPluginName(body, context);
      const exception = new models_1_1.InvalidPluginName({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPolicyAttributeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPolicyAttributeException(body, context);
      const exception = new models_1_1.InvalidPolicyAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidPolicyTypeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidPolicyTypeException(body, context);
      const exception = new models_1_1.InvalidPolicyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidResourceIdResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResourceId(body, context);
      const exception = new models_0_1.InvalidResourceId({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidResourceTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResourceType(body, context);
      const exception = new models_0_1.InvalidResourceType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidResultAttributeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidResultAttributeException(body, context);
      const exception = new models_1_1.InvalidResultAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidRoleResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidRole(body, context);
      const exception = new models_1_1.InvalidRole({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidScheduleResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidSchedule(body, context);
      const exception = new models_0_1.InvalidSchedule({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTagResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTag(body, context);
      const exception = new models_0_1.InvalidTag({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTarget(body, context);
      const exception = new models_0_1.InvalidTarget({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTargetMapsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTargetMaps(body, context);
      const exception = new models_0_1.InvalidTargetMaps({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidTypeNameExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidTypeNameException(body, context);
      const exception = new models_0_1.InvalidTypeNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvalidUpdateResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvalidUpdate(body, context);
      const exception = new models_2_1.InvalidUpdate({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1InvocationDoesNotExistResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1InvocationDoesNotExist(body, context);
      const exception = new models_1_1.InvocationDoesNotExist({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ItemContentMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ItemContentMismatchException(body, context);
      const exception = new models_1_1.ItemContentMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ItemSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ItemSizeLimitExceededException(body, context);
      const exception = new models_1_1.ItemSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1MaxDocumentSizeExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1MaxDocumentSizeExceeded(body, context);
      const exception = new models_0_1.MaxDocumentSizeExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemAccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemAccessDeniedException(body, context);
      const exception = new models_0_1.OpsItemAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemInvalidParameterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemInvalidParameterException(body, context);
      const exception = new models_0_1.OpsItemInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemLimitExceededException(body, context);
      const exception = new models_0_1.OpsItemLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemNotFoundException(body, context);
      const exception = new models_0_1.OpsItemNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsItemRelatedItemAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException(body, context);
      const exception = new models_1_1.OpsItemRelatedItemAssociationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataAlreadyExistsException(body, context);
      const exception = new models_0_1.OpsMetadataAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataInvalidArgumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataInvalidArgumentException(body, context);
      const exception = new models_0_1.OpsMetadataInvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataKeyLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataKeyLimitExceededException(body, context);
      const exception = new models_2_1.OpsMetadataKeyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataLimitExceededException(body, context);
      const exception = new models_0_1.OpsMetadataLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataNotFoundException(body, context);
      const exception = new models_0_1.OpsMetadataNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1OpsMetadataTooManyUpdatesExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1OpsMetadataTooManyUpdatesException(body, context);
      const exception = new models_0_1.OpsMetadataTooManyUpdatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterAlreadyExistsResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterAlreadyExists(body, context);
      const exception = new models_1_1.ParameterAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterLimitExceeded(body, context);
      const exception = new models_1_1.ParameterLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterMaxVersionLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterMaxVersionLimitExceeded(body, context);
      const exception = new models_1_1.ParameterMaxVersionLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterNotFoundResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterNotFound(body, context);
      const exception = new models_0_1.ParameterNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterPatternMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterPatternMismatchException(body, context);
      const exception = new models_1_1.ParameterPatternMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterVersionLabelLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterVersionLabelLimitExceeded(body, context);
      const exception = new models_1_1.ParameterVersionLabelLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ParameterVersionNotFoundResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ParameterVersionNotFound(body, context);
      const exception = new models_1_1.ParameterVersionNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1PoliciesLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1PoliciesLimitExceededException(body, context);
      const exception = new models_1_1.PoliciesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncAlreadyExistsException(body, context);
      const exception = new models_0_1.ResourceDataSyncAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncConflictException(body, context);
      const exception = new models_2_1.ResourceDataSyncConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncCountExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncCountExceededException(body, context);
      const exception = new models_0_1.ResourceDataSyncCountExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncInvalidConfigurationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException(body, context);
      const exception = new models_0_1.ResourceDataSyncInvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceDataSyncNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceDataSyncNotFoundException(body, context);
      const exception = new models_0_1.ResourceDataSyncNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceInUseException(body, context);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourceLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourceLimitExceededException(body, context);
      const exception = new models_0_1.ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourcePolicyConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourcePolicyConflictException(body, context);
      const exception = new models_0_1.ResourcePolicyConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourcePolicyInvalidParameterExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourcePolicyInvalidParameterException(body, context);
      const exception = new models_0_1.ResourcePolicyInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ResourcePolicyLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ResourcePolicyLimitExceededException(body, context);
      const exception = new models_1_1.ResourcePolicyLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1ServiceSettingNotFoundResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1ServiceSettingNotFound(body, context);
      const exception = new models_1_1.ServiceSettingNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1StatusUnchangedResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1StatusUnchanged(body, context);
      const exception = new models_2_1.StatusUnchanged({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1SubTypeCountLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1SubTypeCountLimitExceededException(body, context);
      const exception = new models_1_1.SubTypeCountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TargetInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TargetInUseException(body, context);
      const exception = new models_0_1.TargetInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TargetNotConnectedResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TargetNotConnected(body, context);
      const exception = new models_1_1.TargetNotConnected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TooManyTagsErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TooManyTagsError(body, context);
      const exception = new models_0_1.TooManyTagsError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TooManyUpdatesResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TooManyUpdates(body, context);
      const exception = new models_0_1.TooManyUpdates({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1TotalSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1TotalSizeLimitExceededException(body, context);
      const exception = new models_1_1.TotalSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedCalendarExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedCalendarException(body, context);
      const exception = new models_1_1.UnsupportedCalendarException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedFeatureRequiredExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedFeatureRequiredException(body, context);
      const exception = new models_1_1.UnsupportedFeatureRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedInventoryItemContextExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedInventoryItemContextException(body, context);
      const exception = new models_1_1.UnsupportedInventoryItemContextException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedInventorySchemaVersionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedInventorySchemaVersionException(body, context);
      const exception = new models_1_1.UnsupportedInventorySchemaVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedOperatingSystemResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedOperatingSystem(body, context);
      const exception = new models_0_1.UnsupportedOperatingSystem({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedParameterTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedParameterType(body, context);
      const exception = new models_1_1.UnsupportedParameterType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_1UnsupportedPlatformTypeResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_1UnsupportedPlatformType(body, context);
      const exception = new models_0_1.UnsupportedPlatformType({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_1AccountIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1Accounts = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1AddTagsToResourceRequest = (input, context) => {
      return {
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1Alarm = (input, context) => {
      return {
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1AlarmConfiguration = (input, context) => {
      return {
        ...input.Alarms != null && { Alarms: serializeAws_json1_1AlarmList(input.Alarms, context) },
        ...input.IgnorePollAlarmFailure != null && { IgnorePollAlarmFailure: input.IgnorePollAlarmFailure }
      };
    };
    var serializeAws_json1_1AlarmList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Alarm(entry, context);
      });
    };
    var serializeAws_json1_1AssociateOpsItemRelatedItemRequest = (input, context) => {
      return {
        ...input.AssociationType != null && { AssociationType: input.AssociationType },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.ResourceUri != null && { ResourceUri: input.ResourceUri }
      };
    };
    var serializeAws_json1_1AssociationExecutionFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1AssociationExecutionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AssociationExecutionFilter(entry, context);
      });
    };
    var serializeAws_json1_1AssociationExecutionTargetsFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1AssociationExecutionTargetsFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AssociationExecutionTargetsFilter(entry, context);
      });
    };
    var serializeAws_json1_1AssociationFilter = (input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    };
    var serializeAws_json1_1AssociationFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AssociationFilter(entry, context);
      });
    };
    var serializeAws_json1_1AssociationIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1AssociationStatus = (input, context) => {
      return {
        ...input.AdditionalInfo != null && { AdditionalInfo: input.AdditionalInfo },
        ...input.Date != null && { Date: Math.round(input.Date.getTime() / 1e3) },
        ...input.Message != null && { Message: input.Message },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1AttachmentsSource = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Name != null && { Name: input.Name },
        ...input.Values != null && { Values: serializeAws_json1_1AttachmentsSourceValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1AttachmentsSourceList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AttachmentsSource(entry, context);
      });
    };
    var serializeAws_json1_1AttachmentsSourceValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1AutomationExecutionFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && {
          Values: serializeAws_json1_1AutomationExecutionFilterValueList(input.Values, context)
        }
      };
    };
    var serializeAws_json1_1AutomationExecutionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1AutomationExecutionFilter(entry, context);
      });
    };
    var serializeAws_json1_1AutomationExecutionFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1AutomationParameterMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1AutomationParameterValueList(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1AutomationParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1BaselineOverride = (input, context) => {
      return {
        ...input.ApprovalRules != null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches != null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel != null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity != null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ...input.GlobalFilters != null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.RejectedPatches != null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction != null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Sources != null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) }
      };
    };
    var serializeAws_json1_1CalendarNameOrARNList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1CancelCommandRequest = (input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) }
      };
    };
    var serializeAws_json1_1CancelMaintenanceWindowExecutionRequest = (input, context) => {
      return {
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1CloudWatchOutputConfig = (input, context) => {
      return {
        ...input.CloudWatchLogGroupName != null && { CloudWatchLogGroupName: input.CloudWatchLogGroupName },
        ...input.CloudWatchOutputEnabled != null && { CloudWatchOutputEnabled: input.CloudWatchOutputEnabled }
      };
    };
    var serializeAws_json1_1CommandFilter = (input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    };
    var serializeAws_json1_1CommandFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1CommandFilter(entry, context);
      });
    };
    var serializeAws_json1_1ComplianceExecutionSummary = (input, context) => {
      return {
        ...input.ExecutionId != null && { ExecutionId: input.ExecutionId },
        ...input.ExecutionTime != null && { ExecutionTime: Math.round(input.ExecutionTime.getTime() / 1e3) },
        ...input.ExecutionType != null && { ExecutionType: input.ExecutionType }
      };
    };
    var serializeAws_json1_1ComplianceItemDetails = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_json1_1ComplianceItemEntry = (input, context) => {
      return {
        ...input.Details != null && { Details: serializeAws_json1_1ComplianceItemDetails(input.Details, context) },
        ...input.Id != null && { Id: input.Id },
        ...input.Severity != null && { Severity: input.Severity },
        ...input.Status != null && { Status: input.Status },
        ...input.Title != null && { Title: input.Title }
      };
    };
    var serializeAws_json1_1ComplianceItemEntryList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ComplianceItemEntry(entry, context);
      });
    };
    var serializeAws_json1_1ComplianceResourceIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ComplianceResourceTypeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ComplianceStringFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1ComplianceStringFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1ComplianceStringFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ComplianceStringFilter(entry, context);
      });
    };
    var serializeAws_json1_1ComplianceStringFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1CreateActivationRequest = (input, context) => {
      return {
        ...input.DefaultInstanceName != null && { DefaultInstanceName: input.DefaultInstanceName },
        ...input.Description != null && { Description: input.Description },
        ...input.ExpirationDate != null && { ExpirationDate: Math.round(input.ExpirationDate.getTime() / 1e3) },
        ...input.IamRole != null && { IamRole: input.IamRole },
        ...input.RegistrationLimit != null && { RegistrationLimit: input.RegistrationLimit },
        ...input.RegistrationMetadata != null && {
          RegistrationMetadata: serializeAws_json1_1RegistrationMetadataList(input.RegistrationMetadata, context)
        },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreateAssociationBatchRequest = (input, context) => {
      return {
        ...input.Entries != null && {
          Entries: serializeAws_json1_1CreateAssociationBatchRequestEntries(input.Entries, context)
        }
      };
    };
    var serializeAws_json1_1CreateAssociationBatchRequestEntries = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1CreateAssociationBatchRequestEntry(entry, context);
      });
    };
    var serializeAws_json1_1CreateAssociationBatchRequestEntry = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ApplyOnlyAtCronInterval != null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationName != null && { AssociationName: input.AssociationName },
        ...input.AutomationTargetParameterName != null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity != null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.OutputLocation != null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance != null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1CreateAssociationRequest = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ApplyOnlyAtCronInterval != null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationName != null && { AssociationName: input.AssociationName },
        ...input.AutomationTargetParameterName != null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity != null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.OutputLocation != null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance != null && { SyncCompliance: input.SyncCompliance },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1CreateDocumentRequest = (input, context) => {
      return {
        ...input.Attachments != null && {
          Attachments: serializeAws_json1_1AttachmentsSourceList(input.Attachments, context)
        },
        ...input.Content != null && { Content: input.Content },
        ...input.DisplayName != null && { DisplayName: input.DisplayName },
        ...input.DocumentFormat != null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentType != null && { DocumentType: input.DocumentType },
        ...input.Name != null && { Name: input.Name },
        ...input.Requires != null && { Requires: serializeAws_json1_1DocumentRequiresList(input.Requires, context) },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetType != null && { TargetType: input.TargetType },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1CreateMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.AllowUnassociatedTargets != null && { AllowUnassociatedTargets: input.AllowUnassociatedTargets },
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.Cutoff != null && { Cutoff: input.Cutoff },
        ...input.Description != null && { Description: input.Description },
        ...input.Duration != null && { Duration: input.Duration },
        ...input.EndDate != null && { EndDate: input.EndDate },
        ...input.Name != null && { Name: input.Name },
        ...input.Schedule != null && { Schedule: input.Schedule },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.ScheduleTimezone != null && { ScheduleTimezone: input.ScheduleTimezone },
        ...input.StartDate != null && { StartDate: input.StartDate },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreateOpsItemRequest = (input, context) => {
      return {
        ...input.AccountId != null && { AccountId: input.AccountId },
        ...input.ActualEndTime != null && { ActualEndTime: Math.round(input.ActualEndTime.getTime() / 1e3) },
        ...input.ActualStartTime != null && { ActualStartTime: Math.round(input.ActualStartTime.getTime() / 1e3) },
        ...input.Category != null && { Category: input.Category },
        ...input.Description != null && { Description: input.Description },
        ...input.Notifications != null && {
          Notifications: serializeAws_json1_1OpsItemNotifications(input.Notifications, context)
        },
        ...input.OperationalData != null && {
          OperationalData: serializeAws_json1_1OpsItemOperationalData(input.OperationalData, context)
        },
        ...input.OpsItemType != null && { OpsItemType: input.OpsItemType },
        ...input.PlannedEndTime != null && { PlannedEndTime: Math.round(input.PlannedEndTime.getTime() / 1e3) },
        ...input.PlannedStartTime != null && { PlannedStartTime: Math.round(input.PlannedStartTime.getTime() / 1e3) },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.RelatedOpsItems != null && {
          RelatedOpsItems: serializeAws_json1_1RelatedOpsItems(input.RelatedOpsItems, context)
        },
        ...input.Severity != null && { Severity: input.Severity },
        ...input.Source != null && { Source: input.Source },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.Title != null && { Title: input.Title }
      };
    };
    var serializeAws_json1_1CreateOpsMetadataRequest = (input, context) => {
      return {
        ...input.Metadata != null && { Metadata: serializeAws_json1_1MetadataMap(input.Metadata, context) },
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreatePatchBaselineRequest = (input, context) => {
      return {
        ...input.ApprovalRules != null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches != null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel != null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity != null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.Description != null && { Description: input.Description },
        ...input.GlobalFilters != null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.Name != null && { Name: input.Name },
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.RejectedPatches != null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction != null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Sources != null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1CreateResourceDataSyncRequest = (input, context) => {
      return {
        ...input.S3Destination != null && {
          S3Destination: serializeAws_json1_1ResourceDataSyncS3Destination(input.S3Destination, context)
        },
        ...input.SyncName != null && { SyncName: input.SyncName },
        ...input.SyncSource != null && {
          SyncSource: serializeAws_json1_1ResourceDataSyncSource(input.SyncSource, context)
        },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1DeleteActivationRequest = (input, context) => {
      return {
        ...input.ActivationId != null && { ActivationId: input.ActivationId }
      };
    };
    var serializeAws_json1_1DeleteAssociationRequest = (input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1DeleteDocumentRequest = (input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Force != null && { Force: input.Force },
        ...input.Name != null && { Name: input.Name },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1DeleteInventoryRequest = (input, context) => {
      return {
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.DryRun != null && { DryRun: input.DryRun },
        ...input.SchemaDeleteOption != null && { SchemaDeleteOption: input.SchemaDeleteOption },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1DeleteMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DeleteOpsMetadataRequest = (input, context) => {
      return {
        ...input.OpsMetadataArn != null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    };
    var serializeAws_json1_1DeleteParameterRequest = (input, context) => {
      return {
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1DeleteParametersRequest = (input, context) => {
      return {
        ...input.Names != null && { Names: serializeAws_json1_1ParameterNameList(input.Names, context) }
      };
    };
    var serializeAws_json1_1DeletePatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId }
      };
    };
    var serializeAws_json1_1DeleteResourceDataSyncRequest = (input, context) => {
      return {
        ...input.SyncName != null && { SyncName: input.SyncName },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1DeleteResourcePolicyRequest = (input, context) => {
      return {
        ...input.PolicyHash != null && { PolicyHash: input.PolicyHash },
        ...input.PolicyId != null && { PolicyId: input.PolicyId },
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn }
      };
    };
    var serializeAws_json1_1DeregisterManagedInstanceRequest = (input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId }
      };
    };
    var serializeAws_json1_1DeregisterPatchBaselineForPatchGroupRequest = (input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1DeregisterTargetFromMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.Safe != null && { Safe: input.Safe },
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTargetId != null && { WindowTargetId: input.WindowTargetId }
      };
    };
    var serializeAws_json1_1DeregisterTaskFromMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTaskId != null && { WindowTaskId: input.WindowTaskId }
      };
    };
    var serializeAws_json1_1DescribeActivationsFilter = (input, context) => {
      return {
        ...input.FilterKey != null && { FilterKey: input.FilterKey },
        ...input.FilterValues != null && { FilterValues: serializeAws_json1_1StringList(input.FilterValues, context) }
      };
    };
    var serializeAws_json1_1DescribeActivationsFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DescribeActivationsFilter(entry, context);
      });
    };
    var serializeAws_json1_1DescribeActivationsRequest = (input, context) => {
      return {
        ...input.Filters != null && {
          Filters: serializeAws_json1_1DescribeActivationsFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAssociationExecutionsRequest = (input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.Filters != null && {
          Filters: serializeAws_json1_1AssociationExecutionFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAssociationExecutionTargetsRequest = (input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.ExecutionId != null && { ExecutionId: input.ExecutionId },
        ...input.Filters != null && {
          Filters: serializeAws_json1_1AssociationExecutionTargetsFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAssociationRequest = (input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.AssociationVersion != null && { AssociationVersion: input.AssociationVersion },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1DescribeAutomationExecutionsRequest = (input, context) => {
      return {
        ...input.Filters != null && {
          Filters: serializeAws_json1_1AutomationExecutionFilterList(input.Filters, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeAutomationStepExecutionsRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Filters != null && { Filters: serializeAws_json1_1StepExecutionFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ReverseOrder != null && { ReverseOrder: input.ReverseOrder }
      };
    };
    var serializeAws_json1_1DescribeAvailablePatchesRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeDocumentPermissionRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.PermissionType != null && { PermissionType: input.PermissionType }
      };
    };
    var serializeAws_json1_1DescribeDocumentRequest = (input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1DescribeEffectiveInstanceAssociationsRequest = (input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstanceAssociationsStatusRequest = (input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstanceInformationRequest = (input, context) => {
      return {
        ...input.Filters != null && {
          Filters: serializeAws_json1_1InstanceInformationStringFilterList(input.Filters, context)
        },
        ...input.InstanceInformationFilterList != null && {
          InstanceInformationFilterList: serializeAws_json1_1InstanceInformationFilterList(input.InstanceInformationFilterList, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstancePatchesRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1InstancePatchStateFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1DescribeInstancePatchStatesRequest = (input, context) => {
      return {
        ...input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeInventoryDeletionsRequest = (input, context) => {
      return {
        ...input.DeletionId != null && { DeletionId: input.DeletionId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.TaskId != null && { TaskId: input.TaskId },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowScheduleRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowsForTargetRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowTargetsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeMaintenanceWindowTasksRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1MaintenanceWindowFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1DescribeOpsItemsRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OpsItemFilters != null && {
          OpsItemFilters: serializeAws_json1_1OpsItemFilters(input.OpsItemFilters, context)
        }
      };
    };
    var serializeAws_json1_1DescribeParametersRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ParametersFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ParameterFilters != null && {
          ParameterFilters: serializeAws_json1_1ParameterStringFilterList(input.ParameterFilters, context)
        }
      };
    };
    var serializeAws_json1_1DescribePatchBaselinesRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribePatchGroupsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1PatchOrchestratorFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1DescribePatchGroupStateRequest = (input, context) => {
      return {
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1DescribePatchPropertiesRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.PatchSet != null && { PatchSet: input.PatchSet },
        ...input.Property != null && { Property: input.Property }
      };
    };
    var serializeAws_json1_1DescribeSessionsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1SessionFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.State != null && { State: input.State }
      };
    };
    var serializeAws_json1_1DisassociateOpsItemRelatedItemRequest = (input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1DocumentFilter = (input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    };
    var serializeAws_json1_1DocumentFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentFilter(entry, context);
      });
    };
    var serializeAws_json1_1DocumentKeyValuesFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1DocumentKeyValuesFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1DocumentKeyValuesFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentKeyValuesFilter(entry, context);
      });
    };
    var serializeAws_json1_1DocumentKeyValuesFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1DocumentRequires = (input, context) => {
      return {
        ...input.Name != null && { Name: input.Name },
        ...input.RequireType != null && { RequireType: input.RequireType },
        ...input.Version != null && { Version: input.Version },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1DocumentRequiresList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentRequires(entry, context);
      });
    };
    var serializeAws_json1_1DocumentReviewCommentList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1DocumentReviewCommentSource(entry, context);
      });
    };
    var serializeAws_json1_1DocumentReviewCommentSource = (input, context) => {
      return {
        ...input.Content != null && { Content: input.Content },
        ...input.Type != null && { Type: input.Type }
      };
    };
    var serializeAws_json1_1DocumentReviews = (input, context) => {
      return {
        ...input.Action != null && { Action: input.Action },
        ...input.Comment != null && { Comment: serializeAws_json1_1DocumentReviewCommentList(input.Comment, context) }
      };
    };
    var serializeAws_json1_1GetAutomationExecutionRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId }
      };
    };
    var serializeAws_json1_1GetCalendarStateRequest = (input, context) => {
      return {
        ...input.AtTime != null && { AtTime: input.AtTime },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        }
      };
    };
    var serializeAws_json1_1GetCommandInvocationRequest = (input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.PluginName != null && { PluginName: input.PluginName }
      };
    };
    var serializeAws_json1_1GetConnectionStatusRequest = (input, context) => {
      return {
        ...input.Target != null && { Target: input.Target }
      };
    };
    var serializeAws_json1_1GetDefaultPatchBaselineRequest = (input, context) => {
      return {
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem }
      };
    };
    var serializeAws_json1_1GetDeployablePatchSnapshotForInstanceRequest = (input, context) => {
      return {
        ...input.BaselineOverride != null && {
          BaselineOverride: serializeAws_json1_1BaselineOverride(input.BaselineOverride, context)
        },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.SnapshotId != null && { SnapshotId: input.SnapshotId }
      };
    };
    var serializeAws_json1_1GetDocumentRequest = (input, context) => {
      return {
        ...input.DocumentFormat != null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1GetInventoryRequest = (input, context) => {
      return {
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1InventoryAggregatorList(input.Aggregators, context)
        },
        ...input.Filters != null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResultAttributes != null && {
          ResultAttributes: serializeAws_json1_1ResultAttributeList(input.ResultAttributes, context)
        }
      };
    };
    var serializeAws_json1_1GetInventorySchemaRequest = (input, context) => {
      return {
        ...input.Aggregator != null && { Aggregator: input.Aggregator },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.SubType != null && { SubType: input.SubType },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowExecutionRequest = (input, context) => {
      return {
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationRequest = (input, context) => {
      return {
        ...input.InvocationId != null && { InvocationId: input.InvocationId },
        ...input.TaskId != null && { TaskId: input.TaskId },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowExecutionTaskRequest = (input, context) => {
      return {
        ...input.TaskId != null && { TaskId: input.TaskId },
        ...input.WindowExecutionId != null && { WindowExecutionId: input.WindowExecutionId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1GetMaintenanceWindowTaskRequest = (input, context) => {
      return {
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTaskId != null && { WindowTaskId: input.WindowTaskId }
      };
    };
    var serializeAws_json1_1GetOpsItemRequest = (input, context) => {
      return {
        ...input.OpsItemArn != null && { OpsItemArn: input.OpsItemArn },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1GetOpsMetadataRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OpsMetadataArn != null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    };
    var serializeAws_json1_1GetOpsSummaryRequest = (input, context) => {
      return {
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1OpsAggregatorList(input.Aggregators, context)
        },
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResultAttributes != null && {
          ResultAttributes: serializeAws_json1_1OpsResultAttributeList(input.ResultAttributes, context)
        },
        ...input.SyncName != null && { SyncName: input.SyncName }
      };
    };
    var serializeAws_json1_1GetParameterHistoryRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetParameterRequest = (input, context) => {
      return {
        ...input.Name != null && { Name: input.Name },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetParametersByPathRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ParameterFilters != null && {
          ParameterFilters: serializeAws_json1_1ParameterStringFilterList(input.ParameterFilters, context)
        },
        ...input.Path != null && { Path: input.Path },
        ...input.Recursive != null && { Recursive: input.Recursive },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetParametersRequest = (input, context) => {
      return {
        ...input.Names != null && { Names: serializeAws_json1_1ParameterNameList(input.Names, context) },
        ...input.WithDecryption != null && { WithDecryption: input.WithDecryption }
      };
    };
    var serializeAws_json1_1GetPatchBaselineForPatchGroupRequest = (input, context) => {
      return {
        ...input.OperatingSystem != null && { OperatingSystem: input.OperatingSystem },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1GetPatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId }
      };
    };
    var serializeAws_json1_1GetResourcePoliciesRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn }
      };
    };
    var serializeAws_json1_1GetServiceSettingRequest = (input, context) => {
      return {
        ...input.SettingId != null && { SettingId: input.SettingId }
      };
    };
    var serializeAws_json1_1InstanceAssociationOutputLocation = (input, context) => {
      return {
        ...input.S3Location != null && { S3Location: serializeAws_json1_1S3OutputLocation(input.S3Location, context) }
      };
    };
    var serializeAws_json1_1InstanceIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InstanceInformationFilter = (input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.valueSet != null && {
          valueSet: serializeAws_json1_1InstanceInformationFilterValueSet(input.valueSet, context)
        }
      };
    };
    var serializeAws_json1_1InstanceInformationFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InstanceInformationFilter(entry, context);
      });
    };
    var serializeAws_json1_1InstanceInformationFilterValueSet = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InstanceInformationStringFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && {
          Values: serializeAws_json1_1InstanceInformationFilterValueSet(input.Values, context)
        }
      };
    };
    var serializeAws_json1_1InstanceInformationStringFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InstanceInformationStringFilter(entry, context);
      });
    };
    var serializeAws_json1_1InstancePatchStateFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1InstancePatchStateFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1InstancePatchStateFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InstancePatchStateFilter(entry, context);
      });
    };
    var serializeAws_json1_1InstancePatchStateFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InventoryAggregator = (input, context) => {
      return {
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1InventoryAggregatorList(input.Aggregators, context)
        },
        ...input.Expression != null && { Expression: input.Expression },
        ...input.Groups != null && { Groups: serializeAws_json1_1InventoryGroupList(input.Groups, context) }
      };
    };
    var serializeAws_json1_1InventoryAggregatorList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryAggregator(entry, context);
      });
    };
    var serializeAws_json1_1InventoryFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1InventoryFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1InventoryFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryFilter(entry, context);
      });
    };
    var serializeAws_json1_1InventoryFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1InventoryGroup = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1InventoryGroupList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryGroup(entry, context);
      });
    };
    var serializeAws_json1_1InventoryItem = (input, context) => {
      return {
        ...input.CaptureTime != null && { CaptureTime: input.CaptureTime },
        ...input.Content != null && { Content: serializeAws_json1_1InventoryItemEntryList(input.Content, context) },
        ...input.ContentHash != null && { ContentHash: input.ContentHash },
        ...input.Context != null && { Context: serializeAws_json1_1InventoryItemContentContext(input.Context, context) },
        ...input.SchemaVersion != null && { SchemaVersion: input.SchemaVersion },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1InventoryItemContentContext = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_json1_1InventoryItemEntry = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_json1_1InventoryItemEntryList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryItemEntry(entry, context);
      });
    };
    var serializeAws_json1_1InventoryItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1InventoryItem(entry, context);
      });
    };
    var serializeAws_json1_1KeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1LabelParameterVersionRequest = (input, context) => {
      return {
        ...input.Labels != null && { Labels: serializeAws_json1_1ParameterLabelList(input.Labels, context) },
        ...input.Name != null && { Name: input.Name },
        ...input.ParameterVersion != null && { ParameterVersion: input.ParameterVersion }
      };
    };
    var serializeAws_json1_1ListAssociationsRequest = (input, context) => {
      return {
        ...input.AssociationFilterList != null && {
          AssociationFilterList: serializeAws_json1_1AssociationFilterList(input.AssociationFilterList, context)
        },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListAssociationVersionsRequest = (input, context) => {
      return {
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListCommandInvocationsRequest = (input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.Details != null && { Details: input.Details },
        ...input.Filters != null && { Filters: serializeAws_json1_1CommandFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListCommandsRequest = (input, context) => {
      return {
        ...input.CommandId != null && { CommandId: input.CommandId },
        ...input.Filters != null && { Filters: serializeAws_json1_1CommandFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListComplianceItemsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceIds != null && {
          ResourceIds: serializeAws_json1_1ComplianceResourceIdList(input.ResourceIds, context)
        },
        ...input.ResourceTypes != null && {
          ResourceTypes: serializeAws_json1_1ComplianceResourceTypeList(input.ResourceTypes, context)
        }
      };
    };
    var serializeAws_json1_1ListComplianceSummariesRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListDocumentMetadataHistoryRequest = (input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Metadata != null && { Metadata: input.Metadata },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListDocumentsRequest = (input, context) => {
      return {
        ...input.DocumentFilterList != null && {
          DocumentFilterList: serializeAws_json1_1DocumentFilterList(input.DocumentFilterList, context)
        },
        ...input.Filters != null && { Filters: serializeAws_json1_1DocumentKeyValuesFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListDocumentVersionsRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.Name != null && { Name: input.Name },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListInventoryEntriesRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1InventoryFilterList(input.Filters, context) },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1ListOpsItemEventsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsItemEventFilters(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListOpsItemRelatedItemsRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsItemRelatedItemsFilters(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1ListOpsMetadataRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsMetadataFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListResourceComplianceSummariesRequest = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_json1_1ComplianceStringFilterList(input.Filters, context) },
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken }
      };
    };
    var serializeAws_json1_1ListResourceDataSyncRequest = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1ListTagsForResourceRequest = (input, context) => {
      return {
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType }
      };
    };
    var serializeAws_json1_1LoggingInfo = (input, context) => {
      return {
        ...input.S3BucketName != null && { S3BucketName: input.S3BucketName },
        ...input.S3KeyPrefix != null && { S3KeyPrefix: input.S3KeyPrefix },
        ...input.S3Region != null && { S3Region: input.S3Region }
      };
    };
    var serializeAws_json1_1MaintenanceWindowAutomationParameters = (input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        }
      };
    };
    var serializeAws_json1_1MaintenanceWindowFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1MaintenanceWindowFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1MaintenanceWindowFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1MaintenanceWindowFilter(entry, context);
      });
    };
    var serializeAws_json1_1MaintenanceWindowFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1MaintenanceWindowLambdaParameters = (input, context) => {
      return {
        ...input.ClientContext != null && { ClientContext: input.ClientContext },
        ...input.Payload != null && { Payload: context.base64Encoder(input.Payload) },
        ...input.Qualifier != null && { Qualifier: input.Qualifier }
      };
    };
    var serializeAws_json1_1MaintenanceWindowRunCommandParameters = (input, context) => {
      return {
        ...input.CloudWatchOutputConfig != null && {
          CloudWatchOutputConfig: serializeAws_json1_1CloudWatchOutputConfig(input.CloudWatchOutputConfig, context)
        },
        ...input.Comment != null && { Comment: input.Comment },
        ...input.DocumentHash != null && { DocumentHash: input.DocumentHash },
        ...input.DocumentHashType != null && { DocumentHashType: input.DocumentHashType },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.NotificationConfig != null && {
          NotificationConfig: serializeAws_json1_1NotificationConfig(input.NotificationConfig, context)
        },
        ...input.OutputS3BucketName != null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix != null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.TimeoutSeconds != null && { TimeoutSeconds: input.TimeoutSeconds }
      };
    };
    var serializeAws_json1_1MaintenanceWindowStepFunctionsParameters = (input, context) => {
      return {
        ...input.Input != null && { Input: input.Input },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1MaintenanceWindowTaskInvocationParameters = (input, context) => {
      return {
        ...input.Automation != null && {
          Automation: serializeAws_json1_1MaintenanceWindowAutomationParameters(input.Automation, context)
        },
        ...input.Lambda != null && {
          Lambda: serializeAws_json1_1MaintenanceWindowLambdaParameters(input.Lambda, context)
        },
        ...input.RunCommand != null && {
          RunCommand: serializeAws_json1_1MaintenanceWindowRunCommandParameters(input.RunCommand, context)
        },
        ...input.StepFunctions != null && {
          StepFunctions: serializeAws_json1_1MaintenanceWindowStepFunctionsParameters(input.StepFunctions, context)
        }
      };
    };
    var serializeAws_json1_1MaintenanceWindowTaskParameters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1MaintenanceWindowTaskParameterValueExpression = (input, context) => {
      return {
        ...input.Values != null && {
          Values: serializeAws_json1_1MaintenanceWindowTaskParameterValueList(input.Values, context)
        }
      };
    };
    var serializeAws_json1_1MaintenanceWindowTaskParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1MetadataKeysToDeleteList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1MetadataMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1MetadataValue(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1MetadataValue = (input, context) => {
      return {
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1ModifyDocumentPermissionRequest = (input, context) => {
      return {
        ...input.AccountIdsToAdd != null && {
          AccountIdsToAdd: serializeAws_json1_1AccountIdList(input.AccountIdsToAdd, context)
        },
        ...input.AccountIdsToRemove != null && {
          AccountIdsToRemove: serializeAws_json1_1AccountIdList(input.AccountIdsToRemove, context)
        },
        ...input.Name != null && { Name: input.Name },
        ...input.PermissionType != null && { PermissionType: input.PermissionType },
        ...input.SharedDocumentVersion != null && { SharedDocumentVersion: input.SharedDocumentVersion }
      };
    };
    var serializeAws_json1_1NotificationConfig = (input, context) => {
      return {
        ...input.NotificationArn != null && { NotificationArn: input.NotificationArn },
        ...input.NotificationEvents != null && {
          NotificationEvents: serializeAws_json1_1NotificationEventList(input.NotificationEvents, context)
        },
        ...input.NotificationType != null && { NotificationType: input.NotificationType }
      };
    };
    var serializeAws_json1_1NotificationEventList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsAggregator = (input, context) => {
      return {
        ...input.AggregatorType != null && { AggregatorType: input.AggregatorType },
        ...input.Aggregators != null && {
          Aggregators: serializeAws_json1_1OpsAggregatorList(input.Aggregators, context)
        },
        ...input.AttributeName != null && { AttributeName: input.AttributeName },
        ...input.Filters != null && { Filters: serializeAws_json1_1OpsFilterList(input.Filters, context) },
        ...input.TypeName != null && { TypeName: input.TypeName },
        ...input.Values != null && { Values: serializeAws_json1_1OpsAggregatorValueMap(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsAggregatorList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsAggregator(entry, context);
      });
    };
    var serializeAws_json1_1OpsAggregatorValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_json1_1OpsFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Type != null && { Type: input.Type },
        ...input.Values != null && { Values: serializeAws_json1_1OpsFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemDataValue = (input, context) => {
      return {
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1OpsItemEventFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Operator != null && { Operator: input.Operator },
        ...input.Values != null && { Values: serializeAws_json1_1OpsItemEventFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsItemEventFilters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemEventFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemEventFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Operator != null && { Operator: input.Operator },
        ...input.Values != null && { Values: serializeAws_json1_1OpsItemFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsItemFilters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemNotification = (input, context) => {
      return {
        ...input.Arn != null && { Arn: input.Arn }
      };
    };
    var serializeAws_json1_1OpsItemNotifications = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemNotification(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemOperationalData = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1OpsItemDataValue(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1OpsItemOpsDataKeysList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsItemRelatedItemsFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Operator != null && { Operator: input.Operator },
        ...input.Values != null && { Values: serializeAws_json1_1OpsItemRelatedItemsFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsItemRelatedItemsFilters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsItemRelatedItemsFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsItemRelatedItemsFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsMetadataFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1OpsMetadataFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1OpsMetadataFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsMetadataFilter(entry, context);
      });
    };
    var serializeAws_json1_1OpsMetadataFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1OpsResultAttribute = (input, context) => {
      return {
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1OpsResultAttributeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1OpsResultAttribute(entry, context);
      });
    };
    var serializeAws_json1_1ParameterLabelList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ParameterNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1Parameters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1ParameterValueList(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1ParametersFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1ParametersFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1ParametersFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ParametersFilter(entry, context);
      });
    };
    var serializeAws_json1_1ParametersFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ParameterStringFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Option != null && { Option: input.Option },
        ...input.Values != null && { Values: serializeAws_json1_1ParameterStringFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1ParameterStringFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ParameterStringFilter(entry, context);
      });
    };
    var serializeAws_json1_1ParameterStringFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1PatchFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1PatchFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1PatchFilterGroup = (input, context) => {
      return {
        ...input.PatchFilters != null && {
          PatchFilters: serializeAws_json1_1PatchFilterList(input.PatchFilters, context)
        }
      };
    };
    var serializeAws_json1_1PatchFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchFilter(entry, context);
      });
    };
    var serializeAws_json1_1PatchFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1PatchIdList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1PatchOrchestratorFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1PatchOrchestratorFilterValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1PatchOrchestratorFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchOrchestratorFilter(entry, context);
      });
    };
    var serializeAws_json1_1PatchOrchestratorFilterValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1PatchRule = (input, context) => {
      return {
        ...input.ApproveAfterDays != null && { ApproveAfterDays: input.ApproveAfterDays },
        ...input.ApproveUntilDate != null && { ApproveUntilDate: input.ApproveUntilDate },
        ...input.ComplianceLevel != null && { ComplianceLevel: input.ComplianceLevel },
        ...input.EnableNonSecurity != null && { EnableNonSecurity: input.EnableNonSecurity },
        ...input.PatchFilterGroup != null && {
          PatchFilterGroup: serializeAws_json1_1PatchFilterGroup(input.PatchFilterGroup, context)
        }
      };
    };
    var serializeAws_json1_1PatchRuleGroup = (input, context) => {
      return {
        ...input.PatchRules != null && { PatchRules: serializeAws_json1_1PatchRuleList(input.PatchRules, context) }
      };
    };
    var serializeAws_json1_1PatchRuleList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchRule(entry, context);
      });
    };
    var serializeAws_json1_1PatchSource = (input, context) => {
      return {
        ...input.Configuration != null && { Configuration: input.Configuration },
        ...input.Name != null && { Name: input.Name },
        ...input.Products != null && { Products: serializeAws_json1_1PatchSourceProductList(input.Products, context) }
      };
    };
    var serializeAws_json1_1PatchSourceList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1PatchSource(entry, context);
      });
    };
    var serializeAws_json1_1PatchSourceProductList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1PutComplianceItemsRequest = (input, context) => {
      return {
        ...input.ComplianceType != null && { ComplianceType: input.ComplianceType },
        ...input.ExecutionSummary != null && {
          ExecutionSummary: serializeAws_json1_1ComplianceExecutionSummary(input.ExecutionSummary, context)
        },
        ...input.ItemContentHash != null && { ItemContentHash: input.ItemContentHash },
        ...input.Items != null && { Items: serializeAws_json1_1ComplianceItemEntryList(input.Items, context) },
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.UploadType != null && { UploadType: input.UploadType }
      };
    };
    var serializeAws_json1_1PutInventoryRequest = (input, context) => {
      return {
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Items != null && { Items: serializeAws_json1_1InventoryItemList(input.Items, context) }
      };
    };
    var serializeAws_json1_1PutParameterRequest = (input, context) => {
      return {
        ...input.AllowedPattern != null && { AllowedPattern: input.AllowedPattern },
        ...input.DataType != null && { DataType: input.DataType },
        ...input.Description != null && { Description: input.Description },
        ...input.KeyId != null && { KeyId: input.KeyId },
        ...input.Name != null && { Name: input.Name },
        ...input.Overwrite != null && { Overwrite: input.Overwrite },
        ...input.Policies != null && { Policies: input.Policies },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.Tier != null && { Tier: input.Tier },
        ...input.Type != null && { Type: input.Type },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1PutResourcePolicyRequest = (input, context) => {
      return {
        ...input.Policy != null && { Policy: input.Policy },
        ...input.PolicyHash != null && { PolicyHash: input.PolicyHash },
        ...input.PolicyId != null && { PolicyId: input.PolicyId },
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn }
      };
    };
    var serializeAws_json1_1Regions = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1RegisterDefaultPatchBaselineRequest = (input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId }
      };
    };
    var serializeAws_json1_1RegisterPatchBaselineForPatchGroupRequest = (input, context) => {
      return {
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.PatchGroup != null && { PatchGroup: input.PatchGroup }
      };
    };
    var serializeAws_json1_1RegisterTargetWithMaintenanceWindowRequest = (input, context) => {
      return {
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.Description != null && { Description: input.Description },
        ...input.Name != null && { Name: input.Name },
        ...input.OwnerInformation != null && { OwnerInformation: input.OwnerInformation },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1RegisterTaskWithMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ClientToken: input.ClientToken ?? (0, uuid_1.v4)(),
        ...input.CutoffBehavior != null && { CutoffBehavior: input.CutoffBehavior },
        ...input.Description != null && { Description: input.Description },
        ...input.LoggingInfo != null && { LoggingInfo: serializeAws_json1_1LoggingInfo(input.LoggingInfo, context) },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TaskArn != null && { TaskArn: input.TaskArn },
        ...input.TaskInvocationParameters != null && {
          TaskInvocationParameters: serializeAws_json1_1MaintenanceWindowTaskInvocationParameters(input.TaskInvocationParameters, context)
        },
        ...input.TaskParameters != null && {
          TaskParameters: serializeAws_json1_1MaintenanceWindowTaskParameters(input.TaskParameters, context)
        },
        ...input.TaskType != null && { TaskType: input.TaskType },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1RegistrationMetadataItem = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1RegistrationMetadataList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1RegistrationMetadataItem(entry, context);
      });
    };
    var serializeAws_json1_1RelatedOpsItem = (input, context) => {
      return {
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId }
      };
    };
    var serializeAws_json1_1RelatedOpsItems = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1RelatedOpsItem(entry, context);
      });
    };
    var serializeAws_json1_1RemoveTagsFromResourceRequest = (input, context) => {
      return {
        ...input.ResourceId != null && { ResourceId: input.ResourceId },
        ...input.ResourceType != null && { ResourceType: input.ResourceType },
        ...input.TagKeys != null && { TagKeys: serializeAws_json1_1KeyList(input.TagKeys, context) }
      };
    };
    var serializeAws_json1_1ResetServiceSettingRequest = (input, context) => {
      return {
        ...input.SettingId != null && { SettingId: input.SettingId }
      };
    };
    var serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource = (input, context) => {
      return {
        ...input.OrganizationSourceType != null && { OrganizationSourceType: input.OrganizationSourceType },
        ...input.OrganizationalUnits != null && {
          OrganizationalUnits: serializeAws_json1_1ResourceDataSyncOrganizationalUnitList(input.OrganizationalUnits, context)
        }
      };
    };
    var serializeAws_json1_1ResourceDataSyncDestinationDataSharing = (input, context) => {
      return {
        ...input.DestinationDataSharingType != null && { DestinationDataSharingType: input.DestinationDataSharingType }
      };
    };
    var serializeAws_json1_1ResourceDataSyncOrganizationalUnit = (input, context) => {
      return {
        ...input.OrganizationalUnitId != null && { OrganizationalUnitId: input.OrganizationalUnitId }
      };
    };
    var serializeAws_json1_1ResourceDataSyncOrganizationalUnitList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ResourceDataSyncOrganizationalUnit(entry, context);
      });
    };
    var serializeAws_json1_1ResourceDataSyncS3Destination = (input, context) => {
      return {
        ...input.AWSKMSKeyARN != null && { AWSKMSKeyARN: input.AWSKMSKeyARN },
        ...input.BucketName != null && { BucketName: input.BucketName },
        ...input.DestinationDataSharing != null && {
          DestinationDataSharing: serializeAws_json1_1ResourceDataSyncDestinationDataSharing(input.DestinationDataSharing, context)
        },
        ...input.Prefix != null && { Prefix: input.Prefix },
        ...input.Region != null && { Region: input.Region },
        ...input.SyncFormat != null && { SyncFormat: input.SyncFormat }
      };
    };
    var serializeAws_json1_1ResourceDataSyncSource = (input, context) => {
      return {
        ...input.AwsOrganizationsSource != null && {
          AwsOrganizationsSource: serializeAws_json1_1ResourceDataSyncAwsOrganizationsSource(input.AwsOrganizationsSource, context)
        },
        ...input.EnableAllOpsDataSources != null && { EnableAllOpsDataSources: input.EnableAllOpsDataSources },
        ...input.IncludeFutureRegions != null && { IncludeFutureRegions: input.IncludeFutureRegions },
        ...input.SourceRegions != null && {
          SourceRegions: serializeAws_json1_1ResourceDataSyncSourceRegionList(input.SourceRegions, context)
        },
        ...input.SourceType != null && { SourceType: input.SourceType }
      };
    };
    var serializeAws_json1_1ResourceDataSyncSourceRegionList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1ResultAttribute = (input, context) => {
      return {
        ...input.TypeName != null && { TypeName: input.TypeName }
      };
    };
    var serializeAws_json1_1ResultAttributeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1ResultAttribute(entry, context);
      });
    };
    var serializeAws_json1_1ResumeSessionRequest = (input, context) => {
      return {
        ...input.SessionId != null && { SessionId: input.SessionId }
      };
    };
    var serializeAws_json1_1Runbook = (input, context) => {
      return {
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.TargetParameterName != null && { TargetParameterName: input.TargetParameterName },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1Runbooks = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Runbook(entry, context);
      });
    };
    var serializeAws_json1_1S3OutputLocation = (input, context) => {
      return {
        ...input.OutputS3BucketName != null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix != null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.OutputS3Region != null && { OutputS3Region: input.OutputS3Region }
      };
    };
    var serializeAws_json1_1SendAutomationSignalRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Payload != null && { Payload: serializeAws_json1_1AutomationParameterMap(input.Payload, context) },
        ...input.SignalType != null && { SignalType: input.SignalType }
      };
    };
    var serializeAws_json1_1SendCommandRequest = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.CloudWatchOutputConfig != null && {
          CloudWatchOutputConfig: serializeAws_json1_1CloudWatchOutputConfig(input.CloudWatchOutputConfig, context)
        },
        ...input.Comment != null && { Comment: input.Comment },
        ...input.DocumentHash != null && { DocumentHash: input.DocumentHash },
        ...input.DocumentHashType != null && { DocumentHashType: input.DocumentHashType },
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.InstanceIds != null && { InstanceIds: serializeAws_json1_1InstanceIdList(input.InstanceIds, context) },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.NotificationConfig != null && {
          NotificationConfig: serializeAws_json1_1NotificationConfig(input.NotificationConfig, context)
        },
        ...input.OutputS3BucketName != null && { OutputS3BucketName: input.OutputS3BucketName },
        ...input.OutputS3KeyPrefix != null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix },
        ...input.OutputS3Region != null && { OutputS3Region: input.OutputS3Region },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TimeoutSeconds != null && { TimeoutSeconds: input.TimeoutSeconds }
      };
    };
    var serializeAws_json1_1SessionFilter = (input, context) => {
      return {
        ...input.key != null && { key: input.key },
        ...input.value != null && { value: input.value }
      };
    };
    var serializeAws_json1_1SessionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1SessionFilter(entry, context);
      });
    };
    var serializeAws_json1_1SessionManagerParameters = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1SessionManagerParameterValueList(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1SessionManagerParameterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1StartAssociationsOnceRequest = (input, context) => {
      return {
        ...input.AssociationIds != null && {
          AssociationIds: serializeAws_json1_1AssociationIdList(input.AssociationIds, context)
        }
      };
    };
    var serializeAws_json1_1StartAutomationExecutionRequest = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ClientToken != null && { ClientToken: input.ClientToken },
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Mode != null && { Mode: input.Mode },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.TargetParameterName != null && { TargetParameterName: input.TargetParameterName },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1StartChangeRequestExecutionRequest = (input, context) => {
      return {
        ...input.AutoApprove != null && { AutoApprove: input.AutoApprove },
        ...input.ChangeDetails != null && { ChangeDetails: input.ChangeDetails },
        ...input.ChangeRequestName != null && { ChangeRequestName: input.ChangeRequestName },
        ...input.ClientToken != null && { ClientToken: input.ClientToken },
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1AutomationParameterMap(input.Parameters, context)
        },
        ...input.Runbooks != null && { Runbooks: serializeAws_json1_1Runbooks(input.Runbooks, context) },
        ...input.ScheduledEndTime != null && { ScheduledEndTime: Math.round(input.ScheduledEndTime.getTime() / 1e3) },
        ...input.ScheduledTime != null && { ScheduledTime: Math.round(input.ScheduledTime.getTime() / 1e3) },
        ...input.Tags != null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_1StartSessionRequest = (input, context) => {
      return {
        ...input.DocumentName != null && { DocumentName: input.DocumentName },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_1SessionManagerParameters(input.Parameters, context)
        },
        ...input.Reason != null && { Reason: input.Reason },
        ...input.Target != null && { Target: input.Target }
      };
    };
    var serializeAws_json1_1StepExecutionFilter = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1StepExecutionFilterValueList(input.Values, context) }
      };
    };
    var serializeAws_json1_1StepExecutionFilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1StepExecutionFilter(entry, context);
      });
    };
    var serializeAws_json1_1StepExecutionFilterValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1StopAutomationExecutionRequest = (input, context) => {
      return {
        ...input.AutomationExecutionId != null && { AutomationExecutionId: input.AutomationExecutionId },
        ...input.Type != null && { Type: input.Type }
      };
    };
    var serializeAws_json1_1StringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1Tag = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_1TagList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
      });
    };
    var serializeAws_json1_1Target = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Values != null && { Values: serializeAws_json1_1TargetValues(input.Values, context) }
      };
    };
    var serializeAws_json1_1TargetLocation = (input, context) => {
      return {
        ...input.Accounts != null && { Accounts: serializeAws_json1_1Accounts(input.Accounts, context) },
        ...input.ExecutionRoleName != null && { ExecutionRoleName: input.ExecutionRoleName },
        ...input.Regions != null && { Regions: serializeAws_json1_1Regions(input.Regions, context) },
        ...input.TargetLocationAlarmConfiguration != null && {
          TargetLocationAlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.TargetLocationAlarmConfiguration, context)
        },
        ...input.TargetLocationMaxConcurrency != null && {
          TargetLocationMaxConcurrency: input.TargetLocationMaxConcurrency
        },
        ...input.TargetLocationMaxErrors != null && { TargetLocationMaxErrors: input.TargetLocationMaxErrors }
      };
    };
    var serializeAws_json1_1TargetLocations = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TargetLocation(entry, context);
      });
    };
    var serializeAws_json1_1TargetMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_json1_1TargetMapValueList(value, context);
        return acc;
      }, {});
    };
    var serializeAws_json1_1TargetMaps = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1TargetMap(entry, context);
      });
    };
    var serializeAws_json1_1TargetMapValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1Targets = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_1Target(entry, context);
      });
    };
    var serializeAws_json1_1TargetValues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_1TerminateSessionRequest = (input, context) => {
      return {
        ...input.SessionId != null && { SessionId: input.SessionId }
      };
    };
    var serializeAws_json1_1UnlabelParameterVersionRequest = (input, context) => {
      return {
        ...input.Labels != null && { Labels: serializeAws_json1_1ParameterLabelList(input.Labels, context) },
        ...input.Name != null && { Name: input.Name },
        ...input.ParameterVersion != null && { ParameterVersion: input.ParameterVersion }
      };
    };
    var serializeAws_json1_1UpdateAssociationRequest = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.ApplyOnlyAtCronInterval != null && { ApplyOnlyAtCronInterval: input.ApplyOnlyAtCronInterval },
        ...input.AssociationId != null && { AssociationId: input.AssociationId },
        ...input.AssociationName != null && { AssociationName: input.AssociationName },
        ...input.AssociationVersion != null && { AssociationVersion: input.AssociationVersion },
        ...input.AutomationTargetParameterName != null && {
          AutomationTargetParameterName: input.AutomationTargetParameterName
        },
        ...input.CalendarNames != null && {
          CalendarNames: serializeAws_json1_1CalendarNameOrARNList(input.CalendarNames, context)
        },
        ...input.ComplianceSeverity != null && { ComplianceSeverity: input.ComplianceSeverity },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.OutputLocation != null && {
          OutputLocation: serializeAws_json1_1InstanceAssociationOutputLocation(input.OutputLocation, context)
        },
        ...input.Parameters != null && { Parameters: serializeAws_json1_1Parameters(input.Parameters, context) },
        ...input.ScheduleExpression != null && { ScheduleExpression: input.ScheduleExpression },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.SyncCompliance != null && { SyncCompliance: input.SyncCompliance },
        ...input.TargetLocations != null && {
          TargetLocations: serializeAws_json1_1TargetLocations(input.TargetLocations, context)
        },
        ...input.TargetMaps != null && { TargetMaps: serializeAws_json1_1TargetMaps(input.TargetMaps, context) },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) }
      };
    };
    var serializeAws_json1_1UpdateAssociationStatusRequest = (input, context) => {
      return {
        ...input.AssociationStatus != null && {
          AssociationStatus: serializeAws_json1_1AssociationStatus(input.AssociationStatus, context)
        },
        ...input.InstanceId != null && { InstanceId: input.InstanceId },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1UpdateDocumentDefaultVersionRequest = (input, context) => {
      return {
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1UpdateDocumentMetadataRequest = (input, context) => {
      return {
        ...input.DocumentReviews != null && {
          DocumentReviews: serializeAws_json1_1DocumentReviews(input.DocumentReviews, context)
        },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name }
      };
    };
    var serializeAws_json1_1UpdateDocumentRequest = (input, context) => {
      return {
        ...input.Attachments != null && {
          Attachments: serializeAws_json1_1AttachmentsSourceList(input.Attachments, context)
        },
        ...input.Content != null && { Content: input.Content },
        ...input.DisplayName != null && { DisplayName: input.DisplayName },
        ...input.DocumentFormat != null && { DocumentFormat: input.DocumentFormat },
        ...input.DocumentVersion != null && { DocumentVersion: input.DocumentVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.TargetType != null && { TargetType: input.TargetType },
        ...input.VersionName != null && { VersionName: input.VersionName }
      };
    };
    var serializeAws_json1_1UpdateMaintenanceWindowRequest = (input, context) => {
      return {
        ...input.AllowUnassociatedTargets != null && { AllowUnassociatedTargets: input.AllowUnassociatedTargets },
        ...input.Cutoff != null && { Cutoff: input.Cutoff },
        ...input.Description != null && { Description: input.Description },
        ...input.Duration != null && { Duration: input.Duration },
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.EndDate != null && { EndDate: input.EndDate },
        ...input.Name != null && { Name: input.Name },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.Schedule != null && { Schedule: input.Schedule },
        ...input.ScheduleOffset != null && { ScheduleOffset: input.ScheduleOffset },
        ...input.ScheduleTimezone != null && { ScheduleTimezone: input.ScheduleTimezone },
        ...input.StartDate != null && { StartDate: input.StartDate },
        ...input.WindowId != null && { WindowId: input.WindowId }
      };
    };
    var serializeAws_json1_1UpdateMaintenanceWindowTargetRequest = (input, context) => {
      return {
        ...input.Description != null && { Description: input.Description },
        ...input.Name != null && { Name: input.Name },
        ...input.OwnerInformation != null && { OwnerInformation: input.OwnerInformation },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTargetId != null && { WindowTargetId: input.WindowTargetId }
      };
    };
    var serializeAws_json1_1UpdateMaintenanceWindowTaskRequest = (input, context) => {
      return {
        ...input.AlarmConfiguration != null && {
          AlarmConfiguration: serializeAws_json1_1AlarmConfiguration(input.AlarmConfiguration, context)
        },
        ...input.CutoffBehavior != null && { CutoffBehavior: input.CutoffBehavior },
        ...input.Description != null && { Description: input.Description },
        ...input.LoggingInfo != null && { LoggingInfo: serializeAws_json1_1LoggingInfo(input.LoggingInfo, context) },
        ...input.MaxConcurrency != null && { MaxConcurrency: input.MaxConcurrency },
        ...input.MaxErrors != null && { MaxErrors: input.MaxErrors },
        ...input.Name != null && { Name: input.Name },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.ServiceRoleArn != null && { ServiceRoleArn: input.ServiceRoleArn },
        ...input.Targets != null && { Targets: serializeAws_json1_1Targets(input.Targets, context) },
        ...input.TaskArn != null && { TaskArn: input.TaskArn },
        ...input.TaskInvocationParameters != null && {
          TaskInvocationParameters: serializeAws_json1_1MaintenanceWindowTaskInvocationParameters(input.TaskInvocationParameters, context)
        },
        ...input.TaskParameters != null && {
          TaskParameters: serializeAws_json1_1MaintenanceWindowTaskParameters(input.TaskParameters, context)
        },
        ...input.WindowId != null && { WindowId: input.WindowId },
        ...input.WindowTaskId != null && { WindowTaskId: input.WindowTaskId }
      };
    };
    var serializeAws_json1_1UpdateManagedInstanceRoleRequest = (input, context) => {
      return {
        ...input.IamRole != null && { IamRole: input.IamRole },
        ...input.InstanceId != null && { InstanceId: input.InstanceId }
      };
    };
    var serializeAws_json1_1UpdateOpsItemRequest = (input, context) => {
      return {
        ...input.ActualEndTime != null && { ActualEndTime: Math.round(input.ActualEndTime.getTime() / 1e3) },
        ...input.ActualStartTime != null && { ActualStartTime: Math.round(input.ActualStartTime.getTime() / 1e3) },
        ...input.Category != null && { Category: input.Category },
        ...input.Description != null && { Description: input.Description },
        ...input.Notifications != null && {
          Notifications: serializeAws_json1_1OpsItemNotifications(input.Notifications, context)
        },
        ...input.OperationalData != null && {
          OperationalData: serializeAws_json1_1OpsItemOperationalData(input.OperationalData, context)
        },
        ...input.OperationalDataToDelete != null && {
          OperationalDataToDelete: serializeAws_json1_1OpsItemOpsDataKeysList(input.OperationalDataToDelete, context)
        },
        ...input.OpsItemArn != null && { OpsItemArn: input.OpsItemArn },
        ...input.OpsItemId != null && { OpsItemId: input.OpsItemId },
        ...input.PlannedEndTime != null && { PlannedEndTime: Math.round(input.PlannedEndTime.getTime() / 1e3) },
        ...input.PlannedStartTime != null && { PlannedStartTime: Math.round(input.PlannedStartTime.getTime() / 1e3) },
        ...input.Priority != null && { Priority: input.Priority },
        ...input.RelatedOpsItems != null && {
          RelatedOpsItems: serializeAws_json1_1RelatedOpsItems(input.RelatedOpsItems, context)
        },
        ...input.Severity != null && { Severity: input.Severity },
        ...input.Status != null && { Status: input.Status },
        ...input.Title != null && { Title: input.Title }
      };
    };
    var serializeAws_json1_1UpdateOpsMetadataRequest = (input, context) => {
      return {
        ...input.KeysToDelete != null && {
          KeysToDelete: serializeAws_json1_1MetadataKeysToDeleteList(input.KeysToDelete, context)
        },
        ...input.MetadataToUpdate != null && {
          MetadataToUpdate: serializeAws_json1_1MetadataMap(input.MetadataToUpdate, context)
        },
        ...input.OpsMetadataArn != null && { OpsMetadataArn: input.OpsMetadataArn }
      };
    };
    var serializeAws_json1_1UpdatePatchBaselineRequest = (input, context) => {
      return {
        ...input.ApprovalRules != null && {
          ApprovalRules: serializeAws_json1_1PatchRuleGroup(input.ApprovalRules, context)
        },
        ...input.ApprovedPatches != null && {
          ApprovedPatches: serializeAws_json1_1PatchIdList(input.ApprovedPatches, context)
        },
        ...input.ApprovedPatchesComplianceLevel != null && {
          ApprovedPatchesComplianceLevel: input.ApprovedPatchesComplianceLevel
        },
        ...input.ApprovedPatchesEnableNonSecurity != null && {
          ApprovedPatchesEnableNonSecurity: input.ApprovedPatchesEnableNonSecurity
        },
        ...input.BaselineId != null && { BaselineId: input.BaselineId },
        ...input.Description != null && { Description: input.Description },
        ...input.GlobalFilters != null && {
          GlobalFilters: serializeAws_json1_1PatchFilterGroup(input.GlobalFilters, context)
        },
        ...input.Name != null && { Name: input.Name },
        ...input.RejectedPatches != null && {
          RejectedPatches: serializeAws_json1_1PatchIdList(input.RejectedPatches, context)
        },
        ...input.RejectedPatchesAction != null && { RejectedPatchesAction: input.RejectedPatchesAction },
        ...input.Replace != null && { Replace: input.Replace },
        ...input.Sources != null && { Sources: serializeAws_json1_1PatchSourceList(input.Sources, context) }
      };
    };
    var serializeAws_json1_1UpdateResourceDataSyncRequest = (input, context) => {
      return {
        ...input.SyncName != null && { SyncName: input.SyncName },
        ...input.SyncSource != null && {
          SyncSource: serializeAws_json1_1ResourceDataSyncSource(input.SyncSource, context)
        },
        ...input.SyncType != null && { SyncType: input.SyncType }
      };
    };
    var serializeAws_json1_1UpdateServiceSettingRequest = (input, context) => {
      return {
        ...input.SettingId != null && { SettingId: input.SettingId },
        ...input.SettingValue != null && { SettingValue: input.SettingValue }
      };
    };
    var deserializeAws_json1_1AccountIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1Accounts = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1AccountSharingInfo = (output, context) => {
      return {
        AccountId: (0, smithy_client_1.expectString)(output.AccountId),
        SharedDocumentVersion: (0, smithy_client_1.expectString)(output.SharedDocumentVersion)
      };
    };
    var deserializeAws_json1_1AccountSharingInfoList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AccountSharingInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Activation = (output, context) => {
      return {
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DefaultInstanceName: (0, smithy_client_1.expectString)(output.DefaultInstanceName),
        Description: (0, smithy_client_1.expectString)(output.Description),
        ExpirationDate: output.ExpirationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpirationDate))) : void 0,
        Expired: (0, smithy_client_1.expectBoolean)(output.Expired),
        IamRole: (0, smithy_client_1.expectString)(output.IamRole),
        RegistrationLimit: (0, smithy_client_1.expectInt32)(output.RegistrationLimit),
        RegistrationsCount: (0, smithy_client_1.expectInt32)(output.RegistrationsCount),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0
      };
    };
    var deserializeAws_json1_1ActivationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Activation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AddTagsToResourceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1Alarm = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1AlarmConfiguration = (output, context) => {
      return {
        Alarms: output.Alarms != null ? deserializeAws_json1_1AlarmList(output.Alarms, context) : void 0,
        IgnorePollAlarmFailure: (0, smithy_client_1.expectBoolean)(output.IgnorePollAlarmFailure)
      };
    };
    var deserializeAws_json1_1AlarmList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Alarm(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AlarmStateInformation = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    };
    var deserializeAws_json1_1AlarmStateInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AlarmStateInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AlreadyExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociatedInstances = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AssociateOpsItemRelatedItemResponse = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId)
      };
    };
    var deserializeAws_json1_1Association = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Overview: output.Overview != null ? deserializeAws_json1_1AssociationOverview(output.Overview, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationAlreadyExists = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AssociationDescription = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        AutomationTargetParameterName: (0, smithy_client_1.expectString)(output.AutomationTargetParameterName),
        CalendarNames: output.CalendarNames != null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        Date: output.Date != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Date))) : void 0,
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        LastSuccessfulExecutionDate: output.LastSuccessfulExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulExecutionDate))) : void 0,
        LastUpdateAssociationDate: output.LastUpdateAssociationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateAssociationDate))) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation != null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Overview: output.Overview != null ? deserializeAws_json1_1AssociationOverview(output.Overview, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        Status: output.Status != null ? deserializeAws_json1_1AssociationStatus(output.Status, context) : void 0,
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationDoesNotExist = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociationExecution = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        ResourceCountByStatus: (0, smithy_client_1.expectString)(output.ResourceCountByStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationExecutionDoesNotExist = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociationExecutionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationExecutionTarget = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        LastExecutionDate: output.LastExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastExecutionDate))) : void 0,
        OutputSource: output.OutputSource != null ? deserializeAws_json1_1OutputSource(output.OutputSource, context) : void 0,
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1AssociationExecutionTargetsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationExecutionTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationLimitExceeded = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1AssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Association(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AssociationOverview = (output, context) => {
      return {
        AssociationStatusAggregatedCount: output.AssociationStatusAggregatedCount != null ? deserializeAws_json1_1AssociationStatusAggregatedCount(output.AssociationStatusAggregatedCount, context) : void 0,
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1AssociationStatus = (output, context) => {
      return {
        AdditionalInfo: (0, smithy_client_1.expectString)(output.AdditionalInfo),
        Date: output.Date != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.Date))) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1AssociationStatusAggregatedCount = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectInt32)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1AssociationVersionInfo = (output, context) => {
      return {
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        CalendarNames: output.CalendarNames != null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation != null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1AssociationVersionLimitExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AssociationVersionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AssociationVersionInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AttachmentContent = (output, context) => {
      return {
        Hash: (0, smithy_client_1.expectString)(output.Hash),
        HashType: (0, smithy_client_1.expectString)(output.HashType),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Size: (0, smithy_client_1.expectLong)(output.Size),
        Url: (0, smithy_client_1.expectString)(output.Url)
      };
    };
    var deserializeAws_json1_1AttachmentContentList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AttachmentContent(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AttachmentInformation = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1AttachmentInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AttachmentInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutomationDefinitionNotApprovedException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationDefinitionNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationDefinitionVersionNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationExecution = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId),
        AutomationExecutionStatus: (0, smithy_client_1.expectString)(output.AutomationExecutionStatus),
        AutomationSubtype: (0, smithy_client_1.expectString)(output.AutomationSubtype),
        ChangeRequestName: (0, smithy_client_1.expectString)(output.ChangeRequestName),
        CurrentAction: (0, smithy_client_1.expectString)(output.CurrentAction),
        CurrentStepName: (0, smithy_client_1.expectString)(output.CurrentStepName),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutedBy: (0, smithy_client_1.expectString)(output.ExecutedBy),
        ExecutionEndTime: output.ExecutionEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Outputs: output.Outputs != null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0,
        ParentAutomationExecutionId: (0, smithy_client_1.expectString)(output.ParentAutomationExecutionId),
        ProgressCounters: output.ProgressCounters != null ? deserializeAws_json1_1ProgressCounters(output.ProgressCounters, context) : void 0,
        ResolvedTargets: output.ResolvedTargets != null ? deserializeAws_json1_1ResolvedTargets(output.ResolvedTargets, context) : void 0,
        Runbooks: output.Runbooks != null ? deserializeAws_json1_1Runbooks(output.Runbooks, context) : void 0,
        ScheduledTime: output.ScheduledTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ScheduledTime))) : void 0,
        StepExecutions: output.StepExecutions != null ? deserializeAws_json1_1StepExecutionList(output.StepExecutions, context) : void 0,
        StepExecutionsTruncated: (0, smithy_client_1.expectBoolean)(output.StepExecutionsTruncated),
        Target: (0, smithy_client_1.expectString)(output.Target),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    };
    var deserializeAws_json1_1AutomationExecutionLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationExecutionMetadata = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId),
        AutomationExecutionStatus: (0, smithy_client_1.expectString)(output.AutomationExecutionStatus),
        AutomationSubtype: (0, smithy_client_1.expectString)(output.AutomationSubtype),
        AutomationType: (0, smithy_client_1.expectString)(output.AutomationType),
        ChangeRequestName: (0, smithy_client_1.expectString)(output.ChangeRequestName),
        CurrentAction: (0, smithy_client_1.expectString)(output.CurrentAction),
        CurrentStepName: (0, smithy_client_1.expectString)(output.CurrentStepName),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutedBy: (0, smithy_client_1.expectString)(output.ExecutedBy),
        ExecutionEndTime: output.ExecutionEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        LogFile: (0, smithy_client_1.expectString)(output.LogFile),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Mode: (0, smithy_client_1.expectString)(output.Mode),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Outputs: output.Outputs != null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        ParentAutomationExecutionId: (0, smithy_client_1.expectString)(output.ParentAutomationExecutionId),
        ResolvedTargets: output.ResolvedTargets != null ? deserializeAws_json1_1ResolvedTargets(output.ResolvedTargets, context) : void 0,
        Runbooks: output.Runbooks != null ? deserializeAws_json1_1Runbooks(output.Runbooks, context) : void 0,
        ScheduledTime: output.ScheduledTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ScheduledTime))) : void 0,
        Target: (0, smithy_client_1.expectString)(output.Target),
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    };
    var deserializeAws_json1_1AutomationExecutionMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1AutomationExecutionMetadata(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutomationExecutionNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1AutomationParameterMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1AutomationParameterValueList(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1AutomationParameterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1AutomationStepNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1CalendarNameOrARNList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1CancelCommandResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1CancelMaintenanceWindowExecutionResult = (output, context) => {
      return {
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1CategoryEnumList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1CategoryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1CloudWatchOutputConfig = (output, context) => {
      return {
        CloudWatchLogGroupName: (0, smithy_client_1.expectString)(output.CloudWatchLogGroupName),
        CloudWatchOutputEnabled: (0, smithy_client_1.expectBoolean)(output.CloudWatchOutputEnabled)
      };
    };
    var deserializeAws_json1_1Command = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        CompletedCount: (0, smithy_client_1.expectInt32)(output.CompletedCount),
        DeliveryTimedOutCount: (0, smithy_client_1.expectInt32)(output.DeliveryTimedOutCount),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ErrorCount: (0, smithy_client_1.expectInt32)(output.ErrorCount),
        ExpiresAfter: output.ExpiresAfter != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpiresAfter))) : void 0,
        InstanceIds: output.InstanceIds != null ? deserializeAws_json1_1InstanceIdList(output.InstanceIds, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        NotificationConfig: output.NotificationConfig != null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region),
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        RequestedDateTime: output.RequestedDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RequestedDateTime))) : void 0,
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TargetCount: (0, smithy_client_1.expectInt32)(output.TargetCount),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TimeoutSeconds: (0, smithy_client_1.expectInt32)(output.TimeoutSeconds),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0
      };
    };
    var deserializeAws_json1_1CommandInvocation = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        CommandPlugins: output.CommandPlugins != null ? deserializeAws_json1_1CommandPluginList(output.CommandPlugins, context) : void 0,
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        InstanceName: (0, smithy_client_1.expectString)(output.InstanceName),
        NotificationConfig: output.NotificationConfig != null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        RequestedDateTime: output.RequestedDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RequestedDateTime))) : void 0,
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TraceOutput: (0, smithy_client_1.expectString)(output.TraceOutput)
      };
    };
    var deserializeAws_json1_1CommandInvocationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CommandInvocation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1CommandList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Command(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1CommandPlugin = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Output: (0, smithy_client_1.expectString)(output.Output),
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region),
        ResponseCode: (0, smithy_client_1.expectInt32)(output.ResponseCode),
        ResponseFinishDateTime: output.ResponseFinishDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResponseFinishDateTime))) : void 0,
        ResponseStartDateTime: output.ResponseStartDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ResponseStartDateTime))) : void 0,
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails)
      };
    };
    var deserializeAws_json1_1CommandPluginList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1CommandPlugin(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ComplianceExecutionSummary = (output, context) => {
      return {
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        ExecutionTime: output.ExecutionTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionTime))) : void 0,
        ExecutionType: (0, smithy_client_1.expectString)(output.ExecutionType)
      };
    };
    var deserializeAws_json1_1ComplianceItem = (output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        Details: output.Details != null ? deserializeAws_json1_1ComplianceItemDetails(output.Details, context) : void 0,
        ExecutionSummary: output.ExecutionSummary != null ? deserializeAws_json1_1ComplianceExecutionSummary(output.ExecutionSummary, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    };
    var deserializeAws_json1_1ComplianceItemDetails = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1ComplianceItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ComplianceItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ComplianceSummaryItem = (output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantSummary: output.CompliantSummary != null ? deserializeAws_json1_1CompliantSummary(output.CompliantSummary, context) : void 0,
        NonCompliantSummary: output.NonCompliantSummary != null ? deserializeAws_json1_1NonCompliantSummary(output.NonCompliantSummary, context) : void 0
      };
    };
    var deserializeAws_json1_1ComplianceSummaryItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ComplianceSummaryItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ComplianceTypeCountLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1CompliantSummary = (output, context) => {
      return {
        CompliantCount: (0, smithy_client_1.expectInt32)(output.CompliantCount),
        SeveritySummary: output.SeveritySummary != null ? deserializeAws_json1_1SeveritySummary(output.SeveritySummary, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateActivationResult = (output, context) => {
      return {
        ActivationCode: (0, smithy_client_1.expectString)(output.ActivationCode),
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId)
      };
    };
    var deserializeAws_json1_1CreateAssociationBatchRequestEntry = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        ApplyOnlyAtCronInterval: (0, smithy_client_1.expectBoolean)(output.ApplyOnlyAtCronInterval),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AutomationTargetParameterName: (0, smithy_client_1.expectString)(output.AutomationTargetParameterName),
        CalendarNames: output.CalendarNames != null ? deserializeAws_json1_1CalendarNameOrARNList(output.CalendarNames, context) : void 0,
        ComplianceSeverity: (0, smithy_client_1.expectString)(output.ComplianceSeverity),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputLocation: output.OutputLocation != null ? deserializeAws_json1_1InstanceAssociationOutputLocation(output.OutputLocation, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ScheduleExpression: (0, smithy_client_1.expectString)(output.ScheduleExpression),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        SyncCompliance: (0, smithy_client_1.expectString)(output.SyncCompliance),
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateAssociationBatchResult = (output, context) => {
      return {
        Failed: output.Failed != null ? deserializeAws_json1_1FailedCreateAssociationList(output.Failed, context) : void 0,
        Successful: output.Successful != null ? deserializeAws_json1_1AssociationDescriptionList(output.Successful, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateAssociationResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateDocumentResult = (output, context) => {
      return {
        DocumentDescription: output.DocumentDescription != null ? deserializeAws_json1_1DocumentDescription(output.DocumentDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1CreateMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1CreateOpsItemResponse = (output, context) => {
      return {
        OpsItemArn: (0, smithy_client_1.expectString)(output.OpsItemArn),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    };
    var deserializeAws_json1_1CreateOpsMetadataResult = (output, context) => {
      return {
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn)
      };
    };
    var deserializeAws_json1_1CreatePatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    };
    var deserializeAws_json1_1CreateResourceDataSyncResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1CustomSchemaCountLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DeleteActivationResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteAssociationResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteDocumentResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteInventoryResult = (output, context) => {
      return {
        DeletionId: (0, smithy_client_1.expectString)(output.DeletionId),
        DeletionSummary: output.DeletionSummary != null ? deserializeAws_json1_1InventoryDeletionSummary(output.DeletionSummary, context) : void 0,
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1DeleteMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1DeleteOpsMetadataResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteParameterResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteParametersResult = (output, context) => {
      return {
        DeletedParameters: output.DeletedParameters != null ? deserializeAws_json1_1ParameterNameList(output.DeletedParameters, context) : void 0,
        InvalidParameters: output.InvalidParameters != null ? deserializeAws_json1_1ParameterNameList(output.InvalidParameters, context) : void 0
      };
    };
    var deserializeAws_json1_1DeletePatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    };
    var deserializeAws_json1_1DeleteResourceDataSyncResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeleteResourcePolicyResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeregisterManagedInstanceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowResult = (output, context) => {
      return {
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1DescribeActivationsResult = (output, context) => {
      return {
        ActivationList: output.ActivationList != null ? deserializeAws_json1_1ActivationList(output.ActivationList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAssociationExecutionsResult = (output, context) => {
      return {
        AssociationExecutions: output.AssociationExecutions != null ? deserializeAws_json1_1AssociationExecutionsList(output.AssociationExecutions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAssociationExecutionTargetsResult = (output, context) => {
      return {
        AssociationExecutionTargets: output.AssociationExecutionTargets != null ? deserializeAws_json1_1AssociationExecutionTargetsList(output.AssociationExecutionTargets, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAssociationResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeAutomationExecutionsResult = (output, context) => {
      return {
        AutomationExecutionMetadataList: output.AutomationExecutionMetadataList != null ? deserializeAws_json1_1AutomationExecutionMetadataList(output.AutomationExecutionMetadataList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeAutomationStepExecutionsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        StepExecutions: output.StepExecutions != null ? deserializeAws_json1_1StepExecutionList(output.StepExecutions, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeAvailablePatchesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Patches: output.Patches != null ? deserializeAws_json1_1PatchList(output.Patches, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeDocumentPermissionResponse = (output, context) => {
      return {
        AccountIds: output.AccountIds != null ? deserializeAws_json1_1AccountIdList(output.AccountIds, context) : void 0,
        AccountSharingInfoList: output.AccountSharingInfoList != null ? deserializeAws_json1_1AccountSharingInfoList(output.AccountSharingInfoList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeDocumentResult = (output, context) => {
      return {
        Document: output.Document != null ? deserializeAws_json1_1DocumentDescription(output.Document, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeEffectiveInstanceAssociationsResult = (output, context) => {
      return {
        Associations: output.Associations != null ? deserializeAws_json1_1InstanceAssociationList(output.Associations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineResult = (output, context) => {
      return {
        EffectivePatches: output.EffectivePatches != null ? deserializeAws_json1_1EffectivePatchList(output.EffectivePatches, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstanceAssociationsStatusResult = (output, context) => {
      return {
        InstanceAssociationStatusInfos: output.InstanceAssociationStatusInfos != null ? deserializeAws_json1_1InstanceAssociationStatusInfos(output.InstanceAssociationStatusInfos, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstanceInformationResult = (output, context) => {
      return {
        InstanceInformationList: output.InstanceInformationList != null ? deserializeAws_json1_1InstanceInformationList(output.InstanceInformationList, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstancePatchesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Patches: output.Patches != null ? deserializeAws_json1_1PatchComplianceDataList(output.Patches, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupResult = (output, context) => {
      return {
        InstancePatchStates: output.InstancePatchStates != null ? deserializeAws_json1_1InstancePatchStatesList(output.InstancePatchStates, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInstancePatchStatesResult = (output, context) => {
      return {
        InstancePatchStates: output.InstancePatchStates != null ? deserializeAws_json1_1InstancePatchStateList(output.InstancePatchStates, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeInventoryDeletionsResult = (output, context) => {
      return {
        InventoryDeletions: output.InventoryDeletions != null ? deserializeAws_json1_1InventoryDeletionsList(output.InventoryDeletions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutions: output.WindowExecutions != null ? deserializeAws_json1_1MaintenanceWindowExecutionList(output.WindowExecutions, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutionTaskInvocationIdentities: output.WindowExecutionTaskInvocationIdentities != null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList(output.WindowExecutionTaskInvocationIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowExecutionTaskIdentities: output.WindowExecutionTaskIdentities != null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList(output.WindowExecutionTaskIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowScheduleResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ScheduledWindowExecutions: output.ScheduledWindowExecutions != null ? deserializeAws_json1_1ScheduledWindowExecutionList(output.ScheduledWindowExecutions, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsForTargetResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowIdentities: output.WindowIdentities != null ? deserializeAws_json1_1MaintenanceWindowsForTargetList(output.WindowIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        WindowIdentities: output.WindowIdentities != null ? deserializeAws_json1_1MaintenanceWindowIdentityList(output.WindowIdentities, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTargetsResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Targets: output.Targets != null ? deserializeAws_json1_1MaintenanceWindowTargetList(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeMaintenanceWindowTasksResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tasks: output.Tasks != null ? deserializeAws_json1_1MaintenanceWindowTaskList(output.Tasks, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeOpsItemsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OpsItemSummaries: output.OpsItemSummaries != null ? deserializeAws_json1_1OpsItemSummaries(output.OpsItemSummaries, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeParametersResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterMetadataList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribePatchBaselinesResult = (output, context) => {
      return {
        BaselineIdentities: output.BaselineIdentities != null ? deserializeAws_json1_1PatchBaselineIdentityList(output.BaselineIdentities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribePatchGroupsResult = (output, context) => {
      return {
        Mappings: output.Mappings != null ? deserializeAws_json1_1PatchGroupPatchBaselineMappingList(output.Mappings, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1DescribePatchGroupStateResult = (output, context) => {
      return {
        Instances: (0, smithy_client_1.expectInt32)(output.Instances),
        InstancesWithCriticalNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithCriticalNonCompliantPatches),
        InstancesWithFailedPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithFailedPatches),
        InstancesWithInstalledOtherPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledOtherPatches),
        InstancesWithInstalledPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledPatches),
        InstancesWithInstalledPendingRebootPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledPendingRebootPatches),
        InstancesWithInstalledRejectedPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithInstalledRejectedPatches),
        InstancesWithMissingPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithMissingPatches),
        InstancesWithNotApplicablePatches: (0, smithy_client_1.expectInt32)(output.InstancesWithNotApplicablePatches),
        InstancesWithOtherNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithOtherNonCompliantPatches),
        InstancesWithSecurityNonCompliantPatches: (0, smithy_client_1.expectInt32)(output.InstancesWithSecurityNonCompliantPatches),
        InstancesWithUnreportedNotApplicablePatches: (0, smithy_client_1.expectInt32)(output.InstancesWithUnreportedNotApplicablePatches)
      };
    };
    var deserializeAws_json1_1DescribePatchPropertiesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Properties: output.Properties != null ? deserializeAws_json1_1PatchPropertiesList(output.Properties, context) : void 0
      };
    };
    var deserializeAws_json1_1DescribeSessionsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Sessions: output.Sessions != null ? deserializeAws_json1_1SessionList(output.Sessions, context) : void 0
      };
    };
    var deserializeAws_json1_1DisassociateOpsItemRelatedItemResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1DocumentAlreadyExists = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentDefaultVersionDescription = (output, context) => {
      return {
        DefaultVersion: (0, smithy_client_1.expectString)(output.DefaultVersion),
        DefaultVersionName: (0, smithy_client_1.expectString)(output.DefaultVersionName),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1DocumentDescription = (output, context) => {
      return {
        ApprovedVersion: (0, smithy_client_1.expectString)(output.ApprovedVersion),
        AttachmentsInformation: output.AttachmentsInformation != null ? deserializeAws_json1_1AttachmentInformationList(output.AttachmentsInformation, context) : void 0,
        Author: (0, smithy_client_1.expectString)(output.Author),
        Category: output.Category != null ? deserializeAws_json1_1CategoryList(output.Category, context) : void 0,
        CategoryEnum: output.CategoryEnum != null ? deserializeAws_json1_1CategoryEnumList(output.CategoryEnum, context) : void 0,
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DefaultVersion: (0, smithy_client_1.expectString)(output.DefaultVersion),
        Description: (0, smithy_client_1.expectString)(output.Description),
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Hash: (0, smithy_client_1.expectString)(output.Hash),
        HashType: (0, smithy_client_1.expectString)(output.HashType),
        LatestVersion: (0, smithy_client_1.expectString)(output.LatestVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        Parameters: output.Parameters != null ? deserializeAws_json1_1DocumentParameterList(output.Parameters, context) : void 0,
        PendingReviewVersion: (0, smithy_client_1.expectString)(output.PendingReviewVersion),
        PlatformTypes: output.PlatformTypes != null ? deserializeAws_json1_1PlatformTypeList(output.PlatformTypes, context) : void 0,
        Requires: output.Requires != null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewInformation: output.ReviewInformation != null ? deserializeAws_json1_1ReviewInformationList(output.ReviewInformation, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        Sha1: (0, smithy_client_1.expectString)(output.Sha1),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentIdentifier = (output, context) => {
      return {
        Author: (0, smithy_client_1.expectString)(output.Author),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        PlatformTypes: output.PlatformTypes != null ? deserializeAws_json1_1PlatformTypeList(output.PlatformTypes, context) : void 0,
        Requires: output.Requires != null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        Tags: output.Tags != null ? deserializeAws_json1_1TagList(output.Tags, context) : void 0,
        TargetType: (0, smithy_client_1.expectString)(output.TargetType),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentIdentifierList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentIdentifier(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentLimitExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentMetadataResponseInfo = (output, context) => {
      return {
        ReviewerResponse: output.ReviewerResponse != null ? deserializeAws_json1_1DocumentReviewerResponseList(output.ReviewerResponse, context) : void 0
      };
    };
    var deserializeAws_json1_1DocumentParameter = (output, context) => {
      return {
        DefaultValue: (0, smithy_client_1.expectString)(output.DefaultValue),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Type: (0, smithy_client_1.expectString)(output.Type)
      };
    };
    var deserializeAws_json1_1DocumentParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentParameter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentPermissionLimit = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentRequires = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        RequireType: (0, smithy_client_1.expectString)(output.RequireType),
        Version: (0, smithy_client_1.expectString)(output.Version),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentRequiresList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentRequires(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentReviewCommentList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentReviewCommentSource(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentReviewCommentSource = (output, context) => {
      return {
        Content: (0, smithy_client_1.expectString)(output.Content),
        Type: (0, smithy_client_1.expectString)(output.Type)
      };
    };
    var deserializeAws_json1_1DocumentReviewerResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentReviewerResponseSource(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DocumentReviewerResponseSource = (output, context) => {
      return {
        Comment: output.Comment != null ? deserializeAws_json1_1DocumentReviewCommentList(output.Comment, context) : void 0,
        CreateTime: output.CreateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreateTime))) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Reviewer: (0, smithy_client_1.expectString)(output.Reviewer),
        UpdatedTime: output.UpdatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.UpdatedTime))) : void 0
      };
    };
    var deserializeAws_json1_1DocumentVersionInfo = (output, context) => {
      return {
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        IsDefaultVersion: (0, smithy_client_1.expectBoolean)(output.IsDefaultVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1DocumentVersionLimitExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DocumentVersionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1DocumentVersionInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1DoesNotExistException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DuplicateDocumentContent = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DuplicateDocumentVersionName = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1DuplicateInstanceId = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1EffectivePatch = (output, context) => {
      return {
        Patch: output.Patch != null ? deserializeAws_json1_1Patch(output.Patch, context) : void 0,
        PatchStatus: output.PatchStatus != null ? deserializeAws_json1_1PatchStatus(output.PatchStatus, context) : void 0
      };
    };
    var deserializeAws_json1_1EffectivePatchList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1EffectivePatch(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1FailedCreateAssociation = (output, context) => {
      return {
        Entry: output.Entry != null ? deserializeAws_json1_1CreateAssociationBatchRequestEntry(output.Entry, context) : void 0,
        Fault: (0, smithy_client_1.expectString)(output.Fault),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1FailedCreateAssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1FailedCreateAssociation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1FailureDetails = (output, context) => {
      return {
        Details: output.Details != null ? deserializeAws_json1_1AutomationParameterMap(output.Details, context) : void 0,
        FailureStage: (0, smithy_client_1.expectString)(output.FailureStage),
        FailureType: (0, smithy_client_1.expectString)(output.FailureType)
      };
    };
    var deserializeAws_json1_1FeatureNotAvailableException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1GetAutomationExecutionResult = (output, context) => {
      return {
        AutomationExecution: output.AutomationExecution != null ? deserializeAws_json1_1AutomationExecution(output.AutomationExecution, context) : void 0
      };
    };
    var deserializeAws_json1_1GetCalendarStateResponse = (output, context) => {
      return {
        AtTime: (0, smithy_client_1.expectString)(output.AtTime),
        NextTransitionTime: (0, smithy_client_1.expectString)(output.NextTransitionTime),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    };
    var deserializeAws_json1_1GetCommandInvocationResult = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        CommandId: (0, smithy_client_1.expectString)(output.CommandId),
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ExecutionElapsedTime: (0, smithy_client_1.expectString)(output.ExecutionElapsedTime),
        ExecutionEndDateTime: (0, smithy_client_1.expectString)(output.ExecutionEndDateTime),
        ExecutionStartDateTime: (0, smithy_client_1.expectString)(output.ExecutionStartDateTime),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        PluginName: (0, smithy_client_1.expectString)(output.PluginName),
        ResponseCode: (0, smithy_client_1.expectInt32)(output.ResponseCode),
        StandardErrorContent: (0, smithy_client_1.expectString)(output.StandardErrorContent),
        StandardErrorUrl: (0, smithy_client_1.expectString)(output.StandardErrorUrl),
        StandardOutputContent: (0, smithy_client_1.expectString)(output.StandardOutputContent),
        StandardOutputUrl: (0, smithy_client_1.expectString)(output.StandardOutputUrl),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails)
      };
    };
    var deserializeAws_json1_1GetConnectionStatusResponse = (output, context) => {
      return {
        Status: (0, smithy_client_1.expectString)(output.Status),
        Target: (0, smithy_client_1.expectString)(output.Target)
      };
    };
    var deserializeAws_json1_1GetDefaultPatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem)
      };
    };
    var deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceResult = (output, context) => {
      return {
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        Product: (0, smithy_client_1.expectString)(output.Product),
        SnapshotDownloadUrl: (0, smithy_client_1.expectString)(output.SnapshotDownloadUrl),
        SnapshotId: (0, smithy_client_1.expectString)(output.SnapshotId)
      };
    };
    var deserializeAws_json1_1GetDocumentResult = (output, context) => {
      return {
        AttachmentsContent: output.AttachmentsContent != null ? deserializeAws_json1_1AttachmentContentList(output.AttachmentsContent, context) : void 0,
        Content: (0, smithy_client_1.expectString)(output.Content),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        DocumentFormat: (0, smithy_client_1.expectString)(output.DocumentFormat),
        DocumentType: (0, smithy_client_1.expectString)(output.DocumentType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Requires: output.Requires != null ? deserializeAws_json1_1DocumentRequiresList(output.Requires, context) : void 0,
        ReviewStatus: (0, smithy_client_1.expectString)(output.ReviewStatus),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusInformation: (0, smithy_client_1.expectString)(output.StatusInformation),
        VersionName: (0, smithy_client_1.expectString)(output.VersionName)
      };
    };
    var deserializeAws_json1_1GetInventoryResult = (output, context) => {
      return {
        Entities: output.Entities != null ? deserializeAws_json1_1InventoryResultEntityList(output.Entities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1GetInventorySchemaResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Schemas: output.Schemas != null ? deserializeAws_json1_1InventoryItemSchemaResultList(output.Schemas, context) : void 0
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionResult = (output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskIds: output.TaskIds != null ? deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList(output.TaskIds, context) : void 0,
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationResult = (output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        InvocationId: (0, smithy_client_1.expectString)(output.InvocationId),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Parameters: (0, smithy_client_1.expectString)(output.Parameters),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowExecutionTaskResult = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRole: (0, smithy_client_1.expectString)(output.ServiceRole),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParametersList(output.TaskParameters, context) : void 0,
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0,
        Type: (0, smithy_client_1.expectString)(output.Type),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowResult = (output, context) => {
      return {
        AllowUnassociatedTargets: (0, smithy_client_1.expectBoolean)(output.AllowUnassociatedTargets),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        ModifiedDate: output.ModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextExecutionTime: (0, smithy_client_1.expectString)(output.NextExecutionTime),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1GetMaintenanceWindowTaskResult = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo != null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskInvocationParameters: output.TaskInvocationParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters(output.TaskInvocationParameters, context) : void 0,
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1GetOpsItemResponse = (output, context) => {
      return {
        OpsItem: output.OpsItem != null ? deserializeAws_json1_1OpsItem(output.OpsItem, context) : void 0
      };
    };
    var deserializeAws_json1_1GetOpsMetadataResult = (output, context) => {
      return {
        Metadata: output.Metadata != null ? deserializeAws_json1_1MetadataMap(output.Metadata, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId)
      };
    };
    var deserializeAws_json1_1GetOpsSummaryResult = (output, context) => {
      return {
        Entities: output.Entities != null ? deserializeAws_json1_1OpsEntityList(output.Entities, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1GetParameterHistoryResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterHistoryList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1GetParameterResult = (output, context) => {
      return {
        Parameter: output.Parameter != null ? deserializeAws_json1_1Parameter(output.Parameter, context) : void 0
      };
    };
    var deserializeAws_json1_1GetParametersByPathResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1GetParametersResult = (output, context) => {
      return {
        InvalidParameters: output.InvalidParameters != null ? deserializeAws_json1_1ParameterNameList(output.InvalidParameters, context) : void 0,
        Parameters: output.Parameters != null ? deserializeAws_json1_1ParameterList(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1GetPatchBaselineForPatchGroupResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1GetPatchBaselineResult = (output, context) => {
      return {
        ApprovalRules: output.ApprovalRules != null ? deserializeAws_json1_1PatchRuleGroup(output.ApprovalRules, context) : void 0,
        ApprovedPatches: output.ApprovedPatches != null ? deserializeAws_json1_1PatchIdList(output.ApprovedPatches, context) : void 0,
        ApprovedPatchesComplianceLevel: (0, smithy_client_1.expectString)(output.ApprovedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.ApprovedPatchesEnableNonSecurity),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        GlobalFilters: output.GlobalFilters != null ? deserializeAws_json1_1PatchFilterGroup(output.GlobalFilters, context) : void 0,
        ModifiedDate: output.ModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        PatchGroups: output.PatchGroups != null ? deserializeAws_json1_1PatchGroupList(output.PatchGroups, context) : void 0,
        RejectedPatches: output.RejectedPatches != null ? deserializeAws_json1_1PatchIdList(output.RejectedPatches, context) : void 0,
        RejectedPatchesAction: (0, smithy_client_1.expectString)(output.RejectedPatchesAction),
        Sources: output.Sources != null ? deserializeAws_json1_1PatchSourceList(output.Sources, context) : void 0
      };
    };
    var deserializeAws_json1_1GetResourcePoliciesResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Policies: output.Policies != null ? deserializeAws_json1_1GetResourcePoliciesResponseEntries(output.Policies, context) : void 0
      };
    };
    var deserializeAws_json1_1GetResourcePoliciesResponseEntries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1GetResourcePoliciesResponseEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1GetResourcePoliciesResponseEntry = (output, context) => {
      return {
        Policy: (0, smithy_client_1.expectString)(output.Policy),
        PolicyHash: (0, smithy_client_1.expectString)(output.PolicyHash),
        PolicyId: (0, smithy_client_1.expectString)(output.PolicyId)
      };
    };
    var deserializeAws_json1_1GetServiceSettingResult = (output, context) => {
      return {
        ServiceSetting: output.ServiceSetting != null ? deserializeAws_json1_1ServiceSetting(output.ServiceSetting, context) : void 0
      };
    };
    var deserializeAws_json1_1HierarchyLevelLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1HierarchyTypeMismatchException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1IdempotentParameterMismatch = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1IncompatiblePolicyException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InstanceAggregatedAssociationOverview = (output, context) => {
      return {
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        InstanceAssociationStatusAggregatedCount: output.InstanceAssociationStatusAggregatedCount != null ? deserializeAws_json1_1InstanceAssociationStatusAggregatedCount(output.InstanceAssociationStatusAggregatedCount, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceAssociation = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        Content: (0, smithy_client_1.expectString)(output.Content),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId)
      };
    };
    var deserializeAws_json1_1InstanceAssociationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceAssociation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceAssociationOutputLocation = (output, context) => {
      return {
        S3Location: output.S3Location != null ? deserializeAws_json1_1S3OutputLocation(output.S3Location, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceAssociationOutputUrl = (output, context) => {
      return {
        S3OutputUrl: output.S3OutputUrl != null ? deserializeAws_json1_1S3OutputUrl(output.S3OutputUrl, context) : void 0
      };
    };
    var deserializeAws_json1_1InstanceAssociationStatusAggregatedCount = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectInt32)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1InstanceAssociationStatusInfo = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationName: (0, smithy_client_1.expectString)(output.AssociationName),
        AssociationVersion: (0, smithy_client_1.expectString)(output.AssociationVersion),
        DetailedStatus: (0, smithy_client_1.expectString)(output.DetailedStatus),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        ExecutionDate: output.ExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionDate))) : void 0,
        ExecutionSummary: (0, smithy_client_1.expectString)(output.ExecutionSummary),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OutputUrl: output.OutputUrl != null ? deserializeAws_json1_1InstanceAssociationOutputUrl(output.OutputUrl, context) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1InstanceAssociationStatusInfos = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceAssociationStatusInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstanceInformation = (output, context) => {
      return {
        ActivationId: (0, smithy_client_1.expectString)(output.ActivationId),
        AgentVersion: (0, smithy_client_1.expectString)(output.AgentVersion),
        AssociationOverview: output.AssociationOverview != null ? deserializeAws_json1_1InstanceAggregatedAssociationOverview(output.AssociationOverview, context) : void 0,
        AssociationStatus: (0, smithy_client_1.expectString)(output.AssociationStatus),
        ComputerName: (0, smithy_client_1.expectString)(output.ComputerName),
        IPAddress: (0, smithy_client_1.expectString)(output.IPAddress),
        IamRole: (0, smithy_client_1.expectString)(output.IamRole),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        IsLatestVersion: (0, smithy_client_1.expectBoolean)(output.IsLatestVersion),
        LastAssociationExecutionDate: output.LastAssociationExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastAssociationExecutionDate))) : void 0,
        LastPingDateTime: output.LastPingDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastPingDateTime))) : void 0,
        LastSuccessfulAssociationExecutionDate: output.LastSuccessfulAssociationExecutionDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulAssociationExecutionDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        PingStatus: (0, smithy_client_1.expectString)(output.PingStatus),
        PlatformName: (0, smithy_client_1.expectString)(output.PlatformName),
        PlatformType: (0, smithy_client_1.expectString)(output.PlatformType),
        PlatformVersion: (0, smithy_client_1.expectString)(output.PlatformVersion),
        RegistrationDate: output.RegistrationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RegistrationDate))) : void 0,
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        SourceId: (0, smithy_client_1.expectString)(output.SourceId),
        SourceType: (0, smithy_client_1.expectString)(output.SourceType)
      };
    };
    var deserializeAws_json1_1InstanceInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstanceInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstancePatchState = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CriticalNonCompliantCount: (0, smithy_client_1.expectInt32)(output.CriticalNonCompliantCount),
        FailedCount: (0, smithy_client_1.expectInt32)(output.FailedCount),
        InstallOverrideList: (0, smithy_client_1.expectString)(output.InstallOverrideList),
        InstalledCount: (0, smithy_client_1.expectInt32)(output.InstalledCount),
        InstalledOtherCount: (0, smithy_client_1.expectInt32)(output.InstalledOtherCount),
        InstalledPendingRebootCount: (0, smithy_client_1.expectInt32)(output.InstalledPendingRebootCount),
        InstalledRejectedCount: (0, smithy_client_1.expectInt32)(output.InstalledRejectedCount),
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        LastNoRebootInstallOperationTime: output.LastNoRebootInstallOperationTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastNoRebootInstallOperationTime))) : void 0,
        MissingCount: (0, smithy_client_1.expectInt32)(output.MissingCount),
        NotApplicableCount: (0, smithy_client_1.expectInt32)(output.NotApplicableCount),
        Operation: (0, smithy_client_1.expectString)(output.Operation),
        OperationEndTime: output.OperationEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OperationEndTime))) : void 0,
        OperationStartTime: output.OperationStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.OperationStartTime))) : void 0,
        OtherNonCompliantCount: (0, smithy_client_1.expectInt32)(output.OtherNonCompliantCount),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup),
        RebootOption: (0, smithy_client_1.expectString)(output.RebootOption),
        SecurityNonCompliantCount: (0, smithy_client_1.expectInt32)(output.SecurityNonCompliantCount),
        SnapshotId: (0, smithy_client_1.expectString)(output.SnapshotId),
        UnreportedNotApplicableCount: (0, smithy_client_1.expectInt32)(output.UnreportedNotApplicableCount)
      };
    };
    var deserializeAws_json1_1InstancePatchStateList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstancePatchState(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InstancePatchStatesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InstancePatchState(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InternalServerError = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidActivation = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidActivationId = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAggregatorException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAllowedPatternException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidAssociation = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAssociationVersion = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAutomationExecutionParametersException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAutomationSignalException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidAutomationStatusUpdateException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidCommandId = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidDeleteInventoryParametersException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDeletionIdException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocument = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentContent = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentOperation = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentSchemaVersion = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentType = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidDocumentVersion = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidFilter = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidFilterKey = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidFilterOption = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidFilterValue = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceId = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInstanceInformationFilterValue = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidInventoryGroupException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInventoryItemContextException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidInventoryRequestException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidItemContentException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1InvalidKeyId = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidNextToken = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidNotificationConfig = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidOptionException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidOutputFolder = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidOutputLocation = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidParameters = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidPermissionType = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidPluginName = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidPolicyAttributeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidPolicyTypeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1InvalidResourceId = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidResourceType = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1InvalidResultAttributeException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidRole = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidSchedule = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTag = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTarget = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTargetMaps = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidTypeNameException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InvalidUpdate = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1InventoryDeletionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryDeletionStatusItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryDeletionStatusItem = (output, context) => {
      return {
        DeletionId: (0, smithy_client_1.expectString)(output.DeletionId),
        DeletionStartTime: output.DeletionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.DeletionStartTime))) : void 0,
        DeletionSummary: output.DeletionSummary != null ? deserializeAws_json1_1InventoryDeletionSummary(output.DeletionSummary, context) : void 0,
        LastStatus: (0, smithy_client_1.expectString)(output.LastStatus),
        LastStatusMessage: (0, smithy_client_1.expectString)(output.LastStatusMessage),
        LastStatusUpdateTime: output.LastStatusUpdateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastStatusUpdateTime))) : void 0,
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1InventoryDeletionSummary = (output, context) => {
      return {
        RemainingCount: (0, smithy_client_1.expectInt32)(output.RemainingCount),
        SummaryItems: output.SummaryItems != null ? deserializeAws_json1_1InventoryDeletionSummaryItems(output.SummaryItems, context) : void 0,
        TotalCount: (0, smithy_client_1.expectInt32)(output.TotalCount)
      };
    };
    var deserializeAws_json1_1InventoryDeletionSummaryItem = (output, context) => {
      return {
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        RemainingCount: (0, smithy_client_1.expectInt32)(output.RemainingCount),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1InventoryDeletionSummaryItems = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryDeletionSummaryItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryItemAttribute = (output, context) => {
      return {
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1InventoryItemAttributeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemAttribute(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryItemEntry = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1InventoryItemEntryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryItemSchema = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1InventoryItemAttributeList(output.Attributes, context) : void 0,
        DisplayName: (0, smithy_client_1.expectString)(output.DisplayName),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1InventoryItemSchemaResultList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryItemSchema(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryResultEntity = (output, context) => {
      return {
        Data: output.Data != null ? deserializeAws_json1_1InventoryResultItemMap(output.Data, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id)
      };
    };
    var deserializeAws_json1_1InventoryResultEntityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1InventoryResultEntity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1InventoryResultItem = (output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Content: output.Content != null ? deserializeAws_json1_1InventoryItemEntryList(output.Content, context) : void 0,
        ContentHash: (0, smithy_client_1.expectString)(output.ContentHash),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1InventoryResultItemMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1InventoryResultItem(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1InvocationDoesNotExist = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1ItemContentMismatchException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1ItemSizeLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1LabelParameterVersionResult = (output, context) => {
      return {
        InvalidLabels: output.InvalidLabels != null ? deserializeAws_json1_1ParameterLabelList(output.InvalidLabels, context) : void 0,
        ParameterVersion: (0, smithy_client_1.expectLong)(output.ParameterVersion)
      };
    };
    var deserializeAws_json1_1ListAssociationsResult = (output, context) => {
      return {
        Associations: output.Associations != null ? deserializeAws_json1_1AssociationList(output.Associations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListAssociationVersionsResult = (output, context) => {
      return {
        AssociationVersions: output.AssociationVersions != null ? deserializeAws_json1_1AssociationVersionList(output.AssociationVersions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListCommandInvocationsResult = (output, context) => {
      return {
        CommandInvocations: output.CommandInvocations != null ? deserializeAws_json1_1CommandInvocationList(output.CommandInvocations, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListCommandsResult = (output, context) => {
      return {
        Commands: output.Commands != null ? deserializeAws_json1_1CommandList(output.Commands, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListComplianceItemsResult = (output, context) => {
      return {
        ComplianceItems: output.ComplianceItems != null ? deserializeAws_json1_1ComplianceItemList(output.ComplianceItems, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListComplianceSummariesResult = (output, context) => {
      return {
        ComplianceSummaryItems: output.ComplianceSummaryItems != null ? deserializeAws_json1_1ComplianceSummaryItemList(output.ComplianceSummaryItems, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListDocumentMetadataHistoryResponse = (output, context) => {
      return {
        Author: (0, smithy_client_1.expectString)(output.Author),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Metadata: output.Metadata != null ? deserializeAws_json1_1DocumentMetadataResponseInfo(output.Metadata, context) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListDocumentsResult = (output, context) => {
      return {
        DocumentIdentifiers: output.DocumentIdentifiers != null ? deserializeAws_json1_1DocumentIdentifierList(output.DocumentIdentifiers, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListDocumentVersionsResult = (output, context) => {
      return {
        DocumentVersions: output.DocumentVersions != null ? deserializeAws_json1_1DocumentVersionList(output.DocumentVersions, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_1ListInventoryEntriesResult = (output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Entries: output.Entries != null ? deserializeAws_json1_1InventoryItemEntryList(output.Entries, context) : void 0,
        InstanceId: (0, smithy_client_1.expectString)(output.InstanceId),
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        SchemaVersion: (0, smithy_client_1.expectString)(output.SchemaVersion),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1ListOpsItemEventsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Summaries: output.Summaries != null ? deserializeAws_json1_1OpsItemEventSummaries(output.Summaries, context) : void 0
      };
    };
    var deserializeAws_json1_1ListOpsItemRelatedItemsResponse = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Summaries: output.Summaries != null ? deserializeAws_json1_1OpsItemRelatedItemSummaries(output.Summaries, context) : void 0
      };
    };
    var deserializeAws_json1_1ListOpsMetadataResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        OpsMetadataList: output.OpsMetadataList != null ? deserializeAws_json1_1OpsMetadataList(output.OpsMetadataList, context) : void 0
      };
    };
    var deserializeAws_json1_1ListResourceComplianceSummariesResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceComplianceSummaryItems: output.ResourceComplianceSummaryItems != null ? deserializeAws_json1_1ResourceComplianceSummaryItemList(output.ResourceComplianceSummaryItems, context) : void 0
      };
    };
    var deserializeAws_json1_1ListResourceDataSyncResult = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        ResourceDataSyncItems: output.ResourceDataSyncItems != null ? deserializeAws_json1_1ResourceDataSyncItemList(output.ResourceDataSyncItems, context) : void 0
      };
    };
    var deserializeAws_json1_1ListTagsForResourceResult = (output, context) => {
      return {
        TagList: output.TagList != null ? deserializeAws_json1_1TagList(output.TagList, context) : void 0
      };
    };
    var deserializeAws_json1_1LoggingInfo = (output, context) => {
      return {
        S3BucketName: (0, smithy_client_1.expectString)(output.S3BucketName),
        S3KeyPrefix: (0, smithy_client_1.expectString)(output.S3KeyPrefix),
        S3Region: (0, smithy_client_1.expectString)(output.S3Region)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowAutomationParameters = (output, context) => {
      return {
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        Parameters: output.Parameters != null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecution = (output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0,
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecutionTaskIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity = (output, context) => {
      return {
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExecutionId: (0, smithy_client_1.expectString)(output.ExecutionId),
        InvocationId: (0, smithy_client_1.expectString)(output.InvocationId),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Parameters: (0, smithy_client_1.expectString)(output.Parameters),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusDetails: (0, smithy_client_1.expectString)(output.StatusDetails),
        TaskExecutionId: (0, smithy_client_1.expectString)(output.TaskExecutionId),
        TaskType: (0, smithy_client_1.expectString)(output.TaskType),
        WindowExecutionId: (0, smithy_client_1.expectString)(output.WindowExecutionId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowIdentity = (output, context) => {
      return {
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        NextExecutionTime: (0, smithy_client_1.expectString)(output.NextExecutionTime),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowIdentityForTarget = (output, context) => {
      return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowLambdaParameters = (output, context) => {
      return {
        ClientContext: (0, smithy_client_1.expectString)(output.ClientContext),
        Payload: output.Payload != null ? context.base64Decoder(output.Payload) : void 0,
        Qualifier: (0, smithy_client_1.expectString)(output.Qualifier)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowRunCommandParameters = (output, context) => {
      return {
        CloudWatchOutputConfig: output.CloudWatchOutputConfig != null ? deserializeAws_json1_1CloudWatchOutputConfig(output.CloudWatchOutputConfig, context) : void 0,
        Comment: (0, smithy_client_1.expectString)(output.Comment),
        DocumentHash: (0, smithy_client_1.expectString)(output.DocumentHash),
        DocumentHashType: (0, smithy_client_1.expectString)(output.DocumentHashType),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        NotificationConfig: output.NotificationConfig != null ? deserializeAws_json1_1NotificationConfig(output.NotificationConfig, context) : void 0,
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        Parameters: output.Parameters != null ? deserializeAws_json1_1Parameters(output.Parameters, context) : void 0,
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        TimeoutSeconds: (0, smithy_client_1.expectInt32)(output.TimeoutSeconds)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowsForTargetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowIdentityForTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters = (output, context) => {
      return {
        Input: (0, smithy_client_1.expectString)(output.Input),
        Name: (0, smithy_client_1.expectString)(output.Name)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTarget = (output, context) => {
      return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTargetList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTarget(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowTask = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo != null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        Type: (0, smithy_client_1.expectString)(output.Type),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters = (output, context) => {
      return {
        Automation: output.Automation != null ? deserializeAws_json1_1MaintenanceWindowAutomationParameters(output.Automation, context) : void 0,
        Lambda: output.Lambda != null ? deserializeAws_json1_1MaintenanceWindowLambdaParameters(output.Lambda, context) : void 0,
        RunCommand: output.RunCommand != null ? deserializeAws_json1_1MaintenanceWindowRunCommandParameters(output.RunCommand, context) : void 0,
        StepFunctions: output.StepFunctions != null ? deserializeAws_json1_1MaintenanceWindowStepFunctionsParameters(output.StepFunctions, context) : void 0
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTaskList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTask(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParameters = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParametersList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1MaintenanceWindowTaskParameters(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParameterValueExpression = (output, context) => {
      return {
        Values: output.Values != null ? deserializeAws_json1_1MaintenanceWindowTaskParameterValueList(output.Values, context) : void 0
      };
    };
    var deserializeAws_json1_1MaintenanceWindowTaskParameterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1MaxDocumentSizeExceeded = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1MetadataMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1MetadataValue(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1MetadataValue = (output, context) => {
      return {
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1ModifyDocumentPermissionResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1NonCompliantSummary = (output, context) => {
      return {
        NonCompliantCount: (0, smithy_client_1.expectInt32)(output.NonCompliantCount),
        SeveritySummary: output.SeveritySummary != null ? deserializeAws_json1_1SeveritySummary(output.SeveritySummary, context) : void 0
      };
    };
    var deserializeAws_json1_1NormalStringMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1NotificationConfig = (output, context) => {
      return {
        NotificationArn: (0, smithy_client_1.expectString)(output.NotificationArn),
        NotificationEvents: output.NotificationEvents != null ? deserializeAws_json1_1NotificationEventList(output.NotificationEvents, context) : void 0,
        NotificationType: (0, smithy_client_1.expectString)(output.NotificationType)
      };
    };
    var deserializeAws_json1_1NotificationEventList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsEntity = (output, context) => {
      return {
        Data: output.Data != null ? deserializeAws_json1_1OpsEntityItemMap(output.Data, context) : void 0,
        Id: (0, smithy_client_1.expectString)(output.Id)
      };
    };
    var deserializeAws_json1_1OpsEntityItem = (output, context) => {
      return {
        CaptureTime: (0, smithy_client_1.expectString)(output.CaptureTime),
        Content: output.Content != null ? deserializeAws_json1_1OpsEntityItemEntryList(output.Content, context) : void 0
      };
    };
    var deserializeAws_json1_1OpsEntityItemEntry = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1OpsEntityItemEntryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsEntityItemEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsEntityItemMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1OpsEntityItem(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1OpsEntityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsEntity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItem = (output, context) => {
      return {
        ActualEndTime: output.ActualEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualEndTime))) : void 0,
        ActualStartTime: output.ActualStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualStartTime))) : void 0,
        Category: (0, smithy_client_1.expectString)(output.Category),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedTime: output.LastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        Notifications: output.Notifications != null ? deserializeAws_json1_1OpsItemNotifications(output.Notifications, context) : void 0,
        OperationalData: output.OperationalData != null ? deserializeAws_json1_1OpsItemOperationalData(output.OperationalData, context) : void 0,
        OpsItemArn: (0, smithy_client_1.expectString)(output.OpsItemArn),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        OpsItemType: (0, smithy_client_1.expectString)(output.OpsItemType),
        PlannedEndTime: output.PlannedEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedEndTime))) : void 0,
        PlannedStartTime: output.PlannedStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedStartTime))) : void 0,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        RelatedOpsItems: output.RelatedOpsItems != null ? deserializeAws_json1_1RelatedOpsItems(output.RelatedOpsItems, context) : void 0,
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Source: (0, smithy_client_1.expectString)(output.Source),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1OpsItemAccessDeniedException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1OpsItemAlreadyExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    };
    var deserializeAws_json1_1OpsItemDataValue = (output, context) => {
      return {
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1OpsItemEventSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemEventSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemEventSummary = (output, context) => {
      return {
        CreatedBy: output.CreatedBy != null ? deserializeAws_json1_1OpsItemIdentity(output.CreatedBy, context) : void 0,
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        Detail: (0, smithy_client_1.expectString)(output.Detail),
        DetailType: (0, smithy_client_1.expectString)(output.DetailType),
        EventId: (0, smithy_client_1.expectString)(output.EventId),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        Source: (0, smithy_client_1.expectString)(output.Source)
      };
    };
    var deserializeAws_json1_1OpsItemIdentity = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn)
      };
    };
    var deserializeAws_json1_1OpsItemInvalidParameterException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        ParameterNames: output.ParameterNames != null ? deserializeAws_json1_1OpsItemParameterNamesList(output.ParameterNames, context) : void 0
      };
    };
    var deserializeAws_json1_1OpsItemLimitExceededException = (output, context) => {
      return {
        Limit: (0, smithy_client_1.expectInt32)(output.Limit),
        LimitType: (0, smithy_client_1.expectString)(output.LimitType),
        Message: (0, smithy_client_1.expectString)(output.Message),
        ResourceTypes: output.ResourceTypes != null ? deserializeAws_json1_1OpsItemParameterNamesList(output.ResourceTypes, context) : void 0
      };
    };
    var deserializeAws_json1_1OpsItemNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1OpsItemNotification = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn)
      };
    };
    var deserializeAws_json1_1OpsItemNotifications = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemNotification(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemOperationalData = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1OpsItemDataValue(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1OpsItemParameterNamesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemRelatedItemAlreadyExistsException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        ResourceUri: (0, smithy_client_1.expectString)(output.ResourceUri)
      };
    };
    var deserializeAws_json1_1OpsItemRelatedItemAssociationNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1OpsItemRelatedItemSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemRelatedItemSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemRelatedItemSummary = (output, context) => {
      return {
        AssociationId: (0, smithy_client_1.expectString)(output.AssociationId),
        AssociationType: (0, smithy_client_1.expectString)(output.AssociationType),
        CreatedBy: output.CreatedBy != null ? deserializeAws_json1_1OpsItemIdentity(output.CreatedBy, context) : void 0,
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        LastModifiedBy: output.LastModifiedBy != null ? deserializeAws_json1_1OpsItemIdentity(output.LastModifiedBy, context) : void 0,
        LastModifiedTime: output.LastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        ResourceUri: (0, smithy_client_1.expectString)(output.ResourceUri)
      };
    };
    var deserializeAws_json1_1OpsItemSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsItemSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsItemSummary = (output, context) => {
      return {
        ActualEndTime: output.ActualEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualEndTime))) : void 0,
        ActualStartTime: output.ActualStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ActualStartTime))) : void 0,
        Category: (0, smithy_client_1.expectString)(output.Category),
        CreatedBy: (0, smithy_client_1.expectString)(output.CreatedBy),
        CreatedTime: output.CreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedTime))) : void 0,
        LastModifiedBy: (0, smithy_client_1.expectString)(output.LastModifiedBy),
        LastModifiedTime: output.LastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedTime))) : void 0,
        OperationalData: output.OperationalData != null ? deserializeAws_json1_1OpsItemOperationalData(output.OperationalData, context) : void 0,
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId),
        OpsItemType: (0, smithy_client_1.expectString)(output.OpsItemType),
        PlannedEndTime: output.PlannedEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedEndTime))) : void 0,
        PlannedStartTime: output.PlannedStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.PlannedStartTime))) : void 0,
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Source: (0, smithy_client_1.expectString)(output.Source),
        Status: (0, smithy_client_1.expectString)(output.Status),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    };
    var deserializeAws_json1_1OpsMetadata = (output, context) => {
      return {
        CreationDate: output.CreationDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDate))) : void 0,
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId)
      };
    };
    var deserializeAws_json1_1OpsMetadataAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataInvalidArgumentException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataKeyLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1OpsMetadata(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1OpsMetadataNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OpsMetadataTooManyUpdatesException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1OutputSource = (output, context) => {
      return {
        OutputSourceId: (0, smithy_client_1.expectString)(output.OutputSourceId),
        OutputSourceType: (0, smithy_client_1.expectString)(output.OutputSourceType)
      };
    };
    var deserializeAws_json1_1Parameter = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        Selector: (0, smithy_client_1.expectString)(output.Selector),
        SourceResult: (0, smithy_client_1.expectString)(output.SourceResult),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1ParameterAlreadyExists = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterHistory = (output, context) => {
      return {
        AllowedPattern: (0, smithy_client_1.expectString)(output.AllowedPattern),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Description: (0, smithy_client_1.expectString)(output.Description),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        Labels: output.Labels != null ? deserializeAws_json1_1ParameterLabelList(output.Labels, context) : void 0,
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Policies: output.Policies != null ? deserializeAws_json1_1ParameterPolicyList(output.Policies, context) : void 0,
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Value: (0, smithy_client_1.expectString)(output.Value),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1ParameterHistoryList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterHistory(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterInlinePolicy = (output, context) => {
      return {
        PolicyStatus: (0, smithy_client_1.expectString)(output.PolicyStatus),
        PolicyText: (0, smithy_client_1.expectString)(output.PolicyText),
        PolicyType: (0, smithy_client_1.expectString)(output.PolicyType)
      };
    };
    var deserializeAws_json1_1ParameterLabelList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Parameter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterMaxVersionLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterMetadata = (output, context) => {
      return {
        AllowedPattern: (0, smithy_client_1.expectString)(output.AllowedPattern),
        DataType: (0, smithy_client_1.expectString)(output.DataType),
        Description: (0, smithy_client_1.expectString)(output.Description),
        KeyId: (0, smithy_client_1.expectString)(output.KeyId),
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Policies: output.Policies != null ? deserializeAws_json1_1ParameterPolicyList(output.Policies, context) : void 0,
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Type: (0, smithy_client_1.expectString)(output.Type),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1ParameterMetadataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterMetadata(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterNotFound = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterPatternMismatchException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterPolicyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ParameterInlinePolicy(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Parameters = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1ParameterValueList(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1ParameterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ParameterVersionLabelLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ParameterVersionNotFound = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1Patch = (output, context) => {
      return {
        AdvisoryIds: output.AdvisoryIds != null ? deserializeAws_json1_1PatchAdvisoryIdList(output.AdvisoryIds, context) : void 0,
        Arch: (0, smithy_client_1.expectString)(output.Arch),
        BugzillaIds: output.BugzillaIds != null ? deserializeAws_json1_1PatchBugzillaIdList(output.BugzillaIds, context) : void 0,
        CVEIds: output.CVEIds != null ? deserializeAws_json1_1PatchCVEIdList(output.CVEIds, context) : void 0,
        Classification: (0, smithy_client_1.expectString)(output.Classification),
        ContentUrl: (0, smithy_client_1.expectString)(output.ContentUrl),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Epoch: (0, smithy_client_1.expectInt32)(output.Epoch),
        Id: (0, smithy_client_1.expectString)(output.Id),
        KbNumber: (0, smithy_client_1.expectString)(output.KbNumber),
        Language: (0, smithy_client_1.expectString)(output.Language),
        MsrcNumber: (0, smithy_client_1.expectString)(output.MsrcNumber),
        MsrcSeverity: (0, smithy_client_1.expectString)(output.MsrcSeverity),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Product: (0, smithy_client_1.expectString)(output.Product),
        ProductFamily: (0, smithy_client_1.expectString)(output.ProductFamily),
        Release: (0, smithy_client_1.expectString)(output.Release),
        ReleaseDate: output.ReleaseDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReleaseDate))) : void 0,
        Repository: (0, smithy_client_1.expectString)(output.Repository),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        Title: (0, smithy_client_1.expectString)(output.Title),
        Vendor: (0, smithy_client_1.expectString)(output.Vendor),
        Version: (0, smithy_client_1.expectString)(output.Version)
      };
    };
    var deserializeAws_json1_1PatchAdvisoryIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchBaselineIdentity = (output, context) => {
      return {
        BaselineDescription: (0, smithy_client_1.expectString)(output.BaselineDescription),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        BaselineName: (0, smithy_client_1.expectString)(output.BaselineName),
        DefaultBaseline: (0, smithy_client_1.expectBoolean)(output.DefaultBaseline),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem)
      };
    };
    var deserializeAws_json1_1PatchBaselineIdentityList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchBaselineIdentity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchBugzillaIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchComplianceData = (output, context) => {
      return {
        CVEIds: (0, smithy_client_1.expectString)(output.CVEIds),
        Classification: (0, smithy_client_1.expectString)(output.Classification),
        InstalledTime: output.InstalledTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.InstalledTime))) : void 0,
        KBId: (0, smithy_client_1.expectString)(output.KBId),
        Severity: (0, smithy_client_1.expectString)(output.Severity),
        State: (0, smithy_client_1.expectString)(output.State),
        Title: (0, smithy_client_1.expectString)(output.Title)
      };
    };
    var deserializeAws_json1_1PatchComplianceDataList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchComplianceData(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchCVEIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchFilter = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Values: output.Values != null ? deserializeAws_json1_1PatchFilterValueList(output.Values, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchFilterGroup = (output, context) => {
      return {
        PatchFilters: output.PatchFilters != null ? deserializeAws_json1_1PatchFilterList(output.PatchFilters, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchFilterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchFilter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchFilterValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchGroupList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchGroupPatchBaselineMapping = (output, context) => {
      return {
        BaselineIdentity: output.BaselineIdentity != null ? deserializeAws_json1_1PatchBaselineIdentity(output.BaselineIdentity, context) : void 0,
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1PatchGroupPatchBaselineMappingList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchGroupPatchBaselineMapping(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchIdList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Patch(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchPropertiesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchPropertyEntry(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchPropertyEntry = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1PatchRule = (output, context) => {
      return {
        ApproveAfterDays: (0, smithy_client_1.expectInt32)(output.ApproveAfterDays),
        ApproveUntilDate: (0, smithy_client_1.expectString)(output.ApproveUntilDate),
        ComplianceLevel: (0, smithy_client_1.expectString)(output.ComplianceLevel),
        EnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.EnableNonSecurity),
        PatchFilterGroup: output.PatchFilterGroup != null ? deserializeAws_json1_1PatchFilterGroup(output.PatchFilterGroup, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchRuleGroup = (output, context) => {
      return {
        PatchRules: output.PatchRules != null ? deserializeAws_json1_1PatchRuleList(output.PatchRules, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchRuleList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchRule(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchSource = (output, context) => {
      return {
        Configuration: (0, smithy_client_1.expectString)(output.Configuration),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Products: output.Products != null ? deserializeAws_json1_1PatchSourceProductList(output.Products, context) : void 0
      };
    };
    var deserializeAws_json1_1PatchSourceList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1PatchSource(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchSourceProductList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PatchStatus = (output, context) => {
      return {
        ApprovalDate: output.ApprovalDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ApprovalDate))) : void 0,
        ComplianceLevel: (0, smithy_client_1.expectString)(output.ComplianceLevel),
        DeploymentStatus: (0, smithy_client_1.expectString)(output.DeploymentStatus)
      };
    };
    var deserializeAws_json1_1PlatformTypeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1PoliciesLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1ProgressCounters = (output, context) => {
      return {
        CancelledSteps: (0, smithy_client_1.expectInt32)(output.CancelledSteps),
        FailedSteps: (0, smithy_client_1.expectInt32)(output.FailedSteps),
        SuccessSteps: (0, smithy_client_1.expectInt32)(output.SuccessSteps),
        TimedOutSteps: (0, smithy_client_1.expectInt32)(output.TimedOutSteps),
        TotalSteps: (0, smithy_client_1.expectInt32)(output.TotalSteps)
      };
    };
    var deserializeAws_json1_1PutComplianceItemsResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1PutInventoryResult = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1PutParameterResult = (output, context) => {
      return {
        Tier: (0, smithy_client_1.expectString)(output.Tier),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_json1_1PutResourcePolicyResponse = (output, context) => {
      return {
        PolicyHash: (0, smithy_client_1.expectString)(output.PolicyHash),
        PolicyId: (0, smithy_client_1.expectString)(output.PolicyId)
      };
    };
    var deserializeAws_json1_1Regions = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1RegisterDefaultPatchBaselineResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId)
      };
    };
    var deserializeAws_json1_1RegisterPatchBaselineForPatchGroupResult = (output, context) => {
      return {
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        PatchGroup: (0, smithy_client_1.expectString)(output.PatchGroup)
      };
    };
    var deserializeAws_json1_1RegisterTargetWithMaintenanceWindowResult = (output, context) => {
      return {
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1RegisterTaskWithMaintenanceWindowResult = (output, context) => {
      return {
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1RelatedOpsItem = (output, context) => {
      return {
        OpsItemId: (0, smithy_client_1.expectString)(output.OpsItemId)
      };
    };
    var deserializeAws_json1_1RelatedOpsItems = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1RelatedOpsItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1RemoveTagsFromResourceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1ResetServiceSettingResult = (output, context) => {
      return {
        ServiceSetting: output.ServiceSetting != null ? deserializeAws_json1_1ServiceSetting(output.ServiceSetting, context) : void 0
      };
    };
    var deserializeAws_json1_1ResolvedTargets = (output, context) => {
      return {
        ParameterValues: output.ParameterValues != null ? deserializeAws_json1_1TargetParameterList(output.ParameterValues, context) : void 0,
        Truncated: (0, smithy_client_1.expectBoolean)(output.Truncated)
      };
    };
    var deserializeAws_json1_1ResourceComplianceSummaryItem = (output, context) => {
      return {
        ComplianceType: (0, smithy_client_1.expectString)(output.ComplianceType),
        CompliantSummary: output.CompliantSummary != null ? deserializeAws_json1_1CompliantSummary(output.CompliantSummary, context) : void 0,
        ExecutionSummary: output.ExecutionSummary != null ? deserializeAws_json1_1ComplianceExecutionSummary(output.ExecutionSummary, context) : void 0,
        NonCompliantSummary: output.NonCompliantSummary != null ? deserializeAws_json1_1NonCompliantSummary(output.NonCompliantSummary, context) : void 0,
        OverallSeverity: (0, smithy_client_1.expectString)(output.OverallSeverity),
        ResourceId: (0, smithy_client_1.expectString)(output.ResourceId),
        ResourceType: (0, smithy_client_1.expectString)(output.ResourceType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1ResourceComplianceSummaryItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceComplianceSummaryItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncAlreadyExistsException = (output, context) => {
      return {
        SyncName: (0, smithy_client_1.expectString)(output.SyncName)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource = (output, context) => {
      return {
        OrganizationSourceType: (0, smithy_client_1.expectString)(output.OrganizationSourceType),
        OrganizationalUnits: output.OrganizationalUnits != null ? deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList(output.OrganizationalUnits, context) : void 0
      };
    };
    var deserializeAws_json1_1ResourceDataSyncConflictException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncCountExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncDestinationDataSharing = (output, context) => {
      return {
        DestinationDataSharingType: (0, smithy_client_1.expectString)(output.DestinationDataSharingType)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncInvalidConfigurationException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncItem = (output, context) => {
      return {
        LastStatus: (0, smithy_client_1.expectString)(output.LastStatus),
        LastSuccessfulSyncTime: output.LastSuccessfulSyncTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSuccessfulSyncTime))) : void 0,
        LastSyncStatusMessage: (0, smithy_client_1.expectString)(output.LastSyncStatusMessage),
        LastSyncTime: output.LastSyncTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastSyncTime))) : void 0,
        S3Destination: output.S3Destination != null ? deserializeAws_json1_1ResourceDataSyncS3Destination(output.S3Destination, context) : void 0,
        SyncCreatedTime: output.SyncCreatedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SyncCreatedTime))) : void 0,
        SyncLastModifiedTime: output.SyncLastModifiedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SyncLastModifiedTime))) : void 0,
        SyncName: (0, smithy_client_1.expectString)(output.SyncName),
        SyncSource: output.SyncSource != null ? deserializeAws_json1_1ResourceDataSyncSourceWithState(output.SyncSource, context) : void 0,
        SyncType: (0, smithy_client_1.expectString)(output.SyncType)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceDataSyncItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncNotFoundException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        SyncName: (0, smithy_client_1.expectString)(output.SyncName),
        SyncType: (0, smithy_client_1.expectString)(output.SyncType)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncOrganizationalUnit = (output, context) => {
      return {
        OrganizationalUnitId: (0, smithy_client_1.expectString)(output.OrganizationalUnitId)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncOrganizationalUnitList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ResourceDataSyncOrganizationalUnit(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncS3Destination = (output, context) => {
      return {
        AWSKMSKeyARN: (0, smithy_client_1.expectString)(output.AWSKMSKeyARN),
        BucketName: (0, smithy_client_1.expectString)(output.BucketName),
        DestinationDataSharing: output.DestinationDataSharing != null ? deserializeAws_json1_1ResourceDataSyncDestinationDataSharing(output.DestinationDataSharing, context) : void 0,
        Prefix: (0, smithy_client_1.expectString)(output.Prefix),
        Region: (0, smithy_client_1.expectString)(output.Region),
        SyncFormat: (0, smithy_client_1.expectString)(output.SyncFormat)
      };
    };
    var deserializeAws_json1_1ResourceDataSyncSourceRegionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResourceDataSyncSourceWithState = (output, context) => {
      return {
        AwsOrganizationsSource: output.AwsOrganizationsSource != null ? deserializeAws_json1_1ResourceDataSyncAwsOrganizationsSource(output.AwsOrganizationsSource, context) : void 0,
        EnableAllOpsDataSources: (0, smithy_client_1.expectBoolean)(output.EnableAllOpsDataSources),
        IncludeFutureRegions: (0, smithy_client_1.expectBoolean)(output.IncludeFutureRegions),
        SourceRegions: output.SourceRegions != null ? deserializeAws_json1_1ResourceDataSyncSourceRegionList(output.SourceRegions, context) : void 0,
        SourceType: (0, smithy_client_1.expectString)(output.SourceType),
        State: (0, smithy_client_1.expectString)(output.State)
      };
    };
    var deserializeAws_json1_1ResourceInUseException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourceLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourcePolicyConflictException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourcePolicyInvalidParameterException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        ParameterNames: output.ParameterNames != null ? deserializeAws_json1_1ResourcePolicyParameterNamesList(output.ParameterNames, context) : void 0
      };
    };
    var deserializeAws_json1_1ResourcePolicyLimitExceededException = (output, context) => {
      return {
        Limit: (0, smithy_client_1.expectInt32)(output.Limit),
        LimitType: (0, smithy_client_1.expectString)(output.LimitType),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1ResourcePolicyParameterNamesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1ResumeSessionResponse = (output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StreamUrl: (0, smithy_client_1.expectString)(output.StreamUrl),
        TokenValue: (0, smithy_client_1.expectString)(output.TokenValue)
      };
    };
    var deserializeAws_json1_1ReviewInformation = (output, context) => {
      return {
        ReviewedTime: output.ReviewedTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReviewedTime))) : void 0,
        Reviewer: (0, smithy_client_1.expectString)(output.Reviewer),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1ReviewInformationList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ReviewInformation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Runbook = (output, context) => {
      return {
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        DocumentVersion: (0, smithy_client_1.expectString)(output.DocumentVersion),
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Parameters: output.Parameters != null ? deserializeAws_json1_1AutomationParameterMap(output.Parameters, context) : void 0,
        TargetLocations: output.TargetLocations != null ? deserializeAws_json1_1TargetLocations(output.TargetLocations, context) : void 0,
        TargetMaps: output.TargetMaps != null ? deserializeAws_json1_1TargetMaps(output.TargetMaps, context) : void 0,
        TargetParameterName: (0, smithy_client_1.expectString)(output.TargetParameterName),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0
      };
    };
    var deserializeAws_json1_1Runbooks = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Runbook(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1S3OutputLocation = (output, context) => {
      return {
        OutputS3BucketName: (0, smithy_client_1.expectString)(output.OutputS3BucketName),
        OutputS3KeyPrefix: (0, smithy_client_1.expectString)(output.OutputS3KeyPrefix),
        OutputS3Region: (0, smithy_client_1.expectString)(output.OutputS3Region)
      };
    };
    var deserializeAws_json1_1S3OutputUrl = (output, context) => {
      return {
        OutputUrl: (0, smithy_client_1.expectString)(output.OutputUrl)
      };
    };
    var deserializeAws_json1_1ScheduledWindowExecution = (output, context) => {
      return {
        ExecutionTime: (0, smithy_client_1.expectString)(output.ExecutionTime),
        Name: (0, smithy_client_1.expectString)(output.Name),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1ScheduledWindowExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1ScheduledWindowExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1SendAutomationSignalResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1SendCommandResult = (output, context) => {
      return {
        Command: output.Command != null ? deserializeAws_json1_1Command(output.Command, context) : void 0
      };
    };
    var deserializeAws_json1_1ServiceSetting = (output, context) => {
      return {
        ARN: (0, smithy_client_1.expectString)(output.ARN),
        LastModifiedDate: output.LastModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModifiedDate))) : void 0,
        LastModifiedUser: (0, smithy_client_1.expectString)(output.LastModifiedUser),
        SettingId: (0, smithy_client_1.expectString)(output.SettingId),
        SettingValue: (0, smithy_client_1.expectString)(output.SettingValue),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_1ServiceSettingNotFound = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1Session = (output, context) => {
      return {
        Details: (0, smithy_client_1.expectString)(output.Details),
        DocumentName: (0, smithy_client_1.expectString)(output.DocumentName),
        EndDate: output.EndDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndDate))) : void 0,
        MaxSessionDuration: (0, smithy_client_1.expectString)(output.MaxSessionDuration),
        OutputUrl: output.OutputUrl != null ? deserializeAws_json1_1SessionManagerOutputUrl(output.OutputUrl, context) : void 0,
        Owner: (0, smithy_client_1.expectString)(output.Owner),
        Reason: (0, smithy_client_1.expectString)(output.Reason),
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StartDate: output.StartDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartDate))) : void 0,
        Status: (0, smithy_client_1.expectString)(output.Status),
        Target: (0, smithy_client_1.expectString)(output.Target)
      };
    };
    var deserializeAws_json1_1SessionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Session(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1SessionManagerOutputUrl = (output, context) => {
      return {
        CloudWatchOutputUrl: (0, smithy_client_1.expectString)(output.CloudWatchOutputUrl),
        S3OutputUrl: (0, smithy_client_1.expectString)(output.S3OutputUrl)
      };
    };
    var deserializeAws_json1_1SeveritySummary = (output, context) => {
      return {
        CriticalCount: (0, smithy_client_1.expectInt32)(output.CriticalCount),
        HighCount: (0, smithy_client_1.expectInt32)(output.HighCount),
        InformationalCount: (0, smithy_client_1.expectInt32)(output.InformationalCount),
        LowCount: (0, smithy_client_1.expectInt32)(output.LowCount),
        MediumCount: (0, smithy_client_1.expectInt32)(output.MediumCount),
        UnspecifiedCount: (0, smithy_client_1.expectInt32)(output.UnspecifiedCount)
      };
    };
    var deserializeAws_json1_1StartAssociationsOnceResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1StartAutomationExecutionResult = (output, context) => {
      return {
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId)
      };
    };
    var deserializeAws_json1_1StartChangeRequestExecutionResult = (output, context) => {
      return {
        AutomationExecutionId: (0, smithy_client_1.expectString)(output.AutomationExecutionId)
      };
    };
    var deserializeAws_json1_1StartSessionResponse = (output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId),
        StreamUrl: (0, smithy_client_1.expectString)(output.StreamUrl),
        TokenValue: (0, smithy_client_1.expectString)(output.TokenValue)
      };
    };
    var deserializeAws_json1_1StatusUnchanged = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1StepExecution = (output, context) => {
      return {
        Action: (0, smithy_client_1.expectString)(output.Action),
        ExecutionEndTime: output.ExecutionEndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionEndTime))) : void 0,
        ExecutionStartTime: output.ExecutionStartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExecutionStartTime))) : void 0,
        FailureDetails: output.FailureDetails != null ? deserializeAws_json1_1FailureDetails(output.FailureDetails, context) : void 0,
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        Inputs: output.Inputs != null ? deserializeAws_json1_1NormalStringMap(output.Inputs, context) : void 0,
        IsCritical: (0, smithy_client_1.expectBoolean)(output.IsCritical),
        IsEnd: (0, smithy_client_1.expectBoolean)(output.IsEnd),
        MaxAttempts: (0, smithy_client_1.expectInt32)(output.MaxAttempts),
        NextStep: (0, smithy_client_1.expectString)(output.NextStep),
        OnFailure: (0, smithy_client_1.expectString)(output.OnFailure),
        Outputs: output.Outputs != null ? deserializeAws_json1_1AutomationParameterMap(output.Outputs, context) : void 0,
        OverriddenParameters: output.OverriddenParameters != null ? deserializeAws_json1_1AutomationParameterMap(output.OverriddenParameters, context) : void 0,
        Response: (0, smithy_client_1.expectString)(output.Response),
        ResponseCode: (0, smithy_client_1.expectString)(output.ResponseCode),
        StepExecutionId: (0, smithy_client_1.expectString)(output.StepExecutionId),
        StepName: (0, smithy_client_1.expectString)(output.StepName),
        StepStatus: (0, smithy_client_1.expectString)(output.StepStatus),
        TargetLocation: output.TargetLocation != null ? deserializeAws_json1_1TargetLocation(output.TargetLocation, context) : void 0,
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TimeoutSeconds: (0, smithy_client_1.expectLong)(output.TimeoutSeconds),
        TriggeredAlarms: output.TriggeredAlarms != null ? deserializeAws_json1_1AlarmStateInformationList(output.TriggeredAlarms, context) : void 0,
        ValidNextSteps: output.ValidNextSteps != null ? deserializeAws_json1_1ValidNextStepList(output.ValidNextSteps, context) : void 0
      };
    };
    var deserializeAws_json1_1StepExecutionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1StepExecution(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1StopAutomationExecutionResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1SubTypeCountLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_1TagList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1Target = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Values: output.Values != null ? deserializeAws_json1_1TargetValues(output.Values, context) : void 0
      };
    };
    var deserializeAws_json1_1TargetInUseException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1TargetLocation = (output, context) => {
      return {
        Accounts: output.Accounts != null ? deserializeAws_json1_1Accounts(output.Accounts, context) : void 0,
        ExecutionRoleName: (0, smithy_client_1.expectString)(output.ExecutionRoleName),
        Regions: output.Regions != null ? deserializeAws_json1_1Regions(output.Regions, context) : void 0,
        TargetLocationAlarmConfiguration: output.TargetLocationAlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.TargetLocationAlarmConfiguration, context) : void 0,
        TargetLocationMaxConcurrency: (0, smithy_client_1.expectString)(output.TargetLocationMaxConcurrency),
        TargetLocationMaxErrors: (0, smithy_client_1.expectString)(output.TargetLocationMaxErrors)
      };
    };
    var deserializeAws_json1_1TargetLocations = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetLocation(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_json1_1TargetMapValueList(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_json1_1TargetMaps = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1TargetMap(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetMapValueList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetNotConnected = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1TargetParameterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1Targets = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_1Target(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_1TargetValues = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_1TerminateSessionResponse = (output, context) => {
      return {
        SessionId: (0, smithy_client_1.expectString)(output.SessionId)
      };
    };
    var deserializeAws_json1_1TooManyTagsError = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1TooManyUpdates = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1TotalSizeLimitExceededException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnlabelParameterVersionResult = (output, context) => {
      return {
        InvalidLabels: output.InvalidLabels != null ? deserializeAws_json1_1ParameterLabelList(output.InvalidLabels, context) : void 0,
        RemovedLabels: output.RemovedLabels != null ? deserializeAws_json1_1ParameterLabelList(output.RemovedLabels, context) : void 0
      };
    };
    var deserializeAws_json1_1UnsupportedCalendarException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedFeatureRequiredException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedInventoryItemContextException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message),
        TypeName: (0, smithy_client_1.expectString)(output.TypeName)
      };
    };
    var deserializeAws_json1_1UnsupportedInventorySchemaVersionException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedOperatingSystem = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UnsupportedParameterType = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_1UnsupportedPlatformType = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_1UpdateAssociationResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateAssociationStatusResult = (output, context) => {
      return {
        AssociationDescription: output.AssociationDescription != null ? deserializeAws_json1_1AssociationDescription(output.AssociationDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateDocumentDefaultVersionResult = (output, context) => {
      return {
        Description: output.Description != null ? deserializeAws_json1_1DocumentDefaultVersionDescription(output.Description, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateDocumentMetadataResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateDocumentResult = (output, context) => {
      return {
        DocumentDescription: output.DocumentDescription != null ? deserializeAws_json1_1DocumentDescription(output.DocumentDescription, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowResult = (output, context) => {
      return {
        AllowUnassociatedTargets: (0, smithy_client_1.expectBoolean)(output.AllowUnassociatedTargets),
        Cutoff: (0, smithy_client_1.expectInt32)(output.Cutoff),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Duration: (0, smithy_client_1.expectInt32)(output.Duration),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled),
        EndDate: (0, smithy_client_1.expectString)(output.EndDate),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Schedule: (0, smithy_client_1.expectString)(output.Schedule),
        ScheduleOffset: (0, smithy_client_1.expectInt32)(output.ScheduleOffset),
        ScheduleTimezone: (0, smithy_client_1.expectString)(output.ScheduleTimezone),
        StartDate: (0, smithy_client_1.expectString)(output.StartDate),
        WindowId: (0, smithy_client_1.expectString)(output.WindowId)
      };
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTargetResult = (output, context) => {
      return {
        Description: (0, smithy_client_1.expectString)(output.Description),
        Name: (0, smithy_client_1.expectString)(output.Name),
        OwnerInformation: (0, smithy_client_1.expectString)(output.OwnerInformation),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTargetId: (0, smithy_client_1.expectString)(output.WindowTargetId)
      };
    };
    var deserializeAws_json1_1UpdateMaintenanceWindowTaskResult = (output, context) => {
      return {
        AlarmConfiguration: output.AlarmConfiguration != null ? deserializeAws_json1_1AlarmConfiguration(output.AlarmConfiguration, context) : void 0,
        CutoffBehavior: (0, smithy_client_1.expectString)(output.CutoffBehavior),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LoggingInfo: output.LoggingInfo != null ? deserializeAws_json1_1LoggingInfo(output.LoggingInfo, context) : void 0,
        MaxConcurrency: (0, smithy_client_1.expectString)(output.MaxConcurrency),
        MaxErrors: (0, smithy_client_1.expectString)(output.MaxErrors),
        Name: (0, smithy_client_1.expectString)(output.Name),
        Priority: (0, smithy_client_1.expectInt32)(output.Priority),
        ServiceRoleArn: (0, smithy_client_1.expectString)(output.ServiceRoleArn),
        Targets: output.Targets != null ? deserializeAws_json1_1Targets(output.Targets, context) : void 0,
        TaskArn: (0, smithy_client_1.expectString)(output.TaskArn),
        TaskInvocationParameters: output.TaskInvocationParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskInvocationParameters(output.TaskInvocationParameters, context) : void 0,
        TaskParameters: output.TaskParameters != null ? deserializeAws_json1_1MaintenanceWindowTaskParameters(output.TaskParameters, context) : void 0,
        WindowId: (0, smithy_client_1.expectString)(output.WindowId),
        WindowTaskId: (0, smithy_client_1.expectString)(output.WindowTaskId)
      };
    };
    var deserializeAws_json1_1UpdateManagedInstanceRoleResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateOpsItemResponse = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateOpsMetadataResult = (output, context) => {
      return {
        OpsMetadataArn: (0, smithy_client_1.expectString)(output.OpsMetadataArn)
      };
    };
    var deserializeAws_json1_1UpdatePatchBaselineResult = (output, context) => {
      return {
        ApprovalRules: output.ApprovalRules != null ? deserializeAws_json1_1PatchRuleGroup(output.ApprovalRules, context) : void 0,
        ApprovedPatches: output.ApprovedPatches != null ? deserializeAws_json1_1PatchIdList(output.ApprovedPatches, context) : void 0,
        ApprovedPatchesComplianceLevel: (0, smithy_client_1.expectString)(output.ApprovedPatchesComplianceLevel),
        ApprovedPatchesEnableNonSecurity: (0, smithy_client_1.expectBoolean)(output.ApprovedPatchesEnableNonSecurity),
        BaselineId: (0, smithy_client_1.expectString)(output.BaselineId),
        CreatedDate: output.CreatedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreatedDate))) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        GlobalFilters: output.GlobalFilters != null ? deserializeAws_json1_1PatchFilterGroup(output.GlobalFilters, context) : void 0,
        ModifiedDate: output.ModifiedDate != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ModifiedDate))) : void 0,
        Name: (0, smithy_client_1.expectString)(output.Name),
        OperatingSystem: (0, smithy_client_1.expectString)(output.OperatingSystem),
        RejectedPatches: output.RejectedPatches != null ? deserializeAws_json1_1PatchIdList(output.RejectedPatches, context) : void 0,
        RejectedPatchesAction: (0, smithy_client_1.expectString)(output.RejectedPatchesAction),
        Sources: output.Sources != null ? deserializeAws_json1_1PatchSourceList(output.Sources, context) : void 0
      };
    };
    var deserializeAws_json1_1UpdateResourceDataSyncResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1UpdateServiceSettingResult = (output, context) => {
      return {};
    };
    var deserializeAws_json1_1ValidNextStepList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js
var require_AddTagsToResourceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AddTagsToResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddTagsToResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var AddTagsToResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AddTagsToResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AddTagsToResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddTagsToResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddTagsToResourceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AddTagsToResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AddTagsToResourceCommand)(output, context);
      }
    };
    exports.AddTagsToResourceCommand = AddTagsToResourceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js
var require_AssociateOpsItemRelatedItemCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/AssociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociateOpsItemRelatedItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var AssociateOpsItemRelatedItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "AssociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssociateOpsItemRelatedItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssociateOpsItemRelatedItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1AssociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1AssociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    exports.AssociateOpsItemRelatedItemCommand = AssociateOpsItemRelatedItemCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js
var require_CancelCommandCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelCommandCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CancelCommandCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelCommandRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelCommandResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelCommandCommand)(output, context);
      }
    };
    exports.CancelCommandCommand = CancelCommandCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js
var require_CancelMaintenanceWindowExecutionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CancelMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelMaintenanceWindowExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CancelMaintenanceWindowExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CancelMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CancelMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelMaintenanceWindowExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CancelMaintenanceWindowExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CancelMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CancelMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    exports.CancelMaintenanceWindowExecutionCommand = CancelMaintenanceWindowExecutionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js
var require_CreateActivationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateActivationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateActivationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateActivationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateActivationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateActivationCommand)(output, context);
      }
    };
    exports.CreateActivationCommand = CreateActivationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js
var require_CreateAssociationBatchCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationBatchCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationBatchCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateAssociationBatchCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAssociationBatchCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationBatchCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationBatchRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationBatchResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAssociationBatchCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAssociationBatchCommand)(output, context);
      }
    };
    exports.CreateAssociationBatchCommand = CreateAssociationBatchCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js
var require_CreateAssociationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateAssociationCommand)(output, context);
      }
    };
    exports.CreateAssociationCommand = CreateAssociationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js
var require_CreateDocumentCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateDocumentCommand)(output, context);
      }
    };
    exports.CreateDocumentCommand = CreateDocumentCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js
var require_CreateMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateMaintenanceWindowCommand)(output, context);
      }
    };
    exports.CreateMaintenanceWindowCommand = CreateMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js
var require_CreateOpsItemCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpsItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpsItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateOpsItemCommand)(output, context);
      }
    };
    exports.CreateOpsItemCommand = CreateOpsItemCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js
var require_CreateOpsMetadataCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateOpsMetadataCommand)(output, context);
      }
    };
    exports.CreateOpsMetadataCommand = CreateOpsMetadataCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js
var require_CreatePatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreatePatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreatePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreatePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreatePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreatePatchBaselineCommand)(output, context);
      }
    };
    exports.CreatePatchBaselineCommand = CreatePatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js
var require_CreateResourceDataSyncCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/CreateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var CreateResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "CreateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1CreateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1CreateResourceDataSyncCommand)(output, context);
      }
    };
    exports.CreateResourceDataSyncCommand = CreateResourceDataSyncCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js
var require_DeleteActivationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteActivationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteActivationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteActivationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteActivationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteActivationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteActivationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteActivationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteActivationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteActivationCommand)(output, context);
      }
    };
    exports.DeleteActivationCommand = DeleteActivationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js
var require_DeleteAssociationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteAssociationCommand)(output, context);
      }
    };
    exports.DeleteAssociationCommand = DeleteAssociationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js
var require_DeleteDocumentCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteDocumentCommand)(output, context);
      }
    };
    exports.DeleteDocumentCommand = DeleteDocumentCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js
var require_DeleteInventoryCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteInventoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteInventoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteInventoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteInventoryCommand)(output, context);
      }
    };
    exports.DeleteInventoryCommand = DeleteInventoryCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js
var require_DeleteMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeleteMaintenanceWindowCommand = DeleteMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js
var require_DeleteOpsMetadataCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteOpsMetadataCommand)(output, context);
      }
    };
    exports.DeleteOpsMetadataCommand = DeleteOpsMetadataCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js
var require_DeleteParameterCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParameterCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteParameterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteParameterCommand)(output, context);
      }
    };
    exports.DeleteParameterCommand = DeleteParameterCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js
var require_DeleteParametersCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteParametersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteParametersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteParametersCommand)(output, context);
      }
    };
    exports.DeleteParametersCommand = DeleteParametersCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js
var require_DeletePatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeletePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeletePatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeletePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeletePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeletePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeletePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeletePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeletePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeletePatchBaselineCommand)(output, context);
      }
    };
    exports.DeletePatchBaselineCommand = DeletePatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js
var require_DeleteResourceDataSyncCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteResourceDataSyncCommand)(output, context);
      }
    };
    exports.DeleteResourceDataSyncCommand = DeleteResourceDataSyncCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourcePolicyCommand.js
var require_DeleteResourcePolicyCommand2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeleteResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteResourcePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeleteResourcePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeleteResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteResourcePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteResourcePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeleteResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeleteResourcePolicyCommand)(output, context);
      }
    };
    exports.DeleteResourcePolicyCommand = DeleteResourcePolicyCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js
var require_DeregisterManagedInstanceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterManagedInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterManagedInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterManagedInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterManagedInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterManagedInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterManagedInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterManagedInstanceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterManagedInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterManagedInstanceCommand)(output, context);
      }
    };
    exports.DeregisterManagedInstanceCommand = DeregisterManagedInstanceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js
var require_DeregisterPatchBaselineForPatchGroupCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterPatchBaselineForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterPatchBaselineForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterPatchBaselineForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.DeregisterPatchBaselineForPatchGroupCommand = DeregisterPatchBaselineForPatchGroupCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js
var require_DeregisterTargetFromMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTargetFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTargetFromMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterTargetFromMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterTargetFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTargetFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTargetFromMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTargetFromMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterTargetFromMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeregisterTargetFromMaintenanceWindowCommand = DeregisterTargetFromMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js
var require_DeregisterTaskFromMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DeregisterTaskFromMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTaskFromMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DeregisterTaskFromMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeregisterTaskFromMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DeregisterTaskFromMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTaskFromMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTaskFromMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DeregisterTaskFromMaintenanceWindowCommand)(output, context);
      }
    };
    exports.DeregisterTaskFromMaintenanceWindowCommand = DeregisterTaskFromMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js
var require_DescribeActivationsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeActivationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeActivationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeActivationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeActivationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeActivationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeActivationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeActivationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeActivationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeActivationsCommand)(output, context);
      }
    };
    exports.DescribeActivationsCommand = DescribeActivationsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js
var require_DescribeAssociationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationCommand)(output, context);
      }
    };
    exports.DescribeAssociationCommand = DescribeAssociationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js
var require_DescribeAssociationExecutionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAssociationExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAssociationExecutionsCommand = DescribeAssociationExecutionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js
var require_DescribeAssociationExecutionTargetsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAssociationExecutionTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAssociationExecutionTargetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAssociationExecutionTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAssociationExecutionTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAssociationExecutionTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionTargetsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAssociationExecutionTargetsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAssociationExecutionTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAssociationExecutionTargetsCommand)(output, context);
      }
    };
    exports.DescribeAssociationExecutionTargetsCommand = DescribeAssociationExecutionTargetsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js
var require_DescribeAutomationExecutionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAutomationExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAutomationExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAutomationExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAutomationExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAutomationExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAutomationExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAutomationExecutionsCommand = DescribeAutomationExecutionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js
var require_DescribeAutomationStepExecutionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAutomationStepExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAutomationStepExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAutomationStepExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAutomationStepExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAutomationStepExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAutomationStepExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAutomationStepExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAutomationStepExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAutomationStepExecutionsCommand)(output, context);
      }
    };
    exports.DescribeAutomationStepExecutionsCommand = DescribeAutomationStepExecutionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js
var require_DescribeAvailablePatchesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeAvailablePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAvailablePatchesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeAvailablePatchesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeAvailablePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeAvailablePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAvailablePatchesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAvailablePatchesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeAvailablePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeAvailablePatchesCommand)(output, context);
      }
    };
    exports.DescribeAvailablePatchesCommand = DescribeAvailablePatchesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js
var require_DescribeDocumentCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeDocumentCommand)(output, context);
      }
    };
    exports.DescribeDocumentCommand = DescribeDocumentCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js
var require_DescribeDocumentPermissionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeDocumentPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeDocumentPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeDocumentPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeDocumentPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeDocumentPermissionCommand)(output, context);
      }
    };
    exports.DescribeDocumentPermissionCommand = DescribeDocumentPermissionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js
var require_DescribeEffectiveInstanceAssociationsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectiveInstanceAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectiveInstanceAssociationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeEffectiveInstanceAssociationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeEffectiveInstanceAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectiveInstanceAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEffectiveInstanceAssociationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEffectiveInstanceAssociationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeEffectiveInstanceAssociationsCommand)(output, context);
      }
    };
    exports.DescribeEffectiveInstanceAssociationsCommand = DescribeEffectiveInstanceAssociationsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js
var require_DescribeEffectivePatchesForPatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeEffectivePatchesForPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEffectivePatchesForPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeEffectivePatchesForPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeEffectivePatchesForPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeEffectivePatchesForPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEffectivePatchesForPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEffectivePatchesForPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeEffectivePatchesForPatchBaselineCommand)(output, context);
      }
    };
    exports.DescribeEffectivePatchesForPatchBaselineCommand = DescribeEffectivePatchesForPatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js
var require_DescribeInstanceAssociationsStatusCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceAssociationsStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceAssociationsStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstanceAssociationsStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstanceAssociationsStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceAssociationsStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstanceAssociationsStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstanceAssociationsStatusResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstanceAssociationsStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstanceAssociationsStatusCommand)(output, context);
      }
    };
    exports.DescribeInstanceAssociationsStatusCommand = DescribeInstanceAssociationsStatusCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js
var require_DescribeInstanceInformationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstanceInformationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstanceInformationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstanceInformationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstanceInformationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstanceInformationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstanceInformationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstanceInformationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstanceInformationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstanceInformationCommand)(output, context);
      }
    };
    exports.DescribeInstanceInformationCommand = DescribeInstanceInformationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js
var require_DescribeInstancePatchesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstancePatchesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchesCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchesCommand = DescribeInstancePatchesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js
var require_DescribeInstancePatchStatesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstancePatchStatesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchStatesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchStatesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchStatesCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchStatesCommand = DescribeInstancePatchStatesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js
var require_DescribeInstancePatchStatesForPatchGroupCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInstancePatchStatesForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInstancePatchStatesForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInstancePatchStatesForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInstancePatchStatesForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInstancePatchStatesForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInstancePatchStatesForPatchGroupCommand)(output, context);
      }
    };
    exports.DescribeInstancePatchStatesForPatchGroupCommand = DescribeInstancePatchStatesForPatchGroupCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js
var require_DescribeInventoryDeletionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeInventoryDeletionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeInventoryDeletionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeInventoryDeletionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeInventoryDeletionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeInventoryDeletionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeInventoryDeletionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeInventoryDeletionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeInventoryDeletionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeInventoryDeletionsCommand)(output, context);
      }
    };
    exports.DescribeInventoryDeletionsCommand = DescribeInventoryDeletionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js
var require_DescribeMaintenanceWindowExecutionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowExecutionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionsCommand = DescribeMaintenanceWindowExecutionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionTaskInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTaskInvocationsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionTaskInvocationsCommand = DescribeMaintenanceWindowExecutionTaskInvocationsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js
var require_DescribeMaintenanceWindowExecutionTasksCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowExecutionTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowExecutionTasksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowExecutionTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowExecutionTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowExecutionTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTasksRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowExecutionTasksResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowExecutionTasksCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowExecutionTasksCommand = DescribeMaintenanceWindowExecutionTasksCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js
var require_DescribeMaintenanceWindowScheduleCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowScheduleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowScheduleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowScheduleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowScheduleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowScheduleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowScheduleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowScheduleResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowScheduleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowScheduleCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowScheduleCommand = DescribeMaintenanceWindowScheduleCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js
var require_DescribeMaintenanceWindowsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowsCommand = DescribeMaintenanceWindowsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js
var require_DescribeMaintenanceWindowsForTargetCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowsForTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowsForTargetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowsForTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowsForTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowsForTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsForTargetRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowsForTargetResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowsForTargetCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowsForTargetCommand = DescribeMaintenanceWindowsForTargetCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js
var require_DescribeMaintenanceWindowTargetsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTargetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTargetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowTargetsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowTargetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTargetsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTargetsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowTargetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowTargetsCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowTargetsCommand = DescribeMaintenanceWindowTargetsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js
var require_DescribeMaintenanceWindowTasksCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeMaintenanceWindowTasksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeMaintenanceWindowTasksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_0_1 = require_models_05();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeMaintenanceWindowTasksCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeMaintenanceWindowTasksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeMaintenanceWindowTasksCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeMaintenanceWindowTasksResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeMaintenanceWindowTasksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeMaintenanceWindowTasksCommand)(output, context);
      }
    };
    exports.DescribeMaintenanceWindowTasksCommand = DescribeMaintenanceWindowTasksCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js
var require_DescribeOpsItemsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeOpsItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeOpsItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeOpsItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeOpsItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeOpsItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeOpsItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeOpsItemsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeOpsItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeOpsItemsCommand)(output, context);
      }
    };
    exports.DescribeOpsItemsCommand = DescribeOpsItemsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js
var require_DescribeParametersCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeParametersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeParametersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeParametersCommand)(output, context);
      }
    };
    exports.DescribeParametersCommand = DescribeParametersCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js
var require_DescribePatchBaselinesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchBaselinesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchBaselinesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchBaselinesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchBaselinesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchBaselinesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchBaselinesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchBaselinesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchBaselinesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchBaselinesCommand)(output, context);
      }
    };
    exports.DescribePatchBaselinesCommand = DescribePatchBaselinesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js
var require_DescribePatchGroupsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchGroupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchGroupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchGroupsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchGroupsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchGroupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchGroupsCommand)(output, context);
      }
    };
    exports.DescribePatchGroupsCommand = DescribePatchGroupsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js
var require_DescribePatchGroupStateCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchGroupStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchGroupStateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchGroupStateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchGroupStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchGroupStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchGroupStateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchGroupStateResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchGroupStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchGroupStateCommand)(output, context);
      }
    };
    exports.DescribePatchGroupStateCommand = DescribePatchGroupStateCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js
var require_DescribePatchPropertiesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribePatchPropertiesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePatchPropertiesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribePatchPropertiesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribePatchPropertiesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribePatchPropertiesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribePatchPropertiesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribePatchPropertiesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribePatchPropertiesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribePatchPropertiesCommand)(output, context);
      }
    };
    exports.DescribePatchPropertiesCommand = DescribePatchPropertiesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js
var require_DescribeSessionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DescribeSessionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeSessionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DescribeSessionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DescribeSessionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DescribeSessionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DescribeSessionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DescribeSessionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DescribeSessionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DescribeSessionsCommand)(output, context);
      }
    };
    exports.DescribeSessionsCommand = DescribeSessionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js
var require_DisassociateOpsItemRelatedItemCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/DisassociateOpsItemRelatedItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisassociateOpsItemRelatedItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var DisassociateOpsItemRelatedItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DisassociateOpsItemRelatedItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "DisassociateOpsItemRelatedItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.DisassociateOpsItemRelatedItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.DisassociateOpsItemRelatedItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1DisassociateOpsItemRelatedItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1DisassociateOpsItemRelatedItemCommand)(output, context);
      }
    };
    exports.DisassociateOpsItemRelatedItemCommand = DisassociateOpsItemRelatedItemCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js
var require_GetAutomationExecutionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAutomationExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetAutomationExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetAutomationExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetAutomationExecutionCommand)(output, context);
      }
    };
    exports.GetAutomationExecutionCommand = GetAutomationExecutionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js
var require_GetCalendarStateCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCalendarStateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCalendarStateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetCalendarStateCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCalendarStateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCalendarStateCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetCalendarStateRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetCalendarStateResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetCalendarStateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetCalendarStateCommand)(output, context);
      }
    };
    exports.GetCalendarStateCommand = GetCalendarStateCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js
var require_GetCommandInvocationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetCommandInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCommandInvocationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetCommandInvocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCommandInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetCommandInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetCommandInvocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetCommandInvocationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetCommandInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetCommandInvocationCommand)(output, context);
      }
    };
    exports.GetCommandInvocationCommand = GetCommandInvocationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js
var require_GetConnectionStatusCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetConnectionStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetConnectionStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetConnectionStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetConnectionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetConnectionStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetConnectionStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetConnectionStatusResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetConnectionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetConnectionStatusCommand)(output, context);
      }
    };
    exports.GetConnectionStatusCommand = GetConnectionStatusCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js
var require_GetDefaultPatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDefaultPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetDefaultPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDefaultPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDefaultPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDefaultPatchBaselineCommand)(output, context);
      }
    };
    exports.GetDefaultPatchBaselineCommand = GetDefaultPatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js
var require_GetDeployablePatchSnapshotForInstanceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDeployablePatchSnapshotForInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDeployablePatchSnapshotForInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetDeployablePatchSnapshotForInstanceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDeployablePatchSnapshotForInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDeployablePatchSnapshotForInstanceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDeployablePatchSnapshotForInstanceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDeployablePatchSnapshotForInstanceCommand)(output, context);
      }
    };
    exports.GetDeployablePatchSnapshotForInstanceCommand = GetDeployablePatchSnapshotForInstanceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js
var require_GetDocumentCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetDocumentCommand)(output, context);
      }
    };
    exports.GetDocumentCommand = GetDocumentCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js
var require_GetInventoryCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.GetInventoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetInventoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetInventoryCommand)(output, context);
      }
    };
    exports.GetInventoryCommand = GetInventoryCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js
var require_GetInventorySchemaCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetInventorySchemaCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetInventorySchemaCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetInventorySchemaCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetInventorySchemaCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetInventorySchemaCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetInventorySchemaRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetInventorySchemaResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetInventorySchemaCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetInventorySchemaCommand)(output, context);
      }
    };
    exports.GetInventorySchemaCommand = GetInventorySchemaCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js
var require_GetMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowCommand = GetMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js
var require_GetMaintenanceWindowExecutionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionCommand = GetMaintenanceWindowExecutionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js
var require_GetMaintenanceWindowExecutionTaskCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowExecutionTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionTaskCommand = GetMaintenanceWindowExecutionTaskCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js
var require_GetMaintenanceWindowExecutionTaskInvocationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowExecutionTaskInvocationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowExecutionTaskInvocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowExecutionTaskInvocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowExecutionTaskInvocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowExecutionTaskInvocationCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowExecutionTaskInvocationCommand = GetMaintenanceWindowExecutionTaskInvocationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js
var require_GetMaintenanceWindowTaskCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetMaintenanceWindowTaskCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetMaintenanceWindowTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetMaintenanceWindowTaskCommand)(output, context);
      }
    };
    exports.GetMaintenanceWindowTaskCommand = GetMaintenanceWindowTaskCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js
var require_GetOpsItemCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetOpsItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsItemCommand)(output, context);
      }
    };
    exports.GetOpsItemCommand = GetOpsItemCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js
var require_GetOpsMetadataCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsMetadataCommand)(output, context);
      }
    };
    exports.GetOpsMetadataCommand = GetOpsMetadataCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js
var require_GetOpsSummaryCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetOpsSummaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetOpsSummaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetOpsSummaryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetOpsSummaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetOpsSummaryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.GetOpsSummaryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetOpsSummaryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetOpsSummaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetOpsSummaryCommand)(output, context);
      }
    };
    exports.GetOpsSummaryCommand = GetOpsSummaryCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js
var require_GetParameterCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParameterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParameterCommand)(output, context);
      }
    };
    exports.GetParameterCommand = GetParameterCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js
var require_GetParameterHistoryCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParameterHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParameterHistoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParameterHistoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParameterHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParameterHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParameterHistoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParameterHistoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParameterHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParameterHistoryCommand)(output, context);
      }
    };
    exports.GetParameterHistoryCommand = GetParameterHistoryCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js
var require_GetParametersByPathCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersByPathCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersByPathCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParametersByPathCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParametersByPathCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersByPathCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParametersByPathRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParametersByPathResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersByPathCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersByPathCommand)(output, context);
      }
    };
    exports.GetParametersByPathCommand = GetParametersByPathCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js
var require_GetParametersCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetParametersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetParametersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetParametersCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetParametersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetParametersCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetParametersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetParametersResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetParametersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetParametersCommand)(output, context);
      }
    };
    exports.GetParametersCommand = GetParametersCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js
var require_GetPatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPatchBaselineCommand)(output, context);
      }
    };
    exports.GetPatchBaselineCommand = GetPatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js
var require_GetPatchBaselineForPatchGroupCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPatchBaselineForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetPatchBaselineForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetPatchBaselineForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.GetPatchBaselineForPatchGroupCommand = GetPatchBaselineForPatchGroupCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetResourcePoliciesCommand.js
var require_GetResourcePoliciesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetResourcePoliciesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetResourcePoliciesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetResourcePoliciesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetResourcePoliciesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetResourcePoliciesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetResourcePoliciesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetResourcePoliciesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetResourcePoliciesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetResourcePoliciesCommand)(output, context);
      }
    };
    exports.GetResourcePoliciesCommand = GetResourcePoliciesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js
var require_GetServiceSettingCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/GetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetServiceSettingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var GetServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "GetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.GetServiceSettingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.GetServiceSettingResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1GetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1GetServiceSettingCommand)(output, context);
      }
    };
    exports.GetServiceSettingCommand = GetServiceSettingCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js
var require_LabelParameterVersionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/LabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LabelParameterVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var LabelParameterVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "LabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.LabelParameterVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.LabelParameterVersionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1LabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1LabelParameterVersionCommand)(output, context);
      }
    };
    exports.LabelParameterVersionCommand = LabelParameterVersionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js
var require_ListAssociationsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListAssociationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAssociationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAssociationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAssociationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAssociationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAssociationsCommand)(output, context);
      }
    };
    exports.ListAssociationsCommand = ListAssociationsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js
var require_ListAssociationVersionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListAssociationVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAssociationVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListAssociationVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAssociationVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListAssociationVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListAssociationVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListAssociationVersionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListAssociationVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListAssociationVersionsCommand)(output, context);
      }
    };
    exports.ListAssociationVersionsCommand = ListAssociationVersionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js
var require_ListCommandInvocationsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandInvocationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandInvocationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListCommandInvocationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCommandInvocationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandInvocationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListCommandInvocationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListCommandInvocationsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListCommandInvocationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListCommandInvocationsCommand)(output, context);
      }
    };
    exports.ListCommandInvocationsCommand = ListCommandInvocationsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js
var require_ListCommandsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListCommandsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCommandsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListCommandsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListCommandsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListCommandsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListCommandsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListCommandsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListCommandsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListCommandsCommand)(output, context);
      }
    };
    exports.ListCommandsCommand = ListCommandsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js
var require_ListComplianceItemsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListComplianceItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListComplianceItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListComplianceItemsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListComplianceItemsCommand)(output, context);
      }
    };
    exports.ListComplianceItemsCommand = ListComplianceItemsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js
var require_ListComplianceSummariesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListComplianceSummariesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListComplianceSummariesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListComplianceSummariesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListComplianceSummariesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListComplianceSummariesCommand)(output, context);
      }
    };
    exports.ListComplianceSummariesCommand = ListComplianceSummariesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js
var require_ListDocumentMetadataHistoryCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentMetadataHistoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentMetadataHistoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListDocumentMetadataHistoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentMetadataHistoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentMetadataHistoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentMetadataHistoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentMetadataHistoryResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentMetadataHistoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentMetadataHistoryCommand)(output, context);
      }
    };
    exports.ListDocumentMetadataHistoryCommand = ListDocumentMetadataHistoryCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js
var require_ListDocumentsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListDocumentsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentsCommand)(output, context);
      }
    };
    exports.ListDocumentsCommand = ListDocumentsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js
var require_ListDocumentVersionsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListDocumentVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListDocumentVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListDocumentVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListDocumentVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListDocumentVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListDocumentVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListDocumentVersionsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListDocumentVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListDocumentVersionsCommand)(output, context);
      }
    };
    exports.ListDocumentVersionsCommand = ListDocumentVersionsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js
var require_ListInventoryEntriesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListInventoryEntriesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListInventoryEntriesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListInventoryEntriesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListInventoryEntriesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListInventoryEntriesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListInventoryEntriesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListInventoryEntriesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListInventoryEntriesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListInventoryEntriesCommand)(output, context);
      }
    };
    exports.ListInventoryEntriesCommand = ListInventoryEntriesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js
var require_ListOpsItemEventsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemEventsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemEventsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListOpsItemEventsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsItemEventsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemEventsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsItemEventsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsItemEventsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsItemEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsItemEventsCommand)(output, context);
      }
    };
    exports.ListOpsItemEventsCommand = ListOpsItemEventsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js
var require_ListOpsItemRelatedItemsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsItemRelatedItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsItemRelatedItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListOpsItemRelatedItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsItemRelatedItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsItemRelatedItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsItemRelatedItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsItemRelatedItemsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsItemRelatedItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsItemRelatedItemsCommand)(output, context);
      }
    };
    exports.ListOpsItemRelatedItemsCommand = ListOpsItemRelatedItemsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js
var require_ListOpsMetadataCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListOpsMetadataCommand)(output, context);
      }
    };
    exports.ListOpsMetadataCommand = ListOpsMetadataCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js
var require_ListResourceComplianceSummariesCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceComplianceSummariesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceComplianceSummariesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListResourceComplianceSummariesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListResourceComplianceSummariesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceComplianceSummariesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListResourceComplianceSummariesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListResourceComplianceSummariesResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceComplianceSummariesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceComplianceSummariesCommand)(output, context);
      }
    };
    exports.ListResourceComplianceSummariesCommand = ListResourceComplianceSummariesCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js
var require_ListResourceDataSyncCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListResourceDataSyncCommand)(output, context);
      }
    };
    exports.ListResourceDataSyncCommand = ListResourceDataSyncCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js
var require_ListTagsForResourceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ListTagsForResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsForResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ListTagsForResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ListTagsForResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ListTagsForResourceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
      }
    };
    exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js
var require_ModifyDocumentPermissionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ModifyDocumentPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyDocumentPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ModifyDocumentPermissionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ModifyDocumentPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ModifyDocumentPermissionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ModifyDocumentPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ModifyDocumentPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ModifyDocumentPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ModifyDocumentPermissionCommand)(output, context);
      }
    };
    exports.ModifyDocumentPermissionCommand = ModifyDocumentPermissionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js
var require_PutComplianceItemsCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutComplianceItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutComplianceItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutComplianceItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutComplianceItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutComplianceItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutComplianceItemsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutComplianceItemsResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutComplianceItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutComplianceItemsCommand)(output, context);
      }
    };
    exports.PutComplianceItemsCommand = PutComplianceItemsCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js
var require_PutInventoryCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutInventoryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutInventoryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutInventoryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutInventoryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutInventoryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutInventoryRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutInventoryResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutInventoryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutInventoryCommand)(output, context);
      }
    };
    exports.PutInventoryCommand = PutInventoryCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js
var require_PutParameterCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutParameterCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutParameterCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutParameterCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutParameterCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutParameterCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutParameterRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutParameterResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutParameterCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutParameterCommand)(output, context);
      }
    };
    exports.PutParameterCommand = PutParameterCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutResourcePolicyCommand.js
var require_PutResourcePolicyCommand2 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/PutResourcePolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutResourcePolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var PutResourcePolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutResourcePolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "PutResourcePolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutResourcePolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutResourcePolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1PutResourcePolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1PutResourcePolicyCommand)(output, context);
      }
    };
    exports.PutResourcePolicyCommand = PutResourcePolicyCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js
var require_RegisterDefaultPatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterDefaultPatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterDefaultPatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterDefaultPatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterDefaultPatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterDefaultPatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterDefaultPatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterDefaultPatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterDefaultPatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterDefaultPatchBaselineCommand)(output, context);
      }
    };
    exports.RegisterDefaultPatchBaselineCommand = RegisterDefaultPatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js
var require_RegisterPatchBaselineForPatchGroupCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterPatchBaselineForPatchGroupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterPatchBaselineForPatchGroupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterPatchBaselineForPatchGroupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterPatchBaselineForPatchGroupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterPatchBaselineForPatchGroupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterPatchBaselineForPatchGroupRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterPatchBaselineForPatchGroupResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterPatchBaselineForPatchGroupCommand)(output, context);
      }
    };
    exports.RegisterPatchBaselineForPatchGroupCommand = RegisterPatchBaselineForPatchGroupCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js
var require_RegisterTargetWithMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTargetWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTargetWithMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterTargetWithMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterTargetWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTargetWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterTargetWithMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterTargetWithMaintenanceWindowCommand)(output, context);
      }
    };
    exports.RegisterTargetWithMaintenanceWindowCommand = RegisterTargetWithMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js
var require_RegisterTaskWithMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RegisterTaskWithMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTaskWithMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RegisterTaskWithMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterTaskWithMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RegisterTaskWithMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RegisterTaskWithMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RegisterTaskWithMaintenanceWindowCommand)(output, context);
      }
    };
    exports.RegisterTaskWithMaintenanceWindowCommand = RegisterTaskWithMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js
var require_RemoveTagsFromResourceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/RemoveTagsFromResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveTagsFromResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var RemoveTagsFromResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RemoveTagsFromResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "RemoveTagsFromResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RemoveTagsFromResourceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1RemoveTagsFromResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1RemoveTagsFromResourceCommand)(output, context);
      }
    };
    exports.RemoveTagsFromResourceCommand = RemoveTagsFromResourceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js
var require_ResetServiceSettingCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResetServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResetServiceSettingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ResetServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResetServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResetServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResetServiceSettingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ResetServiceSettingResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ResetServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ResetServiceSettingCommand)(output, context);
      }
    };
    exports.ResetServiceSettingCommand = ResetServiceSettingCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js
var require_ResumeSessionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/ResumeSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResumeSessionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var ResumeSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ResumeSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "ResumeSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.ResumeSessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.ResumeSessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1ResumeSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1ResumeSessionCommand)(output, context);
      }
    };
    exports.ResumeSessionCommand = ResumeSessionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js
var require_SendAutomationSignalCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendAutomationSignalCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendAutomationSignalCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var SendAutomationSignalCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SendAutomationSignalCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendAutomationSignalCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendAutomationSignalRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendAutomationSignalResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SendAutomationSignalCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SendAutomationSignalCommand)(output, context);
      }
    };
    exports.SendAutomationSignalCommand = SendAutomationSignalCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js
var require_SendCommandCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/SendCommandCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SendCommandCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var SendCommandCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SendCommandCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "SendCommandCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SendCommandRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SendCommandResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1SendCommandCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1SendCommandCommand)(output, context);
      }
    };
    exports.SendCommandCommand = SendCommandCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js
var require_StartAssociationsOnceCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAssociationsOnceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAssociationsOnceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartAssociationsOnceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartAssociationsOnceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAssociationsOnceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartAssociationsOnceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartAssociationsOnceResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartAssociationsOnceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartAssociationsOnceCommand)(output, context);
      }
    };
    exports.StartAssociationsOnceCommand = StartAssociationsOnceCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js
var require_StartAutomationExecutionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartAutomationExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartAutomationExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartAutomationExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartAutomationExecutionCommand)(output, context);
      }
    };
    exports.StartAutomationExecutionCommand = StartAutomationExecutionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js
var require_StartChangeRequestExecutionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartChangeRequestExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartChangeRequestExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartChangeRequestExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartChangeRequestExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartChangeRequestExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartChangeRequestExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartChangeRequestExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartChangeRequestExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartChangeRequestExecutionCommand)(output, context);
      }
    };
    exports.StartChangeRequestExecutionCommand = StartChangeRequestExecutionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js
var require_StartSessionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StartSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartSessionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StartSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StartSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StartSessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StartSessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StartSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StartSessionCommand)(output, context);
      }
    };
    exports.StartSessionCommand = StartSessionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js
var require_StopAutomationExecutionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/StopAutomationExecutionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopAutomationExecutionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var StopAutomationExecutionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StopAutomationExecutionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "StopAutomationExecutionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.StopAutomationExecutionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.StopAutomationExecutionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1StopAutomationExecutionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1StopAutomationExecutionCommand)(output, context);
      }
    };
    exports.StopAutomationExecutionCommand = StopAutomationExecutionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js
var require_TerminateSessionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/TerminateSessionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TerminateSessionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var TerminateSessionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, TerminateSessionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "TerminateSessionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.TerminateSessionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.TerminateSessionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1TerminateSessionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1TerminateSessionCommand)(output, context);
      }
    };
    exports.TerminateSessionCommand = TerminateSessionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js
var require_UnlabelParameterVersionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UnlabelParameterVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnlabelParameterVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_1_1 = require_models_1();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UnlabelParameterVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UnlabelParameterVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UnlabelParameterVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UnlabelParameterVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UnlabelParameterVersionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UnlabelParameterVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UnlabelParameterVersionCommand)(output, context);
      }
    };
    exports.UnlabelParameterVersionCommand = UnlabelParameterVersionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js
var require_UpdateAssociationCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateAssociationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssociationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateAssociationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateAssociationResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAssociationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAssociationCommand)(output, context);
      }
    };
    exports.UpdateAssociationCommand = UpdateAssociationCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js
var require_UpdateAssociationStatusCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateAssociationStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAssociationStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateAssociationStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateAssociationStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateAssociationStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateAssociationStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateAssociationStatusResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateAssociationStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateAssociationStatusCommand)(output, context);
      }
    };
    exports.UpdateAssociationStatusCommand = UpdateAssociationStatusCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js
var require_UpdateDocumentCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateDocumentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateDocumentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateDocumentResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentCommand)(output, context);
      }
    };
    exports.UpdateDocumentCommand = UpdateDocumentCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js
var require_UpdateDocumentDefaultVersionCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentDefaultVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentDefaultVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateDocumentDefaultVersionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentDefaultVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentDefaultVersionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateDocumentDefaultVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateDocumentDefaultVersionResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentDefaultVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentDefaultVersionCommand)(output, context);
      }
    };
    exports.UpdateDocumentDefaultVersionCommand = UpdateDocumentDefaultVersionCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js
var require_UpdateDocumentMetadataCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateDocumentMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDocumentMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateDocumentMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateDocumentMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateDocumentMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateDocumentMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateDocumentMetadataResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateDocumentMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateDocumentMetadataCommand)(output, context);
      }
    };
    exports.UpdateDocumentMetadataCommand = UpdateDocumentMetadataCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js
var require_UpdateMaintenanceWindowCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateMaintenanceWindowCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowCommand = UpdateMaintenanceWindowCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js
var require_UpdateMaintenanceWindowTargetCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTargetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTargetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateMaintenanceWindowTargetCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowTargetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTargetCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTargetResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowTargetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowTargetCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowTargetCommand = UpdateMaintenanceWindowTargetCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js
var require_UpdateMaintenanceWindowTaskCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateMaintenanceWindowTaskCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateMaintenanceWindowTaskCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateMaintenanceWindowTaskCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateMaintenanceWindowTaskCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateMaintenanceWindowTaskCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateMaintenanceWindowTaskResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateMaintenanceWindowTaskCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateMaintenanceWindowTaskCommand)(output, context);
      }
    };
    exports.UpdateMaintenanceWindowTaskCommand = UpdateMaintenanceWindowTaskCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js
var require_UpdateManagedInstanceRoleCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateManagedInstanceRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateManagedInstanceRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateManagedInstanceRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateManagedInstanceRoleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateManagedInstanceRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateManagedInstanceRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateManagedInstanceRoleResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateManagedInstanceRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateManagedInstanceRoleCommand)(output, context);
      }
    };
    exports.UpdateManagedInstanceRoleCommand = UpdateManagedInstanceRoleCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js
var require_UpdateOpsItemCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateOpsItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpsItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateOpsItemRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateOpsItemResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateOpsItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateOpsItemCommand)(output, context);
      }
    };
    exports.UpdateOpsItemCommand = UpdateOpsItemCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js
var require_UpdateOpsMetadataCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateOpsMetadataCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateOpsMetadataCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateOpsMetadataCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateOpsMetadataCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateOpsMetadataCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateOpsMetadataRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateOpsMetadataResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateOpsMetadataCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateOpsMetadataCommand)(output, context);
      }
    };
    exports.UpdateOpsMetadataCommand = UpdateOpsMetadataCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js
var require_UpdatePatchBaselineCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdatePatchBaselineCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdatePatchBaselineCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdatePatchBaselineCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdatePatchBaselineCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdatePatchBaselineCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdatePatchBaselineRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdatePatchBaselineResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdatePatchBaselineCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdatePatchBaselineCommand)(output, context);
      }
    };
    exports.UpdatePatchBaselineCommand = UpdatePatchBaselineCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js
var require_UpdateResourceDataSyncCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateResourceDataSyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateResourceDataSyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateResourceDataSyncCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateResourceDataSyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateResourceDataSyncCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateResourceDataSyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateResourceDataSyncResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateResourceDataSyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateResourceDataSyncCommand)(output, context);
      }
    };
    exports.UpdateResourceDataSyncCommand = UpdateResourceDataSyncCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js
var require_UpdateServiceSettingCommand = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/UpdateServiceSettingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateServiceSettingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_serde_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs8();
    var models_2_1 = require_models_2();
    var Aws_json1_1_1 = require_Aws_json1_12();
    var UpdateServiceSettingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UpdateServiceSettingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSMClient";
        const commandName = "UpdateServiceSettingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_2_1.UpdateServiceSettingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_2_1.UpdateServiceSettingResultFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_1_1.serializeAws_json1_1UpdateServiceSettingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_1_1.deserializeAws_json1_1UpdateServiceSettingCommand)(output, context);
      }
    };
    exports.UpdateServiceSettingCommand = UpdateServiceSettingCommand;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ssm"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/package.json
var require_package7 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-ssm",
      description: "AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native",
      version: "3.290.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo ssm"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.290.0",
        "@aws-sdk/config-resolver": "3.290.0",
        "@aws-sdk/credential-provider-node": "3.290.0",
        "@aws-sdk/fetch-http-handler": "3.290.0",
        "@aws-sdk/hash-node": "3.290.0",
        "@aws-sdk/invalid-dependency": "3.290.0",
        "@aws-sdk/middleware-content-length": "3.290.0",
        "@aws-sdk/middleware-endpoint": "3.290.0",
        "@aws-sdk/middleware-host-header": "3.290.0",
        "@aws-sdk/middleware-logger": "3.290.0",
        "@aws-sdk/middleware-recursion-detection": "3.290.0",
        "@aws-sdk/middleware-retry": "3.290.0",
        "@aws-sdk/middleware-serde": "3.290.0",
        "@aws-sdk/middleware-signing": "3.290.0",
        "@aws-sdk/middleware-stack": "3.290.0",
        "@aws-sdk/middleware-user-agent": "3.290.0",
        "@aws-sdk/node-config-provider": "3.290.0",
        "@aws-sdk/node-http-handler": "3.290.0",
        "@aws-sdk/protocol-http": "3.290.0",
        "@aws-sdk/smithy-client": "3.290.0",
        "@aws-sdk/types": "3.290.0",
        "@aws-sdk/url-parser": "3.290.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.290.0",
        "@aws-sdk/util-defaults-mode-node": "3.290.0",
        "@aws-sdk/util-endpoints": "3.290.0",
        "@aws-sdk/util-retry": "3.290.0",
        "@aws-sdk/util-user-agent-browser": "3.290.0",
        "@aws-sdk/util-user-agent-node": "3.290.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "@aws-sdk/util-waiter": "3.290.0",
        tslib: "^2.3.1",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-ssm"
      }
    };
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var s = "required";
    var t = "fn";
    var u = "argv";
    var v = "ref";
    var a = "isSet";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = "PartitionResult";
    var f = "getAttr";
    var g = { [s]: false, "type": "String" };
    var h = { [s]: true, "default": false, "type": "Boolean" };
    var i = { [v]: "Endpoint" };
    var j = { [t]: "booleanEquals", [u]: [{ [v]: "UseFIPS" }, true] };
    var k = { [t]: "booleanEquals", [u]: [{ [v]: "UseDualStack" }, true] };
    var l = {};
    var m = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [{ [v]: e }, "supportsFIPS"] }] };
    var n = { [v]: e };
    var o = { [t]: "booleanEquals", [u]: [true, { [t]: f, [u]: [n, "supportsDualStack"] }] };
    var p = [j];
    var q = [k];
    var r = [{ [v]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: g, UseDualStack: h, UseFIPS: h, Endpoint: g }, rules: [{ conditions: [{ [t]: a, [u]: [i] }], type: b, rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: i, properties: l, headers: l }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [t]: a, [u]: r }], type: b, rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: e }], type: b, rules: [{ conditions: [j, k], type: b, rules: [{ conditions: [m, o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: p, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ conditions: [{ [t]: "stringEquals", [u]: ["aws-us-gov", { [t]: f, [u]: [n, "name"] }] }], endpoint: { url: "https://ssm.{Region}.amazonaws.com", properties: l, headers: l }, type: d }, { endpoint: { url: "https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: q, type: b, rules: [{ conditions: [o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: d }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { type: b, rules: [{ endpoint: { url: "https://ssm.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: d }] }] }] }, { error: "Invalid Configuration: Missing Region", type: c }] }] };
    exports.ruleSet = _data;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset5();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs8();
    var url_parser_1 = require_dist_cjs3();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2014-11-06",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSM",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package7());
    var client_sts_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs11();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs8();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs8();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js
var require_SSMClient = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/SSMClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMClient = void 0;
    var config_resolver_1 = require_dist_cjs11();
    var middleware_content_length_1 = require_dist_cjs12();
    var middleware_endpoint_1 = require_dist_cjs6();
    var middleware_host_header_1 = require_dist_cjs13();
    var middleware_logger_1 = require_dist_cjs14();
    var middleware_recursion_detection_1 = require_dist_cjs15();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_signing_1 = require_dist_cjs25();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs8();
    var EndpointParameters_1 = require_EndpointParameters5();
    var runtimeConfig_1 = require_runtimeConfig5();
    var SSMClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSMClient = SSMClient;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js
var require_SSM = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/SSM.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSM = void 0;
    var AddTagsToResourceCommand_1 = require_AddTagsToResourceCommand();
    var AssociateOpsItemRelatedItemCommand_1 = require_AssociateOpsItemRelatedItemCommand();
    var CancelCommandCommand_1 = require_CancelCommandCommand();
    var CancelMaintenanceWindowExecutionCommand_1 = require_CancelMaintenanceWindowExecutionCommand();
    var CreateActivationCommand_1 = require_CreateActivationCommand();
    var CreateAssociationBatchCommand_1 = require_CreateAssociationBatchCommand();
    var CreateAssociationCommand_1 = require_CreateAssociationCommand();
    var CreateDocumentCommand_1 = require_CreateDocumentCommand();
    var CreateMaintenanceWindowCommand_1 = require_CreateMaintenanceWindowCommand();
    var CreateOpsItemCommand_1 = require_CreateOpsItemCommand();
    var CreateOpsMetadataCommand_1 = require_CreateOpsMetadataCommand();
    var CreatePatchBaselineCommand_1 = require_CreatePatchBaselineCommand();
    var CreateResourceDataSyncCommand_1 = require_CreateResourceDataSyncCommand();
    var DeleteActivationCommand_1 = require_DeleteActivationCommand();
    var DeleteAssociationCommand_1 = require_DeleteAssociationCommand();
    var DeleteDocumentCommand_1 = require_DeleteDocumentCommand();
    var DeleteInventoryCommand_1 = require_DeleteInventoryCommand();
    var DeleteMaintenanceWindowCommand_1 = require_DeleteMaintenanceWindowCommand();
    var DeleteOpsMetadataCommand_1 = require_DeleteOpsMetadataCommand();
    var DeleteParameterCommand_1 = require_DeleteParameterCommand();
    var DeleteParametersCommand_1 = require_DeleteParametersCommand();
    var DeletePatchBaselineCommand_1 = require_DeletePatchBaselineCommand();
    var DeleteResourceDataSyncCommand_1 = require_DeleteResourceDataSyncCommand();
    var DeleteResourcePolicyCommand_1 = require_DeleteResourcePolicyCommand2();
    var DeregisterManagedInstanceCommand_1 = require_DeregisterManagedInstanceCommand();
    var DeregisterPatchBaselineForPatchGroupCommand_1 = require_DeregisterPatchBaselineForPatchGroupCommand();
    var DeregisterTargetFromMaintenanceWindowCommand_1 = require_DeregisterTargetFromMaintenanceWindowCommand();
    var DeregisterTaskFromMaintenanceWindowCommand_1 = require_DeregisterTaskFromMaintenanceWindowCommand();
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var DescribeAssociationCommand_1 = require_DescribeAssociationCommand();
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var DescribeDocumentCommand_1 = require_DescribeDocumentCommand();
    var DescribeDocumentPermissionCommand_1 = require_DescribeDocumentPermissionCommand();
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var DescribePatchGroupStateCommand_1 = require_DescribePatchGroupStateCommand();
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var DisassociateOpsItemRelatedItemCommand_1 = require_DisassociateOpsItemRelatedItemCommand();
    var GetAutomationExecutionCommand_1 = require_GetAutomationExecutionCommand();
    var GetCalendarStateCommand_1 = require_GetCalendarStateCommand();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var GetConnectionStatusCommand_1 = require_GetConnectionStatusCommand();
    var GetDefaultPatchBaselineCommand_1 = require_GetDefaultPatchBaselineCommand();
    var GetDeployablePatchSnapshotForInstanceCommand_1 = require_GetDeployablePatchSnapshotForInstanceCommand();
    var GetDocumentCommand_1 = require_GetDocumentCommand();
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var GetMaintenanceWindowCommand_1 = require_GetMaintenanceWindowCommand();
    var GetMaintenanceWindowExecutionCommand_1 = require_GetMaintenanceWindowExecutionCommand();
    var GetMaintenanceWindowExecutionTaskCommand_1 = require_GetMaintenanceWindowExecutionTaskCommand();
    var GetMaintenanceWindowExecutionTaskInvocationCommand_1 = require_GetMaintenanceWindowExecutionTaskInvocationCommand();
    var GetMaintenanceWindowTaskCommand_1 = require_GetMaintenanceWindowTaskCommand();
    var GetOpsItemCommand_1 = require_GetOpsItemCommand();
    var GetOpsMetadataCommand_1 = require_GetOpsMetadataCommand();
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var GetParameterCommand_1 = require_GetParameterCommand();
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var GetParametersCommand_1 = require_GetParametersCommand();
    var GetPatchBaselineCommand_1 = require_GetPatchBaselineCommand();
    var GetPatchBaselineForPatchGroupCommand_1 = require_GetPatchBaselineForPatchGroupCommand();
    var GetResourcePoliciesCommand_1 = require_GetResourcePoliciesCommand();
    var GetServiceSettingCommand_1 = require_GetServiceSettingCommand();
    var LabelParameterVersionCommand_1 = require_LabelParameterVersionCommand();
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var ListDocumentMetadataHistoryCommand_1 = require_ListDocumentMetadataHistoryCommand();
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var ListInventoryEntriesCommand_1 = require_ListInventoryEntriesCommand();
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var ListTagsForResourceCommand_1 = require_ListTagsForResourceCommand();
    var ModifyDocumentPermissionCommand_1 = require_ModifyDocumentPermissionCommand();
    var PutComplianceItemsCommand_1 = require_PutComplianceItemsCommand();
    var PutInventoryCommand_1 = require_PutInventoryCommand();
    var PutParameterCommand_1 = require_PutParameterCommand();
    var PutResourcePolicyCommand_1 = require_PutResourcePolicyCommand2();
    var RegisterDefaultPatchBaselineCommand_1 = require_RegisterDefaultPatchBaselineCommand();
    var RegisterPatchBaselineForPatchGroupCommand_1 = require_RegisterPatchBaselineForPatchGroupCommand();
    var RegisterTargetWithMaintenanceWindowCommand_1 = require_RegisterTargetWithMaintenanceWindowCommand();
    var RegisterTaskWithMaintenanceWindowCommand_1 = require_RegisterTaskWithMaintenanceWindowCommand();
    var RemoveTagsFromResourceCommand_1 = require_RemoveTagsFromResourceCommand();
    var ResetServiceSettingCommand_1 = require_ResetServiceSettingCommand();
    var ResumeSessionCommand_1 = require_ResumeSessionCommand();
    var SendAutomationSignalCommand_1 = require_SendAutomationSignalCommand();
    var SendCommandCommand_1 = require_SendCommandCommand();
    var StartAssociationsOnceCommand_1 = require_StartAssociationsOnceCommand();
    var StartAutomationExecutionCommand_1 = require_StartAutomationExecutionCommand();
    var StartChangeRequestExecutionCommand_1 = require_StartChangeRequestExecutionCommand();
    var StartSessionCommand_1 = require_StartSessionCommand();
    var StopAutomationExecutionCommand_1 = require_StopAutomationExecutionCommand();
    var TerminateSessionCommand_1 = require_TerminateSessionCommand();
    var UnlabelParameterVersionCommand_1 = require_UnlabelParameterVersionCommand();
    var UpdateAssociationCommand_1 = require_UpdateAssociationCommand();
    var UpdateAssociationStatusCommand_1 = require_UpdateAssociationStatusCommand();
    var UpdateDocumentCommand_1 = require_UpdateDocumentCommand();
    var UpdateDocumentDefaultVersionCommand_1 = require_UpdateDocumentDefaultVersionCommand();
    var UpdateDocumentMetadataCommand_1 = require_UpdateDocumentMetadataCommand();
    var UpdateMaintenanceWindowCommand_1 = require_UpdateMaintenanceWindowCommand();
    var UpdateMaintenanceWindowTargetCommand_1 = require_UpdateMaintenanceWindowTargetCommand();
    var UpdateMaintenanceWindowTaskCommand_1 = require_UpdateMaintenanceWindowTaskCommand();
    var UpdateManagedInstanceRoleCommand_1 = require_UpdateManagedInstanceRoleCommand();
    var UpdateOpsItemCommand_1 = require_UpdateOpsItemCommand();
    var UpdateOpsMetadataCommand_1 = require_UpdateOpsMetadataCommand();
    var UpdatePatchBaselineCommand_1 = require_UpdatePatchBaselineCommand();
    var UpdateResourceDataSyncCommand_1 = require_UpdateResourceDataSyncCommand();
    var UpdateServiceSettingCommand_1 = require_UpdateServiceSettingCommand();
    var SSMClient_1 = require_SSMClient();
    var SSM2 = class extends SSMClient_1.SSMClient {
      addTagsToResource(args, optionsOrCb, cb) {
        const command = new AddTagsToResourceCommand_1.AddTagsToResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      associateOpsItemRelatedItem(args, optionsOrCb, cb) {
        const command = new AssociateOpsItemRelatedItemCommand_1.AssociateOpsItemRelatedItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelCommand(args, optionsOrCb, cb) {
        const command = new CancelCommandCommand_1.CancelCommandCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelMaintenanceWindowExecution(args, optionsOrCb, cb) {
        const command = new CancelMaintenanceWindowExecutionCommand_1.CancelMaintenanceWindowExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createActivation(args, optionsOrCb, cb) {
        const command = new CreateActivationCommand_1.CreateActivationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAssociation(args, optionsOrCb, cb) {
        const command = new CreateAssociationCommand_1.CreateAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAssociationBatch(args, optionsOrCb, cb) {
        const command = new CreateAssociationBatchCommand_1.CreateAssociationBatchCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createDocument(args, optionsOrCb, cb) {
        const command = new CreateDocumentCommand_1.CreateDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new CreateMaintenanceWindowCommand_1.CreateMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpsItem(args, optionsOrCb, cb) {
        const command = new CreateOpsItemCommand_1.CreateOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createOpsMetadata(args, optionsOrCb, cb) {
        const command = new CreateOpsMetadataCommand_1.CreateOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createPatchBaseline(args, optionsOrCb, cb) {
        const command = new CreatePatchBaselineCommand_1.CreatePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createResourceDataSync(args, optionsOrCb, cb) {
        const command = new CreateResourceDataSyncCommand_1.CreateResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteActivation(args, optionsOrCb, cb) {
        const command = new DeleteActivationCommand_1.DeleteActivationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAssociation(args, optionsOrCb, cb) {
        const command = new DeleteAssociationCommand_1.DeleteAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteDocument(args, optionsOrCb, cb) {
        const command = new DeleteDocumentCommand_1.DeleteDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteInventory(args, optionsOrCb, cb) {
        const command = new DeleteInventoryCommand_1.DeleteInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeleteMaintenanceWindowCommand_1.DeleteMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteOpsMetadata(args, optionsOrCb, cb) {
        const command = new DeleteOpsMetadataCommand_1.DeleteOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteParameter(args, optionsOrCb, cb) {
        const command = new DeleteParameterCommand_1.DeleteParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteParameters(args, optionsOrCb, cb) {
        const command = new DeleteParametersCommand_1.DeleteParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deletePatchBaseline(args, optionsOrCb, cb) {
        const command = new DeletePatchBaselineCommand_1.DeletePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteResourceDataSync(args, optionsOrCb, cb) {
        const command = new DeleteResourceDataSyncCommand_1.DeleteResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteResourcePolicy(args, optionsOrCb, cb) {
        const command = new DeleteResourcePolicyCommand_1.DeleteResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterManagedInstance(args, optionsOrCb, cb) {
        const command = new DeregisterManagedInstanceCommand_1.DeregisterManagedInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new DeregisterPatchBaselineForPatchGroupCommand_1.DeregisterPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterTargetFromMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeregisterTargetFromMaintenanceWindowCommand_1.DeregisterTargetFromMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterTaskFromMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new DeregisterTaskFromMaintenanceWindowCommand_1.DeregisterTaskFromMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeActivations(args, optionsOrCb, cb) {
        const command = new DescribeActivationsCommand_1.DescribeActivationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociation(args, optionsOrCb, cb) {
        const command = new DescribeAssociationCommand_1.DescribeAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociationExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAssociationExecutionTargets(args, optionsOrCb, cb) {
        const command = new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAutomationExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAutomationStepExecutions(args, optionsOrCb, cb) {
        const command = new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAvailablePatches(args, optionsOrCb, cb) {
        const command = new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDocument(args, optionsOrCb, cb) {
        const command = new DescribeDocumentCommand_1.DescribeDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeDocumentPermission(args, optionsOrCb, cb) {
        const command = new DescribeDocumentPermissionCommand_1.DescribeDocumentPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEffectiveInstanceAssociations(args, optionsOrCb, cb) {
        const command = new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEffectivePatchesForPatchBaseline(args, optionsOrCb, cb) {
        const command = new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstanceAssociationsStatus(args, optionsOrCb, cb) {
        const command = new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstanceInformation(args, optionsOrCb, cb) {
        const command = new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatches(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatchStates(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInstancePatchStatesForPatchGroup(args, optionsOrCb, cb) {
        const command = new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeInventoryDeletions(args, optionsOrCb, cb) {
        const command = new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutions(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutionTaskInvocations(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowExecutionTasks(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindows(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowSchedule(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowsForTarget(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowTargets(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeMaintenanceWindowTasks(args, optionsOrCb, cb) {
        const command = new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeOpsItems(args, optionsOrCb, cb) {
        const command = new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeParameters(args, optionsOrCb, cb) {
        const command = new DescribeParametersCommand_1.DescribeParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchBaselines(args, optionsOrCb, cb) {
        const command = new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchGroups(args, optionsOrCb, cb) {
        const command = new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchGroupState(args, optionsOrCb, cb) {
        const command = new DescribePatchGroupStateCommand_1.DescribePatchGroupStateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePatchProperties(args, optionsOrCb, cb) {
        const command = new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeSessions(args, optionsOrCb, cb) {
        const command = new DescribeSessionsCommand_1.DescribeSessionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disassociateOpsItemRelatedItem(args, optionsOrCb, cb) {
        const command = new DisassociateOpsItemRelatedItemCommand_1.DisassociateOpsItemRelatedItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAutomationExecution(args, optionsOrCb, cb) {
        const command = new GetAutomationExecutionCommand_1.GetAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCalendarState(args, optionsOrCb, cb) {
        const command = new GetCalendarStateCommand_1.GetCalendarStateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCommandInvocation(args, optionsOrCb, cb) {
        const command = new GetCommandInvocationCommand_1.GetCommandInvocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getConnectionStatus(args, optionsOrCb, cb) {
        const command = new GetConnectionStatusCommand_1.GetConnectionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDefaultPatchBaseline(args, optionsOrCb, cb) {
        const command = new GetDefaultPatchBaselineCommand_1.GetDefaultPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDeployablePatchSnapshotForInstance(args, optionsOrCb, cb) {
        const command = new GetDeployablePatchSnapshotForInstanceCommand_1.GetDeployablePatchSnapshotForInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getDocument(args, optionsOrCb, cb) {
        const command = new GetDocumentCommand_1.GetDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInventory(args, optionsOrCb, cb) {
        const command = new GetInventoryCommand_1.GetInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getInventorySchema(args, optionsOrCb, cb) {
        const command = new GetInventorySchemaCommand_1.GetInventorySchemaCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowCommand_1.GetMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecution(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionCommand_1.GetMaintenanceWindowExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecutionTask(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionTaskCommand_1.GetMaintenanceWindowExecutionTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowExecutionTaskInvocation(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowExecutionTaskInvocationCommand_1.GetMaintenanceWindowExecutionTaskInvocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getMaintenanceWindowTask(args, optionsOrCb, cb) {
        const command = new GetMaintenanceWindowTaskCommand_1.GetMaintenanceWindowTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsItem(args, optionsOrCb, cb) {
        const command = new GetOpsItemCommand_1.GetOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsMetadata(args, optionsOrCb, cb) {
        const command = new GetOpsMetadataCommand_1.GetOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getOpsSummary(args, optionsOrCb, cb) {
        const command = new GetOpsSummaryCommand_1.GetOpsSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameter(args, optionsOrCb, cb) {
        const command = new GetParameterCommand_1.GetParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameterHistory(args, optionsOrCb, cb) {
        const command = new GetParameterHistoryCommand_1.GetParameterHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParameters(args, optionsOrCb, cb) {
        const command = new GetParametersCommand_1.GetParametersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getParametersByPath(args, optionsOrCb, cb) {
        const command = new GetParametersByPathCommand_1.GetParametersByPathCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPatchBaseline(args, optionsOrCb, cb) {
        const command = new GetPatchBaselineCommand_1.GetPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new GetPatchBaselineForPatchGroupCommand_1.GetPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getResourcePolicies(args, optionsOrCb, cb) {
        const command = new GetResourcePoliciesCommand_1.GetResourcePoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getServiceSetting(args, optionsOrCb, cb) {
        const command = new GetServiceSettingCommand_1.GetServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      labelParameterVersion(args, optionsOrCb, cb) {
        const command = new LabelParameterVersionCommand_1.LabelParameterVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAssociations(args, optionsOrCb, cb) {
        const command = new ListAssociationsCommand_1.ListAssociationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAssociationVersions(args, optionsOrCb, cb) {
        const command = new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCommandInvocations(args, optionsOrCb, cb) {
        const command = new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCommands(args, optionsOrCb, cb) {
        const command = new ListCommandsCommand_1.ListCommandsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listComplianceItems(args, optionsOrCb, cb) {
        const command = new ListComplianceItemsCommand_1.ListComplianceItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listComplianceSummaries(args, optionsOrCb, cb) {
        const command = new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocumentMetadataHistory(args, optionsOrCb, cb) {
        const command = new ListDocumentMetadataHistoryCommand_1.ListDocumentMetadataHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocuments(args, optionsOrCb, cb) {
        const command = new ListDocumentsCommand_1.ListDocumentsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listDocumentVersions(args, optionsOrCb, cb) {
        const command = new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listInventoryEntries(args, optionsOrCb, cb) {
        const command = new ListInventoryEntriesCommand_1.ListInventoryEntriesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsItemEvents(args, optionsOrCb, cb) {
        const command = new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsItemRelatedItems(args, optionsOrCb, cb) {
        const command = new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listOpsMetadata(args, optionsOrCb, cb) {
        const command = new ListOpsMetadataCommand_1.ListOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceComplianceSummaries(args, optionsOrCb, cb) {
        const command = new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listResourceDataSync(args, optionsOrCb, cb) {
        const command = new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsForResource(args, optionsOrCb, cb) {
        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      modifyDocumentPermission(args, optionsOrCb, cb) {
        const command = new ModifyDocumentPermissionCommand_1.ModifyDocumentPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putComplianceItems(args, optionsOrCb, cb) {
        const command = new PutComplianceItemsCommand_1.PutComplianceItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putInventory(args, optionsOrCb, cb) {
        const command = new PutInventoryCommand_1.PutInventoryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putParameter(args, optionsOrCb, cb) {
        const command = new PutParameterCommand_1.PutParameterCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putResourcePolicy(args, optionsOrCb, cb) {
        const command = new PutResourcePolicyCommand_1.PutResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerDefaultPatchBaseline(args, optionsOrCb, cb) {
        const command = new RegisterDefaultPatchBaselineCommand_1.RegisterDefaultPatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerPatchBaselineForPatchGroup(args, optionsOrCb, cb) {
        const command = new RegisterPatchBaselineForPatchGroupCommand_1.RegisterPatchBaselineForPatchGroupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerTargetWithMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new RegisterTargetWithMaintenanceWindowCommand_1.RegisterTargetWithMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerTaskWithMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new RegisterTaskWithMaintenanceWindowCommand_1.RegisterTaskWithMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeTagsFromResource(args, optionsOrCb, cb) {
        const command = new RemoveTagsFromResourceCommand_1.RemoveTagsFromResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resetServiceSetting(args, optionsOrCb, cb) {
        const command = new ResetServiceSettingCommand_1.ResetServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      resumeSession(args, optionsOrCb, cb) {
        const command = new ResumeSessionCommand_1.ResumeSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendAutomationSignal(args, optionsOrCb, cb) {
        const command = new SendAutomationSignalCommand_1.SendAutomationSignalCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      sendCommand(args, optionsOrCb, cb) {
        const command = new SendCommandCommand_1.SendCommandCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startAssociationsOnce(args, optionsOrCb, cb) {
        const command = new StartAssociationsOnceCommand_1.StartAssociationsOnceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startAutomationExecution(args, optionsOrCb, cb) {
        const command = new StartAutomationExecutionCommand_1.StartAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startChangeRequestExecution(args, optionsOrCb, cb) {
        const command = new StartChangeRequestExecutionCommand_1.StartChangeRequestExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startSession(args, optionsOrCb, cb) {
        const command = new StartSessionCommand_1.StartSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopAutomationExecution(args, optionsOrCb, cb) {
        const command = new StopAutomationExecutionCommand_1.StopAutomationExecutionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      terminateSession(args, optionsOrCb, cb) {
        const command = new TerminateSessionCommand_1.TerminateSessionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      unlabelParameterVersion(args, optionsOrCb, cb) {
        const command = new UnlabelParameterVersionCommand_1.UnlabelParameterVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssociation(args, optionsOrCb, cb) {
        const command = new UpdateAssociationCommand_1.UpdateAssociationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAssociationStatus(args, optionsOrCb, cb) {
        const command = new UpdateAssociationStatusCommand_1.UpdateAssociationStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocument(args, optionsOrCb, cb) {
        const command = new UpdateDocumentCommand_1.UpdateDocumentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocumentDefaultVersion(args, optionsOrCb, cb) {
        const command = new UpdateDocumentDefaultVersionCommand_1.UpdateDocumentDefaultVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateDocumentMetadata(args, optionsOrCb, cb) {
        const command = new UpdateDocumentMetadataCommand_1.UpdateDocumentMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindow(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowCommand_1.UpdateMaintenanceWindowCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindowTarget(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowTargetCommand_1.UpdateMaintenanceWindowTargetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateMaintenanceWindowTask(args, optionsOrCb, cb) {
        const command = new UpdateMaintenanceWindowTaskCommand_1.UpdateMaintenanceWindowTaskCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateManagedInstanceRole(args, optionsOrCb, cb) {
        const command = new UpdateManagedInstanceRoleCommand_1.UpdateManagedInstanceRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpsItem(args, optionsOrCb, cb) {
        const command = new UpdateOpsItemCommand_1.UpdateOpsItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateOpsMetadata(args, optionsOrCb, cb) {
        const command = new UpdateOpsMetadataCommand_1.UpdateOpsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updatePatchBaseline(args, optionsOrCb, cb) {
        const command = new UpdatePatchBaselineCommand_1.UpdatePatchBaselineCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateResourceDataSync(args, optionsOrCb, cb) {
        const command = new UpdateResourceDataSyncCommand_1.UpdateResourceDataSyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateServiceSetting(args, optionsOrCb, cb) {
        const command = new UpdateServiceSettingCommand_1.UpdateServiceSettingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSM = SSM2;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js
var require_commands5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AddTagsToResourceCommand(), exports);
    tslib_1.__exportStar(require_AssociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_CancelCommandCommand(), exports);
    tslib_1.__exportStar(require_CancelMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_CreateActivationCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationBatchCommand(), exports);
    tslib_1.__exportStar(require_CreateAssociationCommand(), exports);
    tslib_1.__exportStar(require_CreateDocumentCommand(), exports);
    tslib_1.__exportStar(require_CreateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_CreateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_CreatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_CreateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeleteActivationCommand(), exports);
    tslib_1.__exportStar(require_DeleteAssociationCommand(), exports);
    tslib_1.__exportStar(require_DeleteDocumentCommand(), exports);
    tslib_1.__exportStar(require_DeleteInventoryCommand(), exports);
    tslib_1.__exportStar(require_DeleteMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeleteOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_DeleteParameterCommand(), exports);
    tslib_1.__exportStar(require_DeleteParametersCommand(), exports);
    tslib_1.__exportStar(require_DeletePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_DeleteResourcePolicyCommand2(), exports);
    tslib_1.__exportStar(require_DeregisterManagedInstanceCommand(), exports);
    tslib_1.__exportStar(require_DeregisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTargetFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTaskFromMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_DescribeActivationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentCommand(), exports);
    tslib_1.__exportStar(require_DescribeDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesCommand(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowScheduleCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsCommand(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetCommand(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsCommand(), exports);
    tslib_1.__exportStar(require_DescribeParametersCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupStateCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsCommand(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesCommand(), exports);
    tslib_1.__exportStar(require_DescribeSessionsCommand(), exports);
    tslib_1.__exportStar(require_DisassociateOpsItemRelatedItemCommand(), exports);
    tslib_1.__exportStar(require_GetAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetCalendarStateCommand(), exports);
    tslib_1.__exportStar(require_GetCommandInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetConnectionStatusCommand(), exports);
    tslib_1.__exportStar(require_GetDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetDeployablePatchSnapshotForInstanceCommand(), exports);
    tslib_1.__exportStar(require_GetDocumentCommand(), exports);
    tslib_1.__exportStar(require_GetInventoryCommand(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowExecutionTaskInvocationCommand(), exports);
    tslib_1.__exportStar(require_GetMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_GetOpsItemCommand(), exports);
    tslib_1.__exportStar(require_GetOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryCommand(), exports);
    tslib_1.__exportStar(require_GetParameterCommand(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryCommand(), exports);
    tslib_1.__exportStar(require_GetParametersByPathCommand(), exports);
    tslib_1.__exportStar(require_GetParametersCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_GetPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_GetResourcePoliciesCommand(), exports);
    tslib_1.__exportStar(require_GetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_LabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListAssociationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsCommand(), exports);
    tslib_1.__exportStar(require_ListCommandsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentMetadataHistoryCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListDocumentsCommand(), exports);
    tslib_1.__exportStar(require_ListInventoryEntriesCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsCommand(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesCommand(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_ListTagsForResourceCommand(), exports);
    tslib_1.__exportStar(require_ModifyDocumentPermissionCommand(), exports);
    tslib_1.__exportStar(require_PutComplianceItemsCommand(), exports);
    tslib_1.__exportStar(require_PutInventoryCommand(), exports);
    tslib_1.__exportStar(require_PutParameterCommand(), exports);
    tslib_1.__exportStar(require_PutResourcePolicyCommand2(), exports);
    tslib_1.__exportStar(require_RegisterDefaultPatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_RegisterPatchBaselineForPatchGroupCommand(), exports);
    tslib_1.__exportStar(require_RegisterTargetWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RegisterTaskWithMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_RemoveTagsFromResourceCommand(), exports);
    tslib_1.__exportStar(require_ResetServiceSettingCommand(), exports);
    tslib_1.__exportStar(require_ResumeSessionCommand(), exports);
    tslib_1.__exportStar(require_SendAutomationSignalCommand(), exports);
    tslib_1.__exportStar(require_SendCommandCommand(), exports);
    tslib_1.__exportStar(require_StartAssociationsOnceCommand(), exports);
    tslib_1.__exportStar(require_StartAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartChangeRequestExecutionCommand(), exports);
    tslib_1.__exportStar(require_StartSessionCommand(), exports);
    tslib_1.__exportStar(require_StopAutomationExecutionCommand(), exports);
    tslib_1.__exportStar(require_TerminateSessionCommand(), exports);
    tslib_1.__exportStar(require_UnlabelParameterVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationCommand(), exports);
    tslib_1.__exportStar(require_UpdateAssociationStatusCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentDefaultVersionCommand(), exports);
    tslib_1.__exportStar(require_UpdateDocumentMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTargetCommand(), exports);
    tslib_1.__exportStar(require_UpdateMaintenanceWindowTaskCommand(), exports);
    tslib_1.__exportStar(require_UpdateManagedInstanceRoleCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateOpsMetadataCommand(), exports);
    tslib_1.__exportStar(require_UpdatePatchBaselineCommand(), exports);
    tslib_1.__exportStar(require_UpdateResourceDataSyncCommand(), exports);
    tslib_1.__exportStar(require_UpdateServiceSettingCommand(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js
var require_models5 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_05(), exports);
    tslib_1.__exportStar(require_models_1(), exports);
    tslib_1.__exportStar(require_models_2(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js
var require_DescribeActivationsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeActivationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeActivations = void 0;
    var DescribeActivationsCommand_1 = require_DescribeActivationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeActivationsCommand_1.DescribeActivationsCommand(input), ...args);
    };
    async function* paginateDescribeActivations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeActivations = paginateDescribeActivations;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js
var require_DescribeAssociationExecutionTargetsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutionTargets = void 0;
    var DescribeAssociationExecutionTargetsCommand_1 = require_DescribeAssociationExecutionTargetsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionTargetsCommand_1.DescribeAssociationExecutionTargetsCommand(input), ...args);
    };
    async function* paginateDescribeAssociationExecutionTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAssociationExecutionTargets = paginateDescribeAssociationExecutionTargets;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js
var require_DescribeAssociationExecutionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAssociationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAssociationExecutions = void 0;
    var DescribeAssociationExecutionsCommand_1 = require_DescribeAssociationExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAssociationExecutionsCommand_1.DescribeAssociationExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeAssociationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAssociationExecutions = paginateDescribeAssociationExecutions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js
var require_DescribeAutomationExecutionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationExecutions = void 0;
    var DescribeAutomationExecutionsCommand_1 = require_DescribeAutomationExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAutomationExecutionsCommand_1.DescribeAutomationExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeAutomationExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAutomationExecutions = paginateDescribeAutomationExecutions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js
var require_DescribeAutomationStepExecutionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAutomationStepExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAutomationStepExecutions = void 0;
    var DescribeAutomationStepExecutionsCommand_1 = require_DescribeAutomationStepExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAutomationStepExecutionsCommand_1.DescribeAutomationStepExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeAutomationStepExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAutomationStepExecutions = paginateDescribeAutomationStepExecutions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js
var require_DescribeAvailablePatchesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeAvailablePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAvailablePatches = void 0;
    var DescribeAvailablePatchesCommand_1 = require_DescribeAvailablePatchesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAvailablePatchesCommand_1.DescribeAvailablePatchesCommand(input), ...args);
    };
    async function* paginateDescribeAvailablePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAvailablePatches = paginateDescribeAvailablePatches;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js
var require_DescribeEffectiveInstanceAssociationsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectiveInstanceAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectiveInstanceAssociations = void 0;
    var DescribeEffectiveInstanceAssociationsCommand_1 = require_DescribeEffectiveInstanceAssociationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEffectiveInstanceAssociationsCommand_1.DescribeEffectiveInstanceAssociationsCommand(input), ...args);
    };
    async function* paginateDescribeEffectiveInstanceAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEffectiveInstanceAssociations = paginateDescribeEffectiveInstanceAssociations;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js
var require_DescribeEffectivePatchesForPatchBaselinePaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeEffectivePatchesForPatchBaselinePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeEffectivePatchesForPatchBaseline = void 0;
    var DescribeEffectivePatchesForPatchBaselineCommand_1 = require_DescribeEffectivePatchesForPatchBaselineCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeEffectivePatchesForPatchBaselineCommand_1.DescribeEffectivePatchesForPatchBaselineCommand(input), ...args);
    };
    async function* paginateDescribeEffectivePatchesForPatchBaseline(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeEffectivePatchesForPatchBaseline = paginateDescribeEffectivePatchesForPatchBaseline;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js
var require_DescribeInstanceAssociationsStatusPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceAssociationsStatusPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceAssociationsStatus = void 0;
    var DescribeInstanceAssociationsStatusCommand_1 = require_DescribeInstanceAssociationsStatusCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstanceAssociationsStatusCommand_1.DescribeInstanceAssociationsStatusCommand(input), ...args);
    };
    async function* paginateDescribeInstanceAssociationsStatus(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstanceAssociationsStatus = paginateDescribeInstanceAssociationsStatus;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js
var require_DescribeInstanceInformationPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstanceInformationPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstanceInformation = void 0;
    var DescribeInstanceInformationCommand_1 = require_DescribeInstanceInformationCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstanceInformationCommand_1.DescribeInstanceInformationCommand(input), ...args);
    };
    async function* paginateDescribeInstanceInformation(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstanceInformation = paginateDescribeInstanceInformation;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js
var require_DescribeInstancePatchStatesForPatchGroupPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesForPatchGroupPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStatesForPatchGroup = void 0;
    var DescribeInstancePatchStatesForPatchGroupCommand_1 = require_DescribeInstancePatchStatesForPatchGroupCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesForPatchGroupCommand_1.DescribeInstancePatchStatesForPatchGroupCommand(input), ...args);
    };
    async function* paginateDescribeInstancePatchStatesForPatchGroup(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatchStatesForPatchGroup = paginateDescribeInstancePatchStatesForPatchGroup;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js
var require_DescribeInstancePatchStatesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchStatesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatchStates = void 0;
    var DescribeInstancePatchStatesCommand_1 = require_DescribeInstancePatchStatesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchStatesCommand_1.DescribeInstancePatchStatesCommand(input), ...args);
    };
    async function* paginateDescribeInstancePatchStates(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatchStates = paginateDescribeInstancePatchStates;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js
var require_DescribeInstancePatchesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInstancePatchesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInstancePatches = void 0;
    var DescribeInstancePatchesCommand_1 = require_DescribeInstancePatchesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInstancePatchesCommand_1.DescribeInstancePatchesCommand(input), ...args);
    };
    async function* paginateDescribeInstancePatches(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInstancePatches = paginateDescribeInstancePatches;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js
var require_DescribeInventoryDeletionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeInventoryDeletionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeInventoryDeletions = void 0;
    var DescribeInventoryDeletionsCommand_1 = require_DescribeInventoryDeletionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeInventoryDeletionsCommand_1.DescribeInventoryDeletionsCommand(input), ...args);
    };
    async function* paginateDescribeInventoryDeletions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeInventoryDeletions = paginateDescribeInventoryDeletions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js
var require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTaskInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = void 0;
    var DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1 = require_DescribeMaintenanceWindowExecutionTaskInvocationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTaskInvocationsCommand_1.DescribeMaintenanceWindowExecutionTaskInvocationsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutionTaskInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutionTaskInvocations = paginateDescribeMaintenanceWindowExecutionTaskInvocations;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js
var require_DescribeMaintenanceWindowExecutionTasksPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutionTasks = void 0;
    var DescribeMaintenanceWindowExecutionTasksCommand_1 = require_DescribeMaintenanceWindowExecutionTasksCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionTasksCommand_1.DescribeMaintenanceWindowExecutionTasksCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutionTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutionTasks = paginateDescribeMaintenanceWindowExecutionTasks;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js
var require_DescribeMaintenanceWindowExecutionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowExecutionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowExecutions = void 0;
    var DescribeMaintenanceWindowExecutionsCommand_1 = require_DescribeMaintenanceWindowExecutionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowExecutionsCommand_1.DescribeMaintenanceWindowExecutionsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowExecutions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowExecutions = paginateDescribeMaintenanceWindowExecutions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js
var require_DescribeMaintenanceWindowSchedulePaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowSchedulePaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowSchedule = void 0;
    var DescribeMaintenanceWindowScheduleCommand_1 = require_DescribeMaintenanceWindowScheduleCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowScheduleCommand_1.DescribeMaintenanceWindowScheduleCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowSchedule(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowSchedule = paginateDescribeMaintenanceWindowSchedule;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js
var require_DescribeMaintenanceWindowTargetsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTargetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTargets = void 0;
    var DescribeMaintenanceWindowTargetsCommand_1 = require_DescribeMaintenanceWindowTargetsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTargetsCommand_1.DescribeMaintenanceWindowTargetsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowTargets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowTargets = paginateDescribeMaintenanceWindowTargets;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js
var require_DescribeMaintenanceWindowTasksPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowTasksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowTasks = void 0;
    var DescribeMaintenanceWindowTasksCommand_1 = require_DescribeMaintenanceWindowTasksCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowTasksCommand_1.DescribeMaintenanceWindowTasksCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowTasks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowTasks = paginateDescribeMaintenanceWindowTasks;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js
var require_DescribeMaintenanceWindowsForTargetPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsForTargetPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindowsForTarget = void 0;
    var DescribeMaintenanceWindowsForTargetCommand_1 = require_DescribeMaintenanceWindowsForTargetCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsForTargetCommand_1.DescribeMaintenanceWindowsForTargetCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindowsForTarget(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindowsForTarget = paginateDescribeMaintenanceWindowsForTarget;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js
var require_DescribeMaintenanceWindowsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeMaintenanceWindowsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeMaintenanceWindows = void 0;
    var DescribeMaintenanceWindowsCommand_1 = require_DescribeMaintenanceWindowsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeMaintenanceWindowsCommand_1.DescribeMaintenanceWindowsCommand(input), ...args);
    };
    async function* paginateDescribeMaintenanceWindows(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeMaintenanceWindows = paginateDescribeMaintenanceWindows;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js
var require_DescribeOpsItemsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeOpsItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeOpsItems = void 0;
    var DescribeOpsItemsCommand_1 = require_DescribeOpsItemsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeOpsItemsCommand_1.DescribeOpsItemsCommand(input), ...args);
    };
    async function* paginateDescribeOpsItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeOpsItems = paginateDescribeOpsItems;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js
var require_DescribeParametersPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeParametersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeParameters = void 0;
    var DescribeParametersCommand_1 = require_DescribeParametersCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeParametersCommand_1.DescribeParametersCommand(input), ...args);
    };
    async function* paginateDescribeParameters(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeParameters = paginateDescribeParameters;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js
var require_DescribePatchBaselinesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchBaselinesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchBaselines = void 0;
    var DescribePatchBaselinesCommand_1 = require_DescribePatchBaselinesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchBaselinesCommand_1.DescribePatchBaselinesCommand(input), ...args);
    };
    async function* paginateDescribePatchBaselines(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchBaselines = paginateDescribePatchBaselines;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js
var require_DescribePatchGroupsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchGroupsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchGroups = void 0;
    var DescribePatchGroupsCommand_1 = require_DescribePatchGroupsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchGroupsCommand_1.DescribePatchGroupsCommand(input), ...args);
    };
    async function* paginateDescribePatchGroups(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchGroups = paginateDescribePatchGroups;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js
var require_DescribePatchPropertiesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribePatchPropertiesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribePatchProperties = void 0;
    var DescribePatchPropertiesCommand_1 = require_DescribePatchPropertiesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribePatchPropertiesCommand_1.DescribePatchPropertiesCommand(input), ...args);
    };
    async function* paginateDescribePatchProperties(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribePatchProperties = paginateDescribePatchProperties;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js
var require_DescribeSessionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/DescribeSessionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeSessions = void 0;
    var DescribeSessionsCommand_1 = require_DescribeSessionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeSessionsCommand_1.DescribeSessionsCommand(input), ...args);
    };
    async function* paginateDescribeSessions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeSessions = paginateDescribeSessions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js
var require_GetInventoryPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventory = void 0;
    var GetInventoryCommand_1 = require_GetInventoryCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetInventoryCommand_1.GetInventoryCommand(input), ...args);
    };
    async function* paginateGetInventory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetInventory = paginateGetInventory;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js
var require_GetInventorySchemaPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetInventorySchemaPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetInventorySchema = void 0;
    var GetInventorySchemaCommand_1 = require_GetInventorySchemaCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetInventorySchemaCommand_1.GetInventorySchemaCommand(input), ...args);
    };
    async function* paginateGetInventorySchema(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetInventorySchema = paginateGetInventorySchema;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js
var require_GetOpsSummaryPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetOpsSummaryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetOpsSummary = void 0;
    var GetOpsSummaryCommand_1 = require_GetOpsSummaryCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetOpsSummaryCommand_1.GetOpsSummaryCommand(input), ...args);
    };
    async function* paginateGetOpsSummary(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetOpsSummary = paginateGetOpsSummary;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js
var require_GetParameterHistoryPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParameterHistoryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParameterHistory = void 0;
    var GetParameterHistoryCommand_1 = require_GetParameterHistoryCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetParameterHistoryCommand_1.GetParameterHistoryCommand(input), ...args);
    };
    async function* paginateGetParameterHistory(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetParameterHistory = paginateGetParameterHistory;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js
var require_GetParametersByPathPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetParametersByPathPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetParametersByPath = void 0;
    var GetParametersByPathCommand_1 = require_GetParametersByPathCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetParametersByPathCommand_1.GetParametersByPathCommand(input), ...args);
    };
    async function* paginateGetParametersByPath(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetParametersByPath = paginateGetParametersByPath;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetResourcePoliciesPaginator.js
var require_GetResourcePoliciesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/GetResourcePoliciesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateGetResourcePolicies = void 0;
    var GetResourcePoliciesCommand_1 = require_GetResourcePoliciesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new GetResourcePoliciesCommand_1.GetResourcePoliciesCommand(input), ...args);
    };
    async function* paginateGetResourcePolicies(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateGetResourcePolicies = paginateGetResourcePolicies;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js
var require_ListAssociationVersionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociationVersions = void 0;
    var ListAssociationVersionsCommand_1 = require_ListAssociationVersionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAssociationVersionsCommand_1.ListAssociationVersionsCommand(input), ...args);
    };
    async function* paginateListAssociationVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAssociationVersions = paginateListAssociationVersions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js
var require_ListAssociationsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListAssociationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAssociations = void 0;
    var ListAssociationsCommand_1 = require_ListAssociationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAssociationsCommand_1.ListAssociationsCommand(input), ...args);
    };
    async function* paginateListAssociations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAssociations = paginateListAssociations;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js
var require_ListCommandInvocationsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandInvocationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommandInvocations = void 0;
    var ListCommandInvocationsCommand_1 = require_ListCommandInvocationsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCommandInvocationsCommand_1.ListCommandInvocationsCommand(input), ...args);
    };
    async function* paginateListCommandInvocations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCommandInvocations = paginateListCommandInvocations;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js
var require_ListCommandsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListCommandsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCommands = void 0;
    var ListCommandsCommand_1 = require_ListCommandsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCommandsCommand_1.ListCommandsCommand(input), ...args);
    };
    async function* paginateListCommands(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCommands = paginateListCommands;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js
var require_ListComplianceItemsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceItems = void 0;
    var ListComplianceItemsCommand_1 = require_ListComplianceItemsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListComplianceItemsCommand_1.ListComplianceItemsCommand(input), ...args);
    };
    async function* paginateListComplianceItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListComplianceItems = paginateListComplianceItems;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js
var require_ListComplianceSummariesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListComplianceSummaries = void 0;
    var ListComplianceSummariesCommand_1 = require_ListComplianceSummariesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListComplianceSummariesCommand_1.ListComplianceSummariesCommand(input), ...args);
    };
    async function* paginateListComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListComplianceSummaries = paginateListComplianceSummaries;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js
var require_ListDocumentVersionsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocumentVersions = void 0;
    var ListDocumentVersionsCommand_1 = require_ListDocumentVersionsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDocumentVersionsCommand_1.ListDocumentVersionsCommand(input), ...args);
    };
    async function* paginateListDocumentVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListDocumentVersions = paginateListDocumentVersions;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js
var require_ListDocumentsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListDocumentsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListDocuments = void 0;
    var ListDocumentsCommand_1 = require_ListDocumentsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListDocumentsCommand_1.ListDocumentsCommand(input), ...args);
    };
    async function* paginateListDocuments(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListDocuments = paginateListDocuments;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js
var require_ListOpsItemEventsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemEventsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemEvents = void 0;
    var ListOpsItemEventsCommand_1 = require_ListOpsItemEventsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsItemEventsCommand_1.ListOpsItemEventsCommand(input), ...args);
    };
    async function* paginateListOpsItemEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsItemEvents = paginateListOpsItemEvents;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js
var require_ListOpsItemRelatedItemsPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsItemRelatedItemsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsItemRelatedItems = void 0;
    var ListOpsItemRelatedItemsCommand_1 = require_ListOpsItemRelatedItemsCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsItemRelatedItemsCommand_1.ListOpsItemRelatedItemsCommand(input), ...args);
    };
    async function* paginateListOpsItemRelatedItems(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsItemRelatedItems = paginateListOpsItemRelatedItems;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js
var require_ListOpsMetadataPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListOpsMetadataPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListOpsMetadata = void 0;
    var ListOpsMetadataCommand_1 = require_ListOpsMetadataCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListOpsMetadataCommand_1.ListOpsMetadataCommand(input), ...args);
    };
    async function* paginateListOpsMetadata(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListOpsMetadata = paginateListOpsMetadata;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js
var require_ListResourceComplianceSummariesPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceComplianceSummariesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceComplianceSummaries = void 0;
    var ListResourceComplianceSummariesCommand_1 = require_ListResourceComplianceSummariesCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListResourceComplianceSummariesCommand_1.ListResourceComplianceSummariesCommand(input), ...args);
    };
    async function* paginateListResourceComplianceSummaries(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListResourceComplianceSummaries = paginateListResourceComplianceSummaries;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js
var require_ListResourceDataSyncPaginator = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/ListResourceDataSyncPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListResourceDataSync = void 0;
    var ListResourceDataSyncCommand_1 = require_ListResourceDataSyncCommand();
    var SSMClient_1 = require_SSMClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListResourceDataSyncCommand_1.ListResourceDataSyncCommand(input), ...args);
    };
    async function* paginateListResourceDataSync(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof SSMClient_1.SSMClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSM | SSMClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListResourceDataSync = paginateListResourceDataSync;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_DescribeActivationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAssociationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAutomationStepExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeAvailablePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectiveInstanceAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeEffectivePatchesForPatchBaselinePaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceAssociationsStatusPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstanceInformationPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesForPatchGroupPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchStatesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInstancePatchesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeInventoryDeletionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTaskInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowExecutionsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowSchedulePaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTargetsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowTasksPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsForTargetPaginator(), exports);
    tslib_1.__exportStar(require_DescribeMaintenanceWindowsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeOpsItemsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeParametersPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchBaselinesPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchGroupsPaginator(), exports);
    tslib_1.__exportStar(require_DescribePatchPropertiesPaginator(), exports);
    tslib_1.__exportStar(require_DescribeSessionsPaginator(), exports);
    tslib_1.__exportStar(require_GetInventoryPaginator(), exports);
    tslib_1.__exportStar(require_GetInventorySchemaPaginator(), exports);
    tslib_1.__exportStar(require_GetOpsSummaryPaginator(), exports);
    tslib_1.__exportStar(require_GetParameterHistoryPaginator(), exports);
    tslib_1.__exportStar(require_GetParametersByPathPaginator(), exports);
    tslib_1.__exportStar(require_GetResourcePoliciesPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListAssociationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandInvocationsPaginator(), exports);
    tslib_1.__exportStar(require_ListCommandsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListDocumentsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemEventsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsItemRelatedItemsPaginator(), exports);
    tslib_1.__exportStar(require_ListOpsMetadataPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceComplianceSummariesPaginator(), exports);
    tslib_1.__exportStar(require_ListResourceDataSyncPaginator(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils3 = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate2(), exports);
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils3();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// ../../../node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "../../../node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js
var require_waitForCommandExecuted = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/waitForCommandExecuted.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilCommandExecuted = exports.waitForCommandExecuted = void 0;
    var util_waiter_1 = require_dist_cjs51();
    var GetCommandInvocationCommand_1 = require_GetCommandInvocationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetCommandInvocationCommand_1.GetCommandInvocationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Delayed") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Success") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Cancelled") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "TimedOut") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "Cancelling") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvocationDoesNotExist") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForCommandExecuted = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForCommandExecuted = waitForCommandExecuted;
    var waitUntilCommandExecuted = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilCommandExecuted = waitUntilCommandExecuted;
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_waitForCommandExecuted(), exports);
  }
});

// ../../../node_modules/@aws-sdk/client-ssm/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "../../../node_modules/@aws-sdk/client-ssm/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSMServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSM(), exports);
    tslib_1.__exportStar(require_SSMClient(), exports);
    tslib_1.__exportStar(require_commands5(), exports);
    tslib_1.__exportStar(require_models5(), exports);
    tslib_1.__exportStar(require_pagination4(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var SSMServiceException_1 = require_SSMServiceException();
    Object.defineProperty(exports, "SSMServiceException", { enumerable: true, get: function() {
      return SSMServiceException_1.SSMServiceException;
    } });
  }
});

// ../../../node_modules/fs.realpath/old.js
var require_old = __commonJS({
  "../../../node_modules/fs.realpath/old.js"(exports) {
    var pathModule = require("path");
    var isWindows = process.platform === "win32";
    var fs2 = require("fs");
    var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
    function rethrow() {
      var callback;
      if (DEBUG) {
        var backtrace = new Error();
        callback = debugCallback;
      } else
        callback = missingCallback;
      return callback;
      function debugCallback(err) {
        if (err) {
          backtrace.message = err.message;
          err = backtrace;
          missingCallback(err);
        }
      }
      function missingCallback(err) {
        if (err) {
          if (process.throwDeprecation)
            throw err;
          else if (!process.noDeprecation) {
            var msg = "fs: missing callback " + (err.stack || err.message);
            if (process.traceDeprecation)
              console.trace(msg);
            else
              console.error(msg);
          }
        }
      }
    }
    function maybeCallback(cb) {
      return typeof cb === "function" ? cb : rethrow();
    }
    var normalize = pathModule.normalize;
    if (isWindows) {
      nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
    } else {
      nextPartRe = /(.*?)(?:[\/]+|$)/g;
    }
    var nextPartRe;
    if (isWindows) {
      splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
    } else {
      splitRootRe = /^[\/]*/;
    }
    var splitRootRe;
    exports.realpathSync = function realpathSync(p, cache) {
      p = pathModule.resolve(p);
      if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
        return cache[p];
      }
      var original = p, seenLinks = {}, knownHard = {};
      var pos;
      var current;
      var base;
      var previous;
      start();
      function start() {
        var m = splitRootRe.exec(p);
        pos = m[0].length;
        current = m[0];
        base = m[0];
        previous = "";
        if (isWindows && !knownHard[base]) {
          fs2.lstatSync(base);
          knownHard[base] = true;
        }
      }
      while (pos < p.length) {
        nextPartRe.lastIndex = pos;
        var result = nextPartRe.exec(p);
        previous = current;
        current += result[0];
        base = previous + result[1];
        pos = nextPartRe.lastIndex;
        if (knownHard[base] || cache && cache[base] === base) {
          continue;
        }
        var resolvedLink;
        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
          resolvedLink = cache[base];
        } else {
          var stat = fs2.lstatSync(base);
          if (!stat.isSymbolicLink()) {
            knownHard[base] = true;
            if (cache)
              cache[base] = base;
            continue;
          }
          var linkTarget = null;
          if (!isWindows) {
            var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
            if (seenLinks.hasOwnProperty(id)) {
              linkTarget = seenLinks[id];
            }
          }
          if (linkTarget === null) {
            fs2.statSync(base);
            linkTarget = fs2.readlinkSync(base);
          }
          resolvedLink = pathModule.resolve(previous, linkTarget);
          if (cache)
            cache[base] = resolvedLink;
          if (!isWindows)
            seenLinks[id] = linkTarget;
        }
        p = pathModule.resolve(resolvedLink, p.slice(pos));
        start();
      }
      if (cache)
        cache[original] = p;
      return p;
    };
    exports.realpath = function realpath(p, cache, cb) {
      if (typeof cb !== "function") {
        cb = maybeCallback(cache);
        cache = null;
      }
      p = pathModule.resolve(p);
      if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
        return process.nextTick(cb.bind(null, null, cache[p]));
      }
      var original = p, seenLinks = {}, knownHard = {};
      var pos;
      var current;
      var base;
      var previous;
      start();
      function start() {
        var m = splitRootRe.exec(p);
        pos = m[0].length;
        current = m[0];
        base = m[0];
        previous = "";
        if (isWindows && !knownHard[base]) {
          fs2.lstat(base, function(err) {
            if (err)
              return cb(err);
            knownHard[base] = true;
            LOOP();
          });
        } else {
          process.nextTick(LOOP);
        }
      }
      function LOOP() {
        if (pos >= p.length) {
          if (cache)
            cache[original] = p;
          return cb(null, p);
        }
        nextPartRe.lastIndex = pos;
        var result = nextPartRe.exec(p);
        previous = current;
        current += result[0];
        base = previous + result[1];
        pos = nextPartRe.lastIndex;
        if (knownHard[base] || cache && cache[base] === base) {
          return process.nextTick(LOOP);
        }
        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
          return gotResolvedLink(cache[base]);
        }
        return fs2.lstat(base, gotStat);
      }
      function gotStat(err, stat) {
        if (err)
          return cb(err);
        if (!stat.isSymbolicLink()) {
          knownHard[base] = true;
          if (cache)
            cache[base] = base;
          return process.nextTick(LOOP);
        }
        if (!isWindows) {
          var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
          if (seenLinks.hasOwnProperty(id)) {
            return gotTarget(null, seenLinks[id], base);
          }
        }
        fs2.stat(base, function(err2) {
          if (err2)
            return cb(err2);
          fs2.readlink(base, function(err3, target) {
            if (!isWindows)
              seenLinks[id] = target;
            gotTarget(err3, target);
          });
        });
      }
      function gotTarget(err, target, base2) {
        if (err)
          return cb(err);
        var resolvedLink = pathModule.resolve(previous, target);
        if (cache)
          cache[base2] = resolvedLink;
        gotResolvedLink(resolvedLink);
      }
      function gotResolvedLink(resolvedLink) {
        p = pathModule.resolve(resolvedLink, p.slice(pos));
        start();
      }
    };
  }
});

// ../../../node_modules/fs.realpath/index.js
var require_fs = __commonJS({
  "../../../node_modules/fs.realpath/index.js"(exports, module2) {
    module2.exports = realpath;
    realpath.realpath = realpath;
    realpath.sync = realpathSync;
    realpath.realpathSync = realpathSync;
    realpath.monkeypatch = monkeypatch;
    realpath.unmonkeypatch = unmonkeypatch;
    var fs2 = require("fs");
    var origRealpath = fs2.realpath;
    var origRealpathSync = fs2.realpathSync;
    var version2 = process.version;
    var ok = /^v[0-5]\./.test(version2);
    var old = require_old();
    function newError(er) {
      return er && er.syscall === "realpath" && (er.code === "ELOOP" || er.code === "ENOMEM" || er.code === "ENAMETOOLONG");
    }
    function realpath(p, cache, cb) {
      if (ok) {
        return origRealpath(p, cache, cb);
      }
      if (typeof cache === "function") {
        cb = cache;
        cache = null;
      }
      origRealpath(p, cache, function(er, result) {
        if (newError(er)) {
          old.realpath(p, cache, cb);
        } else {
          cb(er, result);
        }
      });
    }
    function realpathSync(p, cache) {
      if (ok) {
        return origRealpathSync(p, cache);
      }
      try {
        return origRealpathSync(p, cache);
      } catch (er) {
        if (newError(er)) {
          return old.realpathSync(p, cache);
        } else {
          throw er;
        }
      }
    }
    function monkeypatch() {
      fs2.realpath = realpath;
      fs2.realpathSync = realpathSync;
    }
    function unmonkeypatch() {
      fs2.realpath = origRealpath;
      fs2.realpathSync = origRealpathSync;
    }
  }
});

// ../../../node_modules/concat-map/index.js
var require_concat_map = __commonJS({
  "../../../node_modules/concat-map/index.js"(exports, module2) {
    module2.exports = function(xs, fn) {
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x))
          res.push.apply(res, x);
        else
          res.push(x);
      }
      return res;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// ../../../node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "../../../node_modules/balanced-match/index.js"(exports, module2) {
    "use strict";
    module2.exports = balanced;
    function balanced(a, b, str) {
      if (a instanceof RegExp)
        a = maybeMatch(a, str);
      if (b instanceof RegExp)
        b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// ../../../node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "../../../node_modules/brace-expansion/index.js"(exports, module2) {
    var concatMap = require_concat_map();
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m || /\$$/.test(m.pre))
        return [str];
      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m.body.indexOf(",") >= 0;
      if (!isSequence && !isOptions) {
        if (m.post.match(/,.*\}/)) {
          str = m.pre + "{" + m.body + escClose + m.post;
          return expand(str);
        }
        return [str];
      }
      var n;
      if (isSequence) {
        n = m.body.split(/\.\./);
      } else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
          n = expand(n[0], false).map(embrace);
          if (n.length === 1) {
            var post = m.post.length ? expand(m.post, false) : [""];
            return post.map(function(p) {
              return m.pre + n[0] + p;
            });
          }
        }
      }
      var pre = m.pre;
      var post = m.post.length ? expand(m.post, false) : [""];
      var N;
      if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n.some(isPadded);
        N = [];
        for (var i = x; test(i, y); i += incr) {
          var c;
          if (isAlphaSequence) {
            c = String.fromCharCode(i);
            if (c === "\\")
              c = "";
          } else {
            c = String(i);
            if (pad) {
              var need = width - c.length;
              if (need > 0) {
                var z = new Array(need + 1).join("0");
                if (i < 0)
                  c = "-" + z + c.slice(1);
                else
                  c = z + c;
              }
            }
          }
          N.push(c);
        }
      } else {
        N = concatMap(n, function(el) {
          return expand(el, false);
        });
      }
      for (var j = 0; j < N.length; j++) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + N[j] + post[k];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }
      return expansions;
    }
  }
});

// ../../../node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS({
  "../../../node_modules/minimatch/minimatch.js"(exports, module2) {
    module2.exports = minimatch;
    minimatch.Minimatch = Minimatch;
    var path = function() {
      try {
        return require("path");
      } catch (e) {
      }
    }() || {
      sep: "/"
    };
    minimatch.sep = path.sep;
    var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
    var expand = require_brace_expansion();
    var plTypes = {
      "!": { open: "(?:(?!(?:", close: "))[^/]*?)" },
      "?": { open: "(?:", close: ")?" },
      "+": { open: "(?:", close: ")+" },
      "*": { open: "(?:", close: ")*" },
      "@": { open: "(?:", close: ")" }
    };
    var qmark = "[^/]";
    var star = qmark + "*?";
    var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
    var reSpecials = charSet("().*{}+?[]^$\\!");
    function charSet(s) {
      return s.split("").reduce(function(set, c) {
        set[c] = true;
        return set;
      }, {});
    }
    var slashSplit = /\/+/;
    minimatch.filter = filter;
    function filter(pattern, options) {
      options = options || {};
      return function(p, i, list) {
        return minimatch(p, pattern, options);
      };
    }
    function ext(a, b) {
      b = b || {};
      var t = {};
      Object.keys(a).forEach(function(k) {
        t[k] = a[k];
      });
      Object.keys(b).forEach(function(k) {
        t[k] = b[k];
      });
      return t;
    }
    minimatch.defaults = function(def) {
      if (!def || typeof def !== "object" || !Object.keys(def).length) {
        return minimatch;
      }
      var orig = minimatch;
      var m = function minimatch2(p, pattern, options) {
        return orig(p, pattern, ext(def, options));
      };
      m.Minimatch = function Minimatch2(pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options));
      };
      m.Minimatch.defaults = function defaults(options) {
        return orig.defaults(ext(def, options)).Minimatch;
      };
      m.filter = function filter2(pattern, options) {
        return orig.filter(pattern, ext(def, options));
      };
      m.defaults = function defaults(options) {
        return orig.defaults(ext(def, options));
      };
      m.makeRe = function makeRe2(pattern, options) {
        return orig.makeRe(pattern, ext(def, options));
      };
      m.braceExpand = function braceExpand2(pattern, options) {
        return orig.braceExpand(pattern, ext(def, options));
      };
      m.match = function(list, pattern, options) {
        return orig.match(list, pattern, ext(def, options));
      };
      return m;
    };
    Minimatch.defaults = function(def) {
      return minimatch.defaults(def).Minimatch;
    };
    function minimatch(p, pattern, options) {
      assertValidPattern(pattern);
      if (!options)
        options = {};
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      return new Minimatch(pattern, options).match(p);
    }
    function Minimatch(pattern, options) {
      if (!(this instanceof Minimatch)) {
        return new Minimatch(pattern, options);
      }
      assertValidPattern(pattern);
      if (!options)
        options = {};
      pattern = pattern.trim();
      if (!options.allowWindowsEscape && path.sep !== "/") {
        pattern = pattern.split(path.sep).join("/");
      }
      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;
      this.partial = !!options.partial;
      this.make();
    }
    Minimatch.prototype.debug = function() {
    };
    Minimatch.prototype.make = make;
    function make() {
      var pattern = this.pattern;
      var options = this.options;
      if (!options.nocomment && pattern.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!pattern) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var set = this.globSet = this.braceExpand();
      if (options.debug)
        this.debug = function debug() {
          console.error.apply(console, arguments);
        };
      this.debug(this.pattern, set);
      set = this.globParts = set.map(function(s) {
        return s.split(slashSplit);
      });
      this.debug(this.pattern, set);
      set = set.map(function(s, si, set2) {
        return s.map(this.parse, this);
      }, this);
      this.debug(this.pattern, set);
      set = set.filter(function(s) {
        return s.indexOf(false) === -1;
      });
      this.debug(this.pattern, set);
      this.set = set;
    }
    Minimatch.prototype.parseNegate = parseNegate;
    function parseNegate() {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;
      if (options.nonegate)
        return;
      for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
        negate = !negate;
        negateOffset++;
      }
      if (negateOffset)
        this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }
    minimatch.braceExpand = function(pattern, options) {
      return braceExpand(pattern, options);
    };
    Minimatch.prototype.braceExpand = braceExpand;
    function braceExpand(pattern, options) {
      if (!options) {
        if (this instanceof Minimatch) {
          options = this.options;
        } else {
          options = {};
        }
      }
      pattern = typeof pattern === "undefined" ? this.pattern : pattern;
      assertValidPattern(pattern);
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        return [pattern];
      }
      return expand(pattern);
    }
    var MAX_PATTERN_LENGTH = 1024 * 64;
    var assertValidPattern = function(pattern) {
      if (typeof pattern !== "string") {
        throw new TypeError("invalid pattern");
      }
      if (pattern.length > MAX_PATTERN_LENGTH) {
        throw new TypeError("pattern is too long");
      }
    };
    Minimatch.prototype.parse = parse;
    var SUBPARSE = {};
    function parse(pattern, isSub) {
      assertValidPattern(pattern);
      var options = this.options;
      if (pattern === "**") {
        if (!options.noglobstar)
          return GLOBSTAR;
        else
          pattern = "*";
      }
      if (pattern === "")
        return "";
      var re = "";
      var hasMagic = !!options.nocase;
      var escaping = false;
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
      var self2 = this;
      function clearStateChar() {
        if (stateChar) {
          switch (stateChar) {
            case "*":
              re += star;
              hasMagic = true;
              break;
            case "?":
              re += qmark;
              hasMagic = true;
              break;
            default:
              re += "\\" + stateChar;
              break;
          }
          self2.debug("clearStateChar %j %j", stateChar, re);
          stateChar = false;
        }
      }
      for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
        this.debug("%s	%s %s %j", pattern, i, re, c);
        if (escaping && reSpecials[c]) {
          re += "\\" + c;
          escaping = false;
          continue;
        }
        switch (c) {
          case "/": {
            return false;
          }
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
            if (inClass) {
              this.debug("  in class");
              if (c === "!" && i === classStart + 1)
                c = "^";
              re += c;
              continue;
            }
            self2.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c;
            if (options.noext)
              clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re += "(";
              continue;
            }
            if (!stateChar) {
              re += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            re += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re += "|";
            continue;
          case "[":
            clearStateChar();
            if (inClass) {
              re += "\\" + c;
              continue;
            }
            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
            continue;
          case "]":
            if (i === classStart + 1 || !inClass) {
              re += "\\" + c;
              escaping = false;
              continue;
            }
            var cs = pattern.substring(classStart + 1, i);
            try {
              RegExp("[" + cs + "]");
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
            hasMagic = true;
            inClass = false;
            re += c;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials[c] && !(c === "^" && inClass)) {
              re += "\\";
            }
            re += c;
        }
      }
      if (inClass) {
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + "\\[" + sp[0];
        hasMagic = hasMagic || sp[1];
      }
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug("setting tail", re, pl);
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_3, $1, $2) {
          if (!$2) {
            $2 = "\\";
          }
          return $1 + $1 + $2 + "|";
        });
        this.debug("tail=%j\n   %s", tail, tail, pl, re);
        var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
        hasMagic = true;
        re = re.slice(0, pl.reStart) + t + "\\(" + tail;
      }
      clearStateChar();
      if (escaping) {
        re += "\\\\";
      }
      var addPatternStart = false;
      switch (re.charAt(0)) {
        case "[":
        case ".":
        case "(":
          addPatternStart = true;
      }
      for (var n = negativeLists.length - 1; n > -1; n--) {
        var nl = negativeLists[n];
        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);
        nlLast += nlAfter;
        var openParensBefore = nlBefore.split("(").length - 1;
        var cleanAfter = nlAfter;
        for (i = 0; i < openParensBefore; i++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
        }
        nlAfter = cleanAfter;
        var dollar = "";
        if (nlAfter === "" && isSub !== SUBPARSE) {
          dollar = "$";
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }
      if (re !== "" && hasMagic) {
        re = "(?=.)" + re;
      }
      if (addPatternStart) {
        re = patternStart + re;
      }
      if (isSub === SUBPARSE) {
        return [re, hasMagic];
      }
      if (!hasMagic) {
        return globUnescape(pattern);
      }
      var flags = options.nocase ? "i" : "";
      try {
        var regExp = new RegExp("^" + re + "$", flags);
      } catch (er) {
        return new RegExp("$.");
      }
      regExp._glob = pattern;
      regExp._src = re;
      return regExp;
    }
    minimatch.makeRe = function(pattern, options) {
      return new Minimatch(pattern, options || {}).makeRe();
    };
    Minimatch.prototype.makeRe = makeRe;
    function makeRe() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var set = this.set;
      if (!set.length) {
        this.regexp = false;
        return this.regexp;
      }
      var options = this.options;
      var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
      var flags = options.nocase ? "i" : "";
      var re = set.map(function(pattern) {
        return pattern.map(function(p) {
          return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
        }).join("\\/");
      }).join("|");
      re = "^(?:" + re + ")$";
      if (this.negate)
        re = "^(?!" + re + ").*$";
      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp;
    }
    minimatch.match = function(list, pattern, options) {
      options = options || {};
      var mm = new Minimatch(pattern, options);
      list = list.filter(function(f) {
        return mm.match(f);
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list;
    };
    Minimatch.prototype.match = function match(f, partial) {
      if (typeof partial === "undefined")
        partial = this.partial;
      this.debug("match", f, this.pattern);
      if (this.comment)
        return false;
      if (this.empty)
        return f === "";
      if (f === "/" && partial)
        return true;
      var options = this.options;
      if (path.sep !== "/") {
        f = f.split(path.sep).join("/");
      }
      f = f.split(slashSplit);
      this.debug(this.pattern, "split", f);
      var set = this.set;
      this.debug(this.pattern, "set", set);
      var filename;
      var i;
      for (i = f.length - 1; i >= 0; i--) {
        filename = f[i];
        if (filename)
          break;
      }
      for (i = 0; i < set.length; i++) {
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate)
            return true;
          return !this.negate;
        }
      }
      if (options.flipNegate)
        return false;
      return this.negate;
    };
    Minimatch.prototype.matchOne = function(file, pattern, partial) {
      var options = this.options;
      this.debug("matchOne", { "this": this, file, pattern });
      this.debug("matchOne", file.length, pattern.length);
      for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
        this.debug("matchOne loop");
        var p = pattern[pi];
        var f = file[fi];
        this.debug(pattern, p, f);
        if (p === false)
          return false;
        if (p === GLOBSTAR) {
          this.debug("GLOBSTAR", [pattern, p, f]);
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug("** at the end");
            for (; fi < fl; fi++) {
              if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                return false;
            }
            return true;
          }
          while (fr < fl) {
            var swallowee = file[fr];
            this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug("globstar found match!", fr, fl, swallowee);
              return true;
            } else {
              if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                this.debug("dot detected!", file, fr, pattern, pr);
                break;
              }
              this.debug("globstar swallow a segment, and continue");
              fr++;
            }
          }
          if (partial) {
            this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
            if (fr === fl)
              return true;
          }
          return false;
        }
        var hit;
        if (typeof p === "string") {
          hit = f === p;
          this.debug("string match", p, f, hit);
        } else {
          hit = f.match(p);
          this.debug("pattern match", p, f, hit);
        }
        if (!hit)
          return false;
      }
      if (fi === fl && pi === pl) {
        return true;
      } else if (fi === fl) {
        return partial;
      } else if (pi === pl) {
        return fi === fl - 1 && file[fi] === "";
      }
      throw new Error("wtf?");
    };
    function globUnescape(s) {
      return s.replace(/\\(.)/g, "$1");
    }
    function regExpEscape(s) {
      return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  }
});

// ../../../node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../../node_modules/inherits/inherits_browser.js"(exports, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../../../node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "../../../node_modules/inherits/inherits.js"(exports, module2) {
    try {
      util = require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// ../../../node_modules/path-is-absolute/index.js
var require_path_is_absolute = __commonJS({
  "../../../node_modules/path-is-absolute/index.js"(exports, module2) {
    "use strict";
    function posix(path) {
      return path.charAt(0) === "/";
    }
    function win32(path) {
      var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
      var result = splitDeviceRe.exec(path);
      var device = result[1] || "";
      var isUnc = Boolean(device && device.charAt(1) !== ":");
      return Boolean(result[2] || isUnc);
    }
    module2.exports = process.platform === "win32" ? win32 : posix;
    module2.exports.posix = posix;
    module2.exports.win32 = win32;
  }
});

// ../../../node_modules/glob/common.js
var require_common = __commonJS({
  "../../../node_modules/glob/common.js"(exports) {
    exports.setopts = setopts;
    exports.ownProp = ownProp;
    exports.makeAbs = makeAbs;
    exports.finish = finish;
    exports.mark = mark;
    exports.isIgnored = isIgnored;
    exports.childrenIgnored = childrenIgnored;
    function ownProp(obj, field) {
      return Object.prototype.hasOwnProperty.call(obj, field);
    }
    var fs2 = require("fs");
    var path = require("path");
    var minimatch = require_minimatch();
    var isAbsolute = require_path_is_absolute();
    var Minimatch = minimatch.Minimatch;
    function alphasort(a, b) {
      return a.localeCompare(b, "en");
    }
    function setupIgnores(self2, options) {
      self2.ignore = options.ignore || [];
      if (!Array.isArray(self2.ignore))
        self2.ignore = [self2.ignore];
      if (self2.ignore.length) {
        self2.ignore = self2.ignore.map(ignoreMap);
      }
    }
    function ignoreMap(pattern) {
      var gmatcher = null;
      if (pattern.slice(-3) === "/**") {
        var gpattern = pattern.replace(/(\/\*\*)+$/, "");
        gmatcher = new Minimatch(gpattern, { dot: true });
      }
      return {
        matcher: new Minimatch(pattern, { dot: true }),
        gmatcher
      };
    }
    function setopts(self2, pattern, options) {
      if (!options)
        options = {};
      if (options.matchBase && pattern.indexOf("/") === -1) {
        if (options.noglobstar) {
          throw new Error("base matching requires globstar");
        }
        pattern = "**/" + pattern;
      }
      self2.silent = !!options.silent;
      self2.pattern = pattern;
      self2.strict = options.strict !== false;
      self2.realpath = !!options.realpath;
      self2.realpathCache = options.realpathCache || /* @__PURE__ */ Object.create(null);
      self2.follow = !!options.follow;
      self2.dot = !!options.dot;
      self2.mark = !!options.mark;
      self2.nodir = !!options.nodir;
      if (self2.nodir)
        self2.mark = true;
      self2.sync = !!options.sync;
      self2.nounique = !!options.nounique;
      self2.nonull = !!options.nonull;
      self2.nosort = !!options.nosort;
      self2.nocase = !!options.nocase;
      self2.stat = !!options.stat;
      self2.noprocess = !!options.noprocess;
      self2.absolute = !!options.absolute;
      self2.fs = options.fs || fs2;
      self2.maxLength = options.maxLength || Infinity;
      self2.cache = options.cache || /* @__PURE__ */ Object.create(null);
      self2.statCache = options.statCache || /* @__PURE__ */ Object.create(null);
      self2.symlinks = options.symlinks || /* @__PURE__ */ Object.create(null);
      setupIgnores(self2, options);
      self2.changedCwd = false;
      var cwd = process.cwd();
      if (!ownProp(options, "cwd"))
        self2.cwd = cwd;
      else {
        self2.cwd = path.resolve(options.cwd);
        self2.changedCwd = self2.cwd !== cwd;
      }
      self2.root = options.root || path.resolve(self2.cwd, "/");
      self2.root = path.resolve(self2.root);
      if (process.platform === "win32")
        self2.root = self2.root.replace(/\\/g, "/");
      self2.cwdAbs = isAbsolute(self2.cwd) ? self2.cwd : makeAbs(self2, self2.cwd);
      if (process.platform === "win32")
        self2.cwdAbs = self2.cwdAbs.replace(/\\/g, "/");
      self2.nomount = !!options.nomount;
      options.nonegate = true;
      options.nocomment = true;
      options.allowWindowsEscape = false;
      self2.minimatch = new Minimatch(pattern, options);
      self2.options = self2.minimatch.options;
    }
    function finish(self2) {
      var nou = self2.nounique;
      var all = nou ? [] : /* @__PURE__ */ Object.create(null);
      for (var i = 0, l = self2.matches.length; i < l; i++) {
        var matches = self2.matches[i];
        if (!matches || Object.keys(matches).length === 0) {
          if (self2.nonull) {
            var literal = self2.minimatch.globSet[i];
            if (nou)
              all.push(literal);
            else
              all[literal] = true;
          }
        } else {
          var m = Object.keys(matches);
          if (nou)
            all.push.apply(all, m);
          else
            m.forEach(function(m2) {
              all[m2] = true;
            });
        }
      }
      if (!nou)
        all = Object.keys(all);
      if (!self2.nosort)
        all = all.sort(alphasort);
      if (self2.mark) {
        for (var i = 0; i < all.length; i++) {
          all[i] = self2._mark(all[i]);
        }
        if (self2.nodir) {
          all = all.filter(function(e) {
            var notDir = !/\/$/.test(e);
            var c = self2.cache[e] || self2.cache[makeAbs(self2, e)];
            if (notDir && c)
              notDir = c !== "DIR" && !Array.isArray(c);
            return notDir;
          });
        }
      }
      if (self2.ignore.length)
        all = all.filter(function(m2) {
          return !isIgnored(self2, m2);
        });
      self2.found = all;
    }
    function mark(self2, p) {
      var abs = makeAbs(self2, p);
      var c = self2.cache[abs];
      var m = p;
      if (c) {
        var isDir = c === "DIR" || Array.isArray(c);
        var slash = p.slice(-1) === "/";
        if (isDir && !slash)
          m += "/";
        else if (!isDir && slash)
          m = m.slice(0, -1);
        if (m !== p) {
          var mabs = makeAbs(self2, m);
          self2.statCache[mabs] = self2.statCache[abs];
          self2.cache[mabs] = self2.cache[abs];
        }
      }
      return m;
    }
    function makeAbs(self2, f) {
      var abs = f;
      if (f.charAt(0) === "/") {
        abs = path.join(self2.root, f);
      } else if (isAbsolute(f) || f === "") {
        abs = f;
      } else if (self2.changedCwd) {
        abs = path.resolve(self2.cwd, f);
      } else {
        abs = path.resolve(f);
      }
      if (process.platform === "win32")
        abs = abs.replace(/\\/g, "/");
      return abs;
    }
    function isIgnored(self2, path2) {
      if (!self2.ignore.length)
        return false;
      return self2.ignore.some(function(item) {
        return item.matcher.match(path2) || !!(item.gmatcher && item.gmatcher.match(path2));
      });
    }
    function childrenIgnored(self2, path2) {
      if (!self2.ignore.length)
        return false;
      return self2.ignore.some(function(item) {
        return !!(item.gmatcher && item.gmatcher.match(path2));
      });
    }
  }
});

// ../../../node_modules/glob/sync.js
var require_sync = __commonJS({
  "../../../node_modules/glob/sync.js"(exports, module2) {
    module2.exports = globSync;
    globSync.GlobSync = GlobSync;
    var rp = require_fs();
    var minimatch = require_minimatch();
    var Minimatch = minimatch.Minimatch;
    var Glob = require_glob().Glob;
    var util = require("util");
    var path = require("path");
    var assert3 = require("assert");
    var isAbsolute = require_path_is_absolute();
    var common = require_common();
    var setopts = common.setopts;
    var ownProp = common.ownProp;
    var childrenIgnored = common.childrenIgnored;
    var isIgnored = common.isIgnored;
    function globSync(pattern, options) {
      if (typeof options === "function" || arguments.length === 3)
        throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
      return new GlobSync(pattern, options).found;
    }
    function GlobSync(pattern, options) {
      if (!pattern)
        throw new Error("must provide pattern");
      if (typeof options === "function" || arguments.length === 3)
        throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
      if (!(this instanceof GlobSync))
        return new GlobSync(pattern, options);
      setopts(this, pattern, options);
      if (this.noprocess)
        return this;
      var n = this.minimatch.set.length;
      this.matches = new Array(n);
      for (var i = 0; i < n; i++) {
        this._process(this.minimatch.set[i], i, false);
      }
      this._finish();
    }
    GlobSync.prototype._finish = function() {
      assert3.ok(this instanceof GlobSync);
      if (this.realpath) {
        var self2 = this;
        this.matches.forEach(function(matchset, index) {
          var set = self2.matches[index] = /* @__PURE__ */ Object.create(null);
          for (var p in matchset) {
            try {
              p = self2._makeAbs(p);
              var real = rp.realpathSync(p, self2.realpathCache);
              set[real] = true;
            } catch (er) {
              if (er.syscall === "stat")
                set[self2._makeAbs(p)] = true;
              else
                throw er;
            }
          }
        });
      }
      common.finish(this);
    };
    GlobSync.prototype._process = function(pattern, index, inGlobStar) {
      assert3.ok(this instanceof GlobSync);
      var n = 0;
      while (typeof pattern[n] === "string") {
        n++;
      }
      var prefix;
      switch (n) {
        case pattern.length:
          this._processSimple(pattern.join("/"), index);
          return;
        case 0:
          prefix = null;
          break;
        default:
          prefix = pattern.slice(0, n).join("/");
          break;
      }
      var remain = pattern.slice(n);
      var read;
      if (prefix === null)
        read = ".";
      else if (isAbsolute(prefix) || isAbsolute(pattern.map(function(p) {
        return typeof p === "string" ? p : "[*]";
      }).join("/"))) {
        if (!prefix || !isAbsolute(prefix))
          prefix = "/" + prefix;
        read = prefix;
      } else
        read = prefix;
      var abs = this._makeAbs(read);
      if (childrenIgnored(this, read))
        return;
      var isGlobStar = remain[0] === minimatch.GLOBSTAR;
      if (isGlobStar)
        this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
      else
        this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
    };
    GlobSync.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar) {
      var entries = this._readdir(abs, inGlobStar);
      if (!entries)
        return;
      var pn = remain[0];
      var negate = !!this.minimatch.negate;
      var rawGlob = pn._glob;
      var dotOk = this.dot || rawGlob.charAt(0) === ".";
      var matchedEntries = [];
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (e.charAt(0) !== "." || dotOk) {
          var m;
          if (negate && !prefix) {
            m = !e.match(pn);
          } else {
            m = e.match(pn);
          }
          if (m)
            matchedEntries.push(e);
        }
      }
      var len = matchedEntries.length;
      if (len === 0)
        return;
      if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index])
          this.matches[index] = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < len; i++) {
          var e = matchedEntries[i];
          if (prefix) {
            if (prefix.slice(-1) !== "/")
              e = prefix + "/" + e;
            else
              e = prefix + e;
          }
          if (e.charAt(0) === "/" && !this.nomount) {
            e = path.join(this.root, e);
          }
          this._emitMatch(index, e);
        }
        return;
      }
      remain.shift();
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        var newPattern;
        if (prefix)
          newPattern = [prefix, e];
        else
          newPattern = [e];
        this._process(newPattern.concat(remain), index, inGlobStar);
      }
    };
    GlobSync.prototype._emitMatch = function(index, e) {
      if (isIgnored(this, e))
        return;
      var abs = this._makeAbs(e);
      if (this.mark)
        e = this._mark(e);
      if (this.absolute) {
        e = abs;
      }
      if (this.matches[index][e])
        return;
      if (this.nodir) {
        var c = this.cache[abs];
        if (c === "DIR" || Array.isArray(c))
          return;
      }
      this.matches[index][e] = true;
      if (this.stat)
        this._stat(e);
    };
    GlobSync.prototype._readdirInGlobStar = function(abs) {
      if (this.follow)
        return this._readdir(abs, false);
      var entries;
      var lstat;
      var stat;
      try {
        lstat = this.fs.lstatSync(abs);
      } catch (er) {
        if (er.code === "ENOENT") {
          return null;
        }
      }
      var isSym = lstat && lstat.isSymbolicLink();
      this.symlinks[abs] = isSym;
      if (!isSym && lstat && !lstat.isDirectory())
        this.cache[abs] = "FILE";
      else
        entries = this._readdir(abs, false);
      return entries;
    };
    GlobSync.prototype._readdir = function(abs, inGlobStar) {
      var entries;
      if (inGlobStar && !ownProp(this.symlinks, abs))
        return this._readdirInGlobStar(abs);
      if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === "FILE")
          return null;
        if (Array.isArray(c))
          return c;
      }
      try {
        return this._readdirEntries(abs, this.fs.readdirSync(abs));
      } catch (er) {
        this._readdirError(abs, er);
        return null;
      }
    };
    GlobSync.prototype._readdirEntries = function(abs, entries) {
      if (!this.mark && !this.stat) {
        for (var i = 0; i < entries.length; i++) {
          var e = entries[i];
          if (abs === "/")
            e = abs + e;
          else
            e = abs + "/" + e;
          this.cache[e] = true;
        }
      }
      this.cache[abs] = entries;
      return entries;
    };
    GlobSync.prototype._readdirError = function(f, er) {
      switch (er.code) {
        case "ENOTSUP":
        case "ENOTDIR":
          var abs = this._makeAbs(f);
          this.cache[abs] = "FILE";
          if (abs === this.cwdAbs) {
            var error = new Error(er.code + " invalid cwd " + this.cwd);
            error.path = this.cwd;
            error.code = er.code;
            throw error;
          }
          break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
          this.cache[this._makeAbs(f)] = false;
          break;
        default:
          this.cache[this._makeAbs(f)] = false;
          if (this.strict)
            throw er;
          if (!this.silent)
            console.error("glob error", er);
          break;
      }
    };
    GlobSync.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar) {
      var entries = this._readdir(abs, inGlobStar);
      if (!entries)
        return;
      var remainWithoutGlobStar = remain.slice(1);
      var gspref = prefix ? [prefix] : [];
      var noGlobStar = gspref.concat(remainWithoutGlobStar);
      this._process(noGlobStar, index, false);
      var len = entries.length;
      var isSym = this.symlinks[abs];
      if (isSym && inGlobStar)
        return;
      for (var i = 0; i < len; i++) {
        var e = entries[i];
        if (e.charAt(0) === "." && !this.dot)
          continue;
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true);
        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true);
      }
    };
    GlobSync.prototype._processSimple = function(prefix, index) {
      var exists = this._stat(prefix);
      if (!this.matches[index])
        this.matches[index] = /* @__PURE__ */ Object.create(null);
      if (!exists)
        return;
      if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === "/") {
          prefix = path.join(this.root, prefix);
        } else {
          prefix = path.resolve(this.root, prefix);
          if (trail)
            prefix += "/";
        }
      }
      if (process.platform === "win32")
        prefix = prefix.replace(/\\/g, "/");
      this._emitMatch(index, prefix);
    };
    GlobSync.prototype._stat = function(f) {
      var abs = this._makeAbs(f);
      var needDir = f.slice(-1) === "/";
      if (f.length > this.maxLength)
        return false;
      if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (Array.isArray(c))
          c = "DIR";
        if (!needDir || c === "DIR")
          return c;
        if (needDir && c === "FILE")
          return false;
      }
      var exists;
      var stat = this.statCache[abs];
      if (!stat) {
        var lstat;
        try {
          lstat = this.fs.lstatSync(abs);
        } catch (er) {
          if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
            this.statCache[abs] = false;
            return false;
          }
        }
        if (lstat && lstat.isSymbolicLink()) {
          try {
            stat = this.fs.statSync(abs);
          } catch (er) {
            stat = lstat;
          }
        } else {
          stat = lstat;
        }
      }
      this.statCache[abs] = stat;
      var c = true;
      if (stat)
        c = stat.isDirectory() ? "DIR" : "FILE";
      this.cache[abs] = this.cache[abs] || c;
      if (needDir && c === "FILE")
        return false;
      return c;
    };
    GlobSync.prototype._mark = function(p) {
      return common.mark(this, p);
    };
    GlobSync.prototype._makeAbs = function(f) {
      return common.makeAbs(this, f);
    };
  }
});

// ../../../node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "../../../node_modules/wrappy/wrappy.js"(exports, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// ../../../node_modules/once/once.js
var require_once = __commonJS({
  "../../../node_modules/once/once.js"(exports, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// ../../../node_modules/inflight/inflight.js
var require_inflight = __commonJS({
  "../../../node_modules/inflight/inflight.js"(exports, module2) {
    var wrappy = require_wrappy();
    var reqs = /* @__PURE__ */ Object.create(null);
    var once = require_once();
    module2.exports = wrappy(inflight);
    function inflight(key, cb) {
      if (reqs[key]) {
        reqs[key].push(cb);
        return null;
      } else {
        reqs[key] = [cb];
        return makeres(key);
      }
    }
    function makeres(key) {
      return once(function RES() {
        var cbs = reqs[key];
        var len = cbs.length;
        var args = slice(arguments);
        try {
          for (var i = 0; i < len; i++) {
            cbs[i].apply(null, args);
          }
        } finally {
          if (cbs.length > len) {
            cbs.splice(0, len);
            process.nextTick(function() {
              RES.apply(null, args);
            });
          } else {
            delete reqs[key];
          }
        }
      });
    }
    function slice(args) {
      var length = args.length;
      var array = [];
      for (var i = 0; i < length; i++)
        array[i] = args[i];
      return array;
    }
  }
});

// ../../../node_modules/glob/glob.js
var require_glob = __commonJS({
  "../../../node_modules/glob/glob.js"(exports, module2) {
    module2.exports = glob;
    var rp = require_fs();
    var minimatch = require_minimatch();
    var Minimatch = minimatch.Minimatch;
    var inherits = require_inherits();
    var EE = require("events").EventEmitter;
    var path = require("path");
    var assert3 = require("assert");
    var isAbsolute = require_path_is_absolute();
    var globSync = require_sync();
    var common = require_common();
    var setopts = common.setopts;
    var ownProp = common.ownProp;
    var inflight = require_inflight();
    var util = require("util");
    var childrenIgnored = common.childrenIgnored;
    var isIgnored = common.isIgnored;
    var once = require_once();
    function glob(pattern, options, cb) {
      if (typeof options === "function")
        cb = options, options = {};
      if (!options)
        options = {};
      if (options.sync) {
        if (cb)
          throw new TypeError("callback provided to sync glob");
        return globSync(pattern, options);
      }
      return new Glob(pattern, options, cb);
    }
    glob.sync = globSync;
    var GlobSync = glob.GlobSync = globSync.GlobSync;
    glob.glob = glob;
    function extend(origin, add) {
      if (add === null || typeof add !== "object") {
        return origin;
      }
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    glob.hasMagic = function(pattern, options_) {
      var options = extend({}, options_);
      options.noprocess = true;
      var g = new Glob(pattern, options);
      var set = g.minimatch.set;
      if (!pattern)
        return false;
      if (set.length > 1)
        return true;
      for (var j = 0; j < set[0].length; j++) {
        if (typeof set[0][j] !== "string")
          return true;
      }
      return false;
    };
    glob.Glob = Glob;
    inherits(Glob, EE);
    function Glob(pattern, options, cb) {
      if (typeof options === "function") {
        cb = options;
        options = null;
      }
      if (options && options.sync) {
        if (cb)
          throw new TypeError("callback provided to sync glob");
        return new GlobSync(pattern, options);
      }
      if (!(this instanceof Glob))
        return new Glob(pattern, options, cb);
      setopts(this, pattern, options);
      this._didRealPath = false;
      var n = this.minimatch.set.length;
      this.matches = new Array(n);
      if (typeof cb === "function") {
        cb = once(cb);
        this.on("error", cb);
        this.on("end", function(matches) {
          cb(null, matches);
        });
      }
      var self2 = this;
      this._processing = 0;
      this._emitQueue = [];
      this._processQueue = [];
      this.paused = false;
      if (this.noprocess)
        return this;
      if (n === 0)
        return done();
      var sync = true;
      for (var i = 0; i < n; i++) {
        this._process(this.minimatch.set[i], i, false, done);
      }
      sync = false;
      function done() {
        --self2._processing;
        if (self2._processing <= 0) {
          if (sync) {
            process.nextTick(function() {
              self2._finish();
            });
          } else {
            self2._finish();
          }
        }
      }
    }
    Glob.prototype._finish = function() {
      assert3(this instanceof Glob);
      if (this.aborted)
        return;
      if (this.realpath && !this._didRealpath)
        return this._realpath();
      common.finish(this);
      this.emit("end", this.found);
    };
    Glob.prototype._realpath = function() {
      if (this._didRealpath)
        return;
      this._didRealpath = true;
      var n = this.matches.length;
      if (n === 0)
        return this._finish();
      var self2 = this;
      for (var i = 0; i < this.matches.length; i++)
        this._realpathSet(i, next);
      function next() {
        if (--n === 0)
          self2._finish();
      }
    };
    Glob.prototype._realpathSet = function(index, cb) {
      var matchset = this.matches[index];
      if (!matchset)
        return cb();
      var found = Object.keys(matchset);
      var self2 = this;
      var n = found.length;
      if (n === 0)
        return cb();
      var set = this.matches[index] = /* @__PURE__ */ Object.create(null);
      found.forEach(function(p, i) {
        p = self2._makeAbs(p);
        rp.realpath(p, self2.realpathCache, function(er, real) {
          if (!er)
            set[real] = true;
          else if (er.syscall === "stat")
            set[p] = true;
          else
            self2.emit("error", er);
          if (--n === 0) {
            self2.matches[index] = set;
            cb();
          }
        });
      });
    };
    Glob.prototype._mark = function(p) {
      return common.mark(this, p);
    };
    Glob.prototype._makeAbs = function(f) {
      return common.makeAbs(this, f);
    };
    Glob.prototype.abort = function() {
      this.aborted = true;
      this.emit("abort");
    };
    Glob.prototype.pause = function() {
      if (!this.paused) {
        this.paused = true;
        this.emit("pause");
      }
    };
    Glob.prototype.resume = function() {
      if (this.paused) {
        this.emit("resume");
        this.paused = false;
        if (this._emitQueue.length) {
          var eq = this._emitQueue.slice(0);
          this._emitQueue.length = 0;
          for (var i = 0; i < eq.length; i++) {
            var e = eq[i];
            this._emitMatch(e[0], e[1]);
          }
        }
        if (this._processQueue.length) {
          var pq = this._processQueue.slice(0);
          this._processQueue.length = 0;
          for (var i = 0; i < pq.length; i++) {
            var p = pq[i];
            this._processing--;
            this._process(p[0], p[1], p[2], p[3]);
          }
        }
      }
    };
    Glob.prototype._process = function(pattern, index, inGlobStar, cb) {
      assert3(this instanceof Glob);
      assert3(typeof cb === "function");
      if (this.aborted)
        return;
      this._processing++;
      if (this.paused) {
        this._processQueue.push([pattern, index, inGlobStar, cb]);
        return;
      }
      var n = 0;
      while (typeof pattern[n] === "string") {
        n++;
      }
      var prefix;
      switch (n) {
        case pattern.length:
          this._processSimple(pattern.join("/"), index, cb);
          return;
        case 0:
          prefix = null;
          break;
        default:
          prefix = pattern.slice(0, n).join("/");
          break;
      }
      var remain = pattern.slice(n);
      var read;
      if (prefix === null)
        read = ".";
      else if (isAbsolute(prefix) || isAbsolute(pattern.map(function(p) {
        return typeof p === "string" ? p : "[*]";
      }).join("/"))) {
        if (!prefix || !isAbsolute(prefix))
          prefix = "/" + prefix;
        read = prefix;
      } else
        read = prefix;
      var abs = this._makeAbs(read);
      if (childrenIgnored(this, read))
        return cb();
      var isGlobStar = remain[0] === minimatch.GLOBSTAR;
      if (isGlobStar)
        this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
      else
        this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
    };
    Glob.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar, cb) {
      var self2 = this;
      this._readdir(abs, inGlobStar, function(er, entries) {
        return self2._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
      });
    };
    Glob.prototype._processReaddir2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
      if (!entries)
        return cb();
      var pn = remain[0];
      var negate = !!this.minimatch.negate;
      var rawGlob = pn._glob;
      var dotOk = this.dot || rawGlob.charAt(0) === ".";
      var matchedEntries = [];
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (e.charAt(0) !== "." || dotOk) {
          var m;
          if (negate && !prefix) {
            m = !e.match(pn);
          } else {
            m = e.match(pn);
          }
          if (m)
            matchedEntries.push(e);
        }
      }
      var len = matchedEntries.length;
      if (len === 0)
        return cb();
      if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index])
          this.matches[index] = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < len; i++) {
          var e = matchedEntries[i];
          if (prefix) {
            if (prefix !== "/")
              e = prefix + "/" + e;
            else
              e = prefix + e;
          }
          if (e.charAt(0) === "/" && !this.nomount) {
            e = path.join(this.root, e);
          }
          this._emitMatch(index, e);
        }
        return cb();
      }
      remain.shift();
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        var newPattern;
        if (prefix) {
          if (prefix !== "/")
            e = prefix + "/" + e;
          else
            e = prefix + e;
        }
        this._process([e].concat(remain), index, inGlobStar, cb);
      }
      cb();
    };
    Glob.prototype._emitMatch = function(index, e) {
      if (this.aborted)
        return;
      if (isIgnored(this, e))
        return;
      if (this.paused) {
        this._emitQueue.push([index, e]);
        return;
      }
      var abs = isAbsolute(e) ? e : this._makeAbs(e);
      if (this.mark)
        e = this._mark(e);
      if (this.absolute)
        e = abs;
      if (this.matches[index][e])
        return;
      if (this.nodir) {
        var c = this.cache[abs];
        if (c === "DIR" || Array.isArray(c))
          return;
      }
      this.matches[index][e] = true;
      var st = this.statCache[abs];
      if (st)
        this.emit("stat", e, st);
      this.emit("match", e);
    };
    Glob.prototype._readdirInGlobStar = function(abs, cb) {
      if (this.aborted)
        return;
      if (this.follow)
        return this._readdir(abs, false, cb);
      var lstatkey = "lstat\0" + abs;
      var self2 = this;
      var lstatcb = inflight(lstatkey, lstatcb_);
      if (lstatcb)
        self2.fs.lstat(abs, lstatcb);
      function lstatcb_(er, lstat) {
        if (er && er.code === "ENOENT")
          return cb();
        var isSym = lstat && lstat.isSymbolicLink();
        self2.symlinks[abs] = isSym;
        if (!isSym && lstat && !lstat.isDirectory()) {
          self2.cache[abs] = "FILE";
          cb();
        } else
          self2._readdir(abs, false, cb);
      }
    };
    Glob.prototype._readdir = function(abs, inGlobStar, cb) {
      if (this.aborted)
        return;
      cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
      if (!cb)
        return;
      if (inGlobStar && !ownProp(this.symlinks, abs))
        return this._readdirInGlobStar(abs, cb);
      if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === "FILE")
          return cb();
        if (Array.isArray(c))
          return cb(null, c);
      }
      var self2 = this;
      self2.fs.readdir(abs, readdirCb(this, abs, cb));
    };
    function readdirCb(self2, abs, cb) {
      return function(er, entries) {
        if (er)
          self2._readdirError(abs, er, cb);
        else
          self2._readdirEntries(abs, entries, cb);
      };
    }
    Glob.prototype._readdirEntries = function(abs, entries, cb) {
      if (this.aborted)
        return;
      if (!this.mark && !this.stat) {
        for (var i = 0; i < entries.length; i++) {
          var e = entries[i];
          if (abs === "/")
            e = abs + e;
          else
            e = abs + "/" + e;
          this.cache[e] = true;
        }
      }
      this.cache[abs] = entries;
      return cb(null, entries);
    };
    Glob.prototype._readdirError = function(f, er, cb) {
      if (this.aborted)
        return;
      switch (er.code) {
        case "ENOTSUP":
        case "ENOTDIR":
          var abs = this._makeAbs(f);
          this.cache[abs] = "FILE";
          if (abs === this.cwdAbs) {
            var error = new Error(er.code + " invalid cwd " + this.cwd);
            error.path = this.cwd;
            error.code = er.code;
            this.emit("error", error);
            this.abort();
          }
          break;
        case "ENOENT":
        case "ELOOP":
        case "ENAMETOOLONG":
        case "UNKNOWN":
          this.cache[this._makeAbs(f)] = false;
          break;
        default:
          this.cache[this._makeAbs(f)] = false;
          if (this.strict) {
            this.emit("error", er);
            this.abort();
          }
          if (!this.silent)
            console.error("glob error", er);
          break;
      }
      return cb();
    };
    Glob.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar, cb) {
      var self2 = this;
      this._readdir(abs, inGlobStar, function(er, entries) {
        self2._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
      });
    };
    Glob.prototype._processGlobStar2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
      if (!entries)
        return cb();
      var remainWithoutGlobStar = remain.slice(1);
      var gspref = prefix ? [prefix] : [];
      var noGlobStar = gspref.concat(remainWithoutGlobStar);
      this._process(noGlobStar, index, false, cb);
      var isSym = this.symlinks[abs];
      var len = entries.length;
      if (isSym && inGlobStar)
        return cb();
      for (var i = 0; i < len; i++) {
        var e = entries[i];
        if (e.charAt(0) === "." && !this.dot)
          continue;
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true, cb);
        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true, cb);
      }
      cb();
    };
    Glob.prototype._processSimple = function(prefix, index, cb) {
      var self2 = this;
      this._stat(prefix, function(er, exists) {
        self2._processSimple2(prefix, index, er, exists, cb);
      });
    };
    Glob.prototype._processSimple2 = function(prefix, index, er, exists, cb) {
      if (!this.matches[index])
        this.matches[index] = /* @__PURE__ */ Object.create(null);
      if (!exists)
        return cb();
      if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === "/") {
          prefix = path.join(this.root, prefix);
        } else {
          prefix = path.resolve(this.root, prefix);
          if (trail)
            prefix += "/";
        }
      }
      if (process.platform === "win32")
        prefix = prefix.replace(/\\/g, "/");
      this._emitMatch(index, prefix);
      cb();
    };
    Glob.prototype._stat = function(f, cb) {
      var abs = this._makeAbs(f);
      var needDir = f.slice(-1) === "/";
      if (f.length > this.maxLength)
        return cb();
      if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (Array.isArray(c))
          c = "DIR";
        if (!needDir || c === "DIR")
          return cb(null, c);
        if (needDir && c === "FILE")
          return cb();
      }
      var exists;
      var stat = this.statCache[abs];
      if (stat !== void 0) {
        if (stat === false)
          return cb(null, stat);
        else {
          var type = stat.isDirectory() ? "DIR" : "FILE";
          if (needDir && type === "FILE")
            return cb();
          else
            return cb(null, type, stat);
        }
      }
      var self2 = this;
      var statcb = inflight("stat\0" + abs, lstatcb_);
      if (statcb)
        self2.fs.lstat(abs, statcb);
      function lstatcb_(er, lstat) {
        if (lstat && lstat.isSymbolicLink()) {
          return self2.fs.stat(abs, function(er2, stat2) {
            if (er2)
              self2._stat2(f, abs, null, lstat, cb);
            else
              self2._stat2(f, abs, er2, stat2, cb);
          });
        } else {
          self2._stat2(f, abs, er, lstat, cb);
        }
      }
    };
    Glob.prototype._stat2 = function(f, abs, er, stat, cb) {
      if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
        this.statCache[abs] = false;
        return cb();
      }
      var needDir = f.slice(-1) === "/";
      this.statCache[abs] = stat;
      if (abs.slice(-1) === "/" && stat && !stat.isDirectory())
        return cb(null, false, stat);
      var c = true;
      if (stat)
        c = stat.isDirectory() ? "DIR" : "FILE";
      this.cache[abs] = this.cache[abs] || c;
      if (needDir && c === "FILE")
        return cb();
      return cb(null, c, stat);
    };
  }
});

// ../../../node_modules/postgrator/lib/Client.js
var require_Client = __commonJS({
  "../../../node_modules/postgrator/lib/Client.js"(exports, module2) {
    function hasColumnName(schemaResultRows, columnName) {
      const row = schemaResultRows.find((row2) => row2.column_name === columnName || row2.COLUMN_NAME === columnName);
      return row !== void 0;
    }
    var Client = class {
      constructor(config) {
        this.config = config;
      }
      quotedSchemaTable() {
        if (this.config.driver === "pg") {
          return this.config.schemaTable.split(".").map((value) => `"${value}"`).join(".");
        }
        return this.config.schemaTable;
      }
      persistActionSql(migration) {
        const action = migration.action.toLowerCase();
        if (action === "do") {
          return `
          INSERT INTO ${this.quotedSchemaTable()} (version, name, md5, run_at) 
          VALUES (
            ${migration.version}, 
            '${migration.name}', 
            '${migration.md5}',
            '${new Date().toISOString().replace("T", " ").replace("Z", "")}'
          );`;
        }
        if (action === "undo") {
          return `
          DELETE FROM ${this.quotedSchemaTable()} 
          WHERE version = ${migration.version};`;
        }
        throw new Error("unknown migration action");
      }
      getMd5Sql(migration) {
        return `
      SELECT md5 
      FROM ${this.quotedSchemaTable()} 
      WHERE version = ${migration.version};
    `;
      }
      getDatabaseVersionSql() {
        return `
      SELECT version 
      FROM ${this.quotedSchemaTable()} 
      ORDER BY version DESC 
      LIMIT 1
    `;
      }
      async runQuery(query) {
        const { config } = this;
        if (config.driver === "pg" && config.currentSchema) {
          await config.execQuery(`SET search_path = ${config.currentSchema}`);
        }
        return config.execQuery(query);
      }
      async hasVersionTable() {
        const sql = this.getColumnsSql();
        const results = await this.runQuery(sql);
        const { rows } = results;
        return rows.length > 0;
      }
      async ensureTable() {
        const { config } = this;
        const sql = this.getColumnsSql();
        const results = await this.runQuery(sql);
        const { rows } = results;
        const sqls = [];
        if (rows.length === 0) {
          if (config.driver === "pg") {
            const schema = config.schemaTable.split(".");
            if (schema[1]) {
              sqls.push(`CREATE SCHEMA IF NOT EXISTS "${schema[0]}";`);
            }
          }
          sqls.push(`
          CREATE TABLE ${this.quotedSchemaTable()} (
            version BIGINT PRIMARY KEY
          ); 
          INSERT INTO ${this.quotedSchemaTable()} (version) 
            VALUES (0);
        `);
        }
        if (!hasColumnName(rows, "name")) {
          sqls.push(this.getAddNameSql());
        }
        if (!hasColumnName(rows, "md5")) {
          sqls.push(this.getAddMd5Sql());
        }
        if (!hasColumnName(rows, "run_at")) {
          sqls.push(this.getAddRunAtSql());
        }
        for (const sql2 of sqls) {
          await this.runQuery(sql2);
        }
      }
    };
    module2.exports = Client;
  }
});

// ../../../node_modules/postgrator/lib/MssqlClient.js
var require_MssqlClient = __commonJS({
  "../../../node_modules/postgrator/lib/MssqlClient.js"(exports, module2) {
    var Client = require_Client();
    var MssqlClient = class extends Client {
      getAddNameSql() {
        return `
      ALTER TABLE ${this.config.schemaTable} 
        ADD name VARCHAR(MAX);
    `;
      }
      getAddMd5Sql() {
        return `
      ALTER TABLE ${this.config.schemaTable} 
        ADD md5 VARCHAR(MAX);
    `;
      }
      getAddRunAtSql() {
        return `
      ALTER TABLE ${this.config.schemaTable} 
        ADD run_at DATETIME;
    `;
      }
      getColumnsSql() {
        const { config } = this;
        const schema = config.schemaTable.split(".");
        let tableName = schema[0];
        let schemaSql = "";
        if (schema[1]) {
          tableName = schema[1];
          schemaSql = `AND table_schema = '${schema[0]}'`;
        } else if (config.currentSchema) {
          schemaSql = `AND table_schema = '${config.currentSchema}'`;
        }
        return `
      SELECT column_name
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE table_name = '${tableName}'
      AND table_catalog = '${config.database}'
      ${schemaSql};
    `;
      }
      getDatabaseVersionSql() {
        const { config } = this;
        return `
      SELECT TOP 1 version 
      FROM ${config.schemaTable} 
      ORDER BY version DESC
    `;
      }
    };
    module2.exports = MssqlClient;
  }
});

// ../../../node_modules/postgrator/lib/MysqlClient.js
var require_MysqlClient = __commonJS({
  "../../../node_modules/postgrator/lib/MysqlClient.js"(exports, module2) {
    var Client = require_Client();
    var MysqlClient = class extends Client {
      getAddNameSql() {
        return `
      ALTER TABLE ${this.config.schemaTable} 
        ADD COLUMN name TEXT;
    `;
      }
      getAddMd5Sql() {
        return `
      ALTER TABLE ${this.config.schemaTable} 
        ADD COLUMN md5 TEXT;
    `;
      }
      getAddRunAtSql() {
        return `
      ALTER TABLE ${this.config.schemaTable} 
        ADD COLUMN run_at TIMESTAMP;
    `;
      }
      getColumnsSql() {
        return `
      SELECT column_name
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE table_name = '${this.config.schemaTable}'
      AND table_schema = '${this.config.database}';
    `;
      }
    };
    module2.exports = MysqlClient;
  }
});

// ../../../node_modules/postgrator/lib/PostgresClient.js
var require_PostgresClient = __commonJS({
  "../../../node_modules/postgrator/lib/PostgresClient.js"(exports, module2) {
    var Client = require_Client();
    var PostgresClient = class extends Client {
      getAddNameSql() {
        return `
      ALTER TABLE ${this.quotedSchemaTable()} 
        ADD COLUMN name TEXT;
    `;
      }
      getAddMd5Sql() {
        return `
      ALTER TABLE ${this.quotedSchemaTable()} 
        ADD COLUMN md5 TEXT;
    `;
      }
      getAddRunAtSql() {
        return `
      ALTER TABLE ${this.quotedSchemaTable()} 
        ADD COLUMN run_at TIMESTAMP WITH TIME ZONE;
    `;
      }
      getColumnsSql() {
        const { config } = this;
        const tableCatalogSql = config.database ? `AND table_catalog = '${config.database}'` : "";
        const schema = config.schemaTable.split(".");
        let tableName = schema[0];
        let schemaSql = "";
        if (schema[1]) {
          tableName = schema[1];
          schemaSql = `AND table_schema = '${schema[0]}'`;
        } else if (config.currentSchema) {
          schemaSql = `AND table_schema = '${config.currentSchema}'`;
        }
        return `
      SELECT column_name
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE table_name = '${tableName}'
      ${tableCatalogSql}
      ${schemaSql};
    `;
      }
    };
    module2.exports = PostgresClient;
  }
});

// ../../../node_modules/postgrator/lib/createClient.js
var require_createClient = __commonJS({
  "../../../node_modules/postgrator/lib/createClient.js"(exports, module2) {
    var MssqlClient = require_MssqlClient();
    var MysqlClient = require_MysqlClient();
    var PostgresClient = require_PostgresClient();
    module2.exports = function createClient(config) {
      if (config.driver === "mysql") {
        return new MysqlClient(config);
      } else if (config.driver === "pg") {
        return new PostgresClient(config);
      } else if (config.driver === "mssql") {
        return new MssqlClient(config);
      } else {
        throw new Error(`db driver '${config.driver}' not supported. Must one of: mysql, mssql, or pg`);
      }
    };
  }
});

// ../../../node_modules/postgrator/lib/utils.js
var require_utils4 = __commonJS({
  "../../../node_modules/postgrator/lib/utils.js"(exports, module2) {
    var fs2 = require("fs");
    var crypto = require("crypto");
    function sortMigrationsAsc(a, b) {
      if (a.version < b.version) {
        return -1;
      }
      if (a.version > b.version) {
        return 1;
      }
      return 0;
    }
    function sortMigrationsDesc(a, b) {
      if (a.version < b.version) {
        return 1;
      }
      if (a.version > b.version) {
        return -1;
      }
      return 0;
    }
    function fileChecksum(filename, lineEnding) {
      const content = fs2.readFileSync(filename, "utf8");
      return checksum(content, lineEnding);
    }
    function checksum(content, lineEnding) {
      if (lineEnding) {
        content = convertLineEnding(content, lineEnding);
      }
      return crypto.createHash("md5").update(content, "utf8").digest("hex");
    }
    function convertLineEnding(content, lineEnding) {
      const lineEndingMap = {
        LF: "\n",
        CR: "\r",
        CRLF: "\r\n"
      };
      if (!lineEndingMap[lineEnding]) {
        throw new Error(`newline must be one of: ${Object.keys(lineEndingMap).join(", ")}`);
      }
      return content.replace(/\r\n|\r|\n/g, lineEndingMap[lineEnding]);
    }
    module2.exports = {
      fileChecksum,
      sortMigrationsAsc,
      sortMigrationsDesc,
      convertLineEnding
    };
  }
});

// ../../../node_modules/postgrator/postgrator.js
var require_postgrator = __commonJS({
  "../../../node_modules/postgrator/postgrator.js"(exports, module2) {
    var EventEmitter = require("events");
    var fs2 = require("fs");
    var path = require("path");
    var promisify = require("util").promisify;
    var glob = require_glob();
    var pGlob = promisify(glob);
    var createClient = require_createClient();
    var {
      fileChecksum,
      sortMigrationsAsc,
      sortMigrationsDesc
    } = require_utils4();
    var DEFAULT_CONFIG = {
      schemaTable: "schemaversion",
      validateChecksums: true
    };
    var Postgrator2 = class extends EventEmitter {
      constructor(config) {
        super();
        this.config = Object.assign({}, DEFAULT_CONFIG, config);
        this.migrations = [];
        this.commonClient = createClient(this.config);
      }
      async getMigrations() {
        const { migrationPattern, newline } = this.config;
        const migrationFiles = await pGlob(migrationPattern);
        let migrations = await Promise.all(migrationFiles.filter((file) => [".sql", ".js"].indexOf(path.extname(file)) >= 0).map(async (filename) => {
          const basename = path.basename(filename);
          const ext = path.extname(basename);
          const basenameNoExt = path.basename(filename, ext);
          let [version2, action, name = ""] = basenameNoExt.split(".");
          version2 = Number(version2);
          if (ext === ".sql") {
            return {
              version: version2,
              action,
              filename,
              name,
              md5: fileChecksum(filename, newline),
              getSql: () => fs2.readFileSync(filename, "utf8")
            };
          }
          if (ext === ".js") {
            const jsModule = require(filename);
            return {
              version: version2,
              action,
              filename,
              name,
              md5: void 0,
              getSql: () => jsModule.generateSql()
            };
          }
        }));
        migrations = migrations.filter((migration) => !isNaN(migration.version));
        const getMigrationKey = (migration) => `${migration.version}:${migration.action}`;
        const migrationKeys = /* @__PURE__ */ new Set();
        migrations.forEach((migration) => {
          const newKey = getMigrationKey(migration);
          if (migrationKeys.has(newKey)) {
            throw new Error(`Two migrations found with version ${migration.version} and action ${migration.action}`);
          }
          migrationKeys.add(newKey);
        });
        this.migrations = migrations;
        return migrations;
      }
      async runQuery(query) {
        return this.commonClient.runQuery(query);
      }
      async getDatabaseVersion() {
        const versionSql = this.commonClient.getDatabaseVersionSql();
        const initialized = await this.commonClient.hasVersionTable();
        if (!initialized) {
          return void 0;
        }
        const result = await this.commonClient.runQuery(versionSql);
        const version2 = result.rows.length > 0 ? result.rows[0].version : 0;
        return parseInt(version2);
      }
      async getMaxVersion() {
        let { migrations } = this;
        if (!this.migrations.length) {
          migrations = await this.getMigrations();
        }
        const versions = migrations.map((migration) => migration.version);
        return Math.max.apply(null, versions);
      }
      async validateMigrations(databaseVersion) {
        const migrations = await this.getMigrations();
        const validateMigrations = migrations.filter((migration) => migration.action === "do" && migration.version > 0 && migration.version <= databaseVersion);
        for (const migration of validateMigrations) {
          this.emit("validation-started", migration);
          const sql = this.commonClient.getMd5Sql(migration);
          const results = await this.commonClient.runQuery(sql);
          const md5 = results.rows && results.rows[0] && results.rows[0].md5;
          console.log({
            "migration.version": migration.version,
            md5,
            "migration.md5": migration.md5
          });
          if (md5 && migration.md5 && md5 !== migration.md5) {
            const msg = `MD5 checksum failed for migration [${migration.version}]`;
            throw new Error(msg);
          }
          this.emit("validation-finished", migration);
        }
        return validateMigrations;
      }
      async runMigrations(migrations = []) {
        const { commonClient } = this;
        const appliedMigrations = [];
        try {
          for (const migration of migrations) {
            this.emit("migration-started", migration);
            const sql = await migration.getSql();
            await commonClient.runQuery(sql);
            await commonClient.runQuery(commonClient.persistActionSql(migration));
            appliedMigrations.push(migration);
            this.emit("migration-finished", migration);
          }
        } catch (error) {
          error.appliedMigrations = appliedMigrations;
          throw error;
        }
        return appliedMigrations;
      }
      getRunnableMigrations(databaseVersion, targetVersion) {
        const { migrations } = this;
        if (targetVersion >= databaseVersion) {
          return migrations.filter((migration) => migration.action === "do" && migration.version > databaseVersion && migration.version <= targetVersion).sort(sortMigrationsAsc);
        }
        if (targetVersion < databaseVersion) {
          return migrations.filter((migration) => migration.action === "undo" && migration.version <= databaseVersion && migration.version > targetVersion).sort(sortMigrationsDesc);
        }
        return [];
      }
      async migrate(target = "") {
        const { commonClient, config } = this;
        const data = {};
        try {
          await commonClient.ensureTable();
          await this.getMigrations();
          let targetVersion;
          const cleaned = target.toLowerCase().trim();
          if (cleaned === "max" || cleaned === "") {
            targetVersion = await this.getMaxVersion();
          } else {
            targetVersion = Number(target);
          }
          data.targetVersion = targetVersion;
          if (target === void 0) {
            throw new Error("targetVersion undefined");
          }
          const databaseVersion = await this.getDatabaseVersion();
          data.databaseVersion = databaseVersion;
          if (config.validateChecksums && data.targetVersion >= databaseVersion) {
            await this.validateMigrations(databaseVersion);
          }
          const runnableMigrations = await this.getRunnableMigrations(data.databaseVersion, data.targetVersion);
          const migrations = await this.runMigrations(runnableMigrations);
          return migrations;
        } catch (error) {
          if (!error.appliedMigrations) {
            error.appliedMigrations = [];
          }
          throw error;
        }
      }
    };
    module2.exports = Postgrator2;
  }
});

// ../../services/src/LurchDB.ts
var pg = __toESM(require("pg"));

// ../../services/src/queries/AddressQueries.ts
var AddressQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  searchTypeahead = async (search, exclusions, limit) => {
    const query = `
            WITH addresses AS (
              SELECT DISTINCT address
              FROM land_registry.titles
              WHERE
                NOT address = ANY($1)
                AND (
                  ${search.map((_3, index) => `typeahead_terms_address @@ plainto_tsquery('simple', $${index + 3})`).join(" OR ")}
                )
            ) 
            SELECT address, count(*) OVER() as "totalResults"
            FROM addresses
            LIMIT $2
        `;
    const result = await this.pool.query(query, [exclusions, limit, ...search]);
    if (result.rows.length > 0) {
      return {
        results: result.rows.map((r) => ({
          query: r.address,
          sources: ["land_registry::cod"]
        })),
        totalResults: parseInt(result.rows[0].totalResults)
      };
    }
    return { results: [], totalResults: 0 };
  };
  verifyAddresses = async (addresses) => {
    const query = `
      SELECT DISTINCT address
      FROM land_registry.titles
      WHERE address = ANY($1)
    `;
    const result = await this.pool.query(query, [addresses]);
    const valid = result.rows.map((r) => r.address);
    const invalid = addresses.filter((c) => !valid.includes(c));
    return {
      valid,
      invalid
    };
  };
};

// ../../common/src/helpers.ts
var import_moment2 = __toESM(require_moment());

// ../../common/src/model/forms/PscQuery.ts
var import_moment = __toESM(require_moment());

// ../../common/src/model/sources.ts
var landRegistryCod = {
  key: "land_registry::cod",
  name: "Land Registry: Corporate Ownership",
  acronym: "LR",
  color: "#D4E038"
};
var companiesHouseCompanies = {
  key: "companies_house::companies",
  name: "Companies House: Company Data",
  acronym: "CH",
  color: "#1D70B8"
};
var companiesHousePscs = {
  key: "companies_house::pscs",
  name: "Companies House: People with Significant Control",
  acronym: "CH",
  color: "#1D70B8"
};
var electoralCommissionDonations = {
  key: "electoral_commission::donations",
  name: "Electoral Commission: Donations",
  acronym: "EC",
  color: "#CC0066"
};
var sourceMap = {
  company: {
    width: "26px",
    sources: [
      landRegistryCod,
      companiesHouseCompanies,
      companiesHousePscs,
      electoralCommissionDonations
    ]
  },
  "land-title": { width: "26px", sources: [landRegistryCod] },
  address: { width: "26px", sources: [landRegistryCod] },
  person: {
    width: "26px",
    sources: [companiesHousePscs, electoralCommissionDonations]
  },
  donation: { width: "26px", sources: [electoralCommissionDonations] },
  subsidiary: { width: "26px", sources: [companiesHousePscs] },
  "parliament-member": {
    width: "40px",
    sources: [
      {
        key: "Conservative",
        name: "Conservative",
        acronym: "Con",
        color: "#0087DC"
      },
      {
        key: "Independent Conservative",
        name: "Independent Conservative",
        acronym: "Con",
        color: "#0087DC"
      },
      {
        key: "Labour",
        name: "Labour",
        acronym: "Lab",
        color: "#DC241F"
      },
      {
        key: "Labour (Co-op)",
        name: "Labour (Co-op)",
        acronym: "Lab",
        color: "#DC241F"
      },
      {
        key: "Independent Labour",
        name: "Independent Labour",
        acronym: "Lab",
        color: "#DC241F"
      },
      {
        key: "Liberal Democrat",
        name: "Liberal Democrat",
        acronym: "LD",
        color: "#FDBB30"
      },
      {
        key: "Scottish National Party",
        name: "Scottish National Party",
        acronym: "SNP",
        color: "#FFFF00"
      },
      {
        key: "Alba Party",
        name: "Alba Party",
        acronym: "ALB",
        color: "#005EB8"
      },
      {
        key: "Green Party",
        name: "Green Party",
        acronym: "GRE",
        color: "#6AB023"
      },
      {
        key: "Sinn F\xE9in",
        name: "Sinn F\xE9in",
        acronym: "SF",
        color: "#326760"
      },
      {
        key: "Democratic Unionist Party",
        name: "Democratic Unionist Party",
        acronym: "DUP",
        color: "#D46A4C"
      },
      {
        key: "Plaid Cymru",
        name: "Plaid Cymru",
        acronym: "PC",
        color: "#808080"
      },
      {
        key: "Independent",
        name: "Independent",
        acronym: "Ind",
        color: "#DCDCDC"
      },
      {
        key: "Ulster Unionist Party",
        name: "Ulster Unionist Party",
        acronym: "UUP",
        color: "#48A5EE"
      },
      {
        key: "Social Democratic & Labour Party",
        name: "Social Democratic & Labour Party",
        acronym: "SDLP",
        color: "#808080"
      },
      {
        key: "The Independent Group for Change",
        name: "The Independent Group for Change",
        acronym: "TIG",
        color: "#808080"
      },
      {
        key: "Alliance",
        name: "Alliance",
        acronym: "ALL",
        color: "#808080"
      },
      {
        key: "Speaker",
        name: "Speaker",
        acronym: "SPE",
        color: "#808080"
      },
      {
        key: "Respect",
        name: "Respect",
        acronym: "RES",
        color: "#46801c"
      },
      {
        key: "UK Independence Party",
        name: "UK Independence Party",
        acronym: "UKIP",
        color: "#808080"
      },
      {
        key: "United Kingdom Unionist",
        name: "United Kingdom Unionist",
        acronym: "UKU",
        color: "#808080"
      },
      {
        key: "Anti H Block",
        name: "Anti H Block",
        acronym: "AHB",
        color: "#808080"
      },
      { key: "Bishops", name: "Bishops", acronym: "BP", color: "#808080" },
      {
        key: "Conservative Independent",
        name: "Conservative Independent",
        acronym: "CONI",
        color: "#DDEEFF"
      },
      {
        key: "Crossbench",
        name: "Crossbench",
        acronym: "XB",
        color: "grey"
      },
      {
        key: "Independent SDP",
        name: "Independent SDP",
        acronym: "INDSDP",
        color: "#D9B3FF"
      },
      {
        key: "Independent Social Democrat",
        name: "Independent Social Democrat",
        acronym: "INDSD",
        color: "#D9B3FF"
      },
      {
        key: "Independent Socialist",
        name: "Independent Socialist",
        acronym: "INDSOC",
        color: "red"
      },
      {
        key: "Independent Ulster Unionist",
        name: "Independent Ulster Unionist",
        acronym: "INDUU",
        color: "#48A5EE "
      },
      { key: "Liberal", name: "Liberal", acronym: "LIB", color: "#FFD700" },
      {
        key: "Lord Speaker",
        name: "Lord Speaker",
        acronym: "SPEAKER",
        color: "white"
      },
      {
        key: "National Liberal & Conservative",
        name: "NLC",
        acronym: "",
        color: "#AFEEEE"
      },
      {
        key: "Non-affiliated",
        name: "Non-affiliated",
        acronym: "NONAFF",
        color: "#808080"
      },
      {
        key: "Opposition Unity",
        name: "Opposition Unity",
        acronym: "OPPU",
        color: "#808080"
      },
      { key: "Other", name: "Other", acronym: "OTHER", color: "#808080" },
      {
        key: "Referendum",
        name: "Referendum",
        acronym: "REF",
        color: "#bf475c "
      },
      {
        key: "Social Democratic Party",
        name: "Social Democratic Party",
        acronym: "SDP",
        color: "#D25469"
      },
      {
        key: "Ulster Popular Unionist Party",
        name: "Ulster Popular Unionist Party",
        acronym: "UPUP",
        color: "#ffdead"
      },
      {
        key: "United Ulster Unionist Party",
        name: "United Ulster Unionist Party",
        acronym: "UUUP",
        color: "#ff8c00"
      },
      {
        key: "The Reclaim Party",
        name: "The Reclaim Party",
        acronym: "RECLAIM",
        color: "#CB151A"
      }
    ]
  },
  "beneficial-owner": {
    width: "",
    sources: []
  },
  "ownership-graph": {
    width: "",
    sources: []
  }
};
var sourceInfoByKey = Object.fromEntries(Object.values(sourceMap).map((o) => o.sources).flat().map((s) => [s.key, s]));

// ../../common/src/model/PriceFormat.ts
var priceFormat = new Intl.NumberFormat("en-GB", {
  style: "currency",
  currency: "GBP",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
});

// ../../services/src/queries/AppQueries.ts
var AppQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  insertUsage = (user, event) => {
    const query = `
      INSERT INTO usage_logs (email, performed_on, event, count)
      VALUES ($1, CURRENT_DATE, $2, 1)
      ON CONFLICT (performed_on, email, event)
      DO UPDATE SET count = usage_logs.count + 1;
      `;
    return this.pool.query(query, [user, event]);
  };
  getLockedViews = async () => {
    const locks = await this.pool.query(`
      SELECT pg_class.relname AS view, COUNT(pg_locks.pid) > 0 AS "isLocked"
      FROM pg_class
      LEFT OUTER JOIN pg_locks ON pg_locks.relation = pg_class.oid
      WHERE pg_locks.mode = 'ACCESS EXCLUSIVE'
        AND (
          pg_class.relname = '${"company_name_typeahead_terms" /* Company */}' OR
          pg_class.relname = '${"person_name_typeahead_terms" /* Person */}'
        )
      GROUP BY 1
    `);
    return Object.fromEntries(locks.rows.map((r) => {
      switch (r.view) {
        case "company_name_typeahead_terms" /* Company */:
          return ["company", r.isLocked];
        case "person_name_typeahead_terms" /* Person */:
          return ["person", r.isLocked];
        default:
          console.error("Unhandled view name: " + r.view);
          return ["unknown-typeahead-view", false];
      }
    }));
  };
};

// ../../services/src/queries/LandTitleQueries.ts
var import_assert = require("assert");
var import_lodash = __toESM(require_lodash());
var LandTitleQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  fetchOwnershipTimespansForTitle = async (titleNumber) => {
    const queryText = `
      WITH latest_snapshot AS (
        SELECT max(date) AS date FROM cod_snapshot_manifest
      ),
      manifest AS (
        SELECT
          filename,
          date as current_snapshot_date,
          lead(date, 1) OVER (
              PARTITION BY left(filename, 4)
              ORDER BY DATE ASC
          ) as next_snapshot_date,
          CASE WHEN filename LIKE 'CCOD%' THEN 'CCOD' ELSE 'OCOD' END as country
        FROM cod_snapshot_manifest
      )
      SELECT
        -- Title
        titles.address AS "titleAddress",
        titles.district AS "titleDistrict",
        titles.county AS "titleCounty",
        titles.region AS "titleRegion",
        titles.postcode AS "titlePostcode",
        -- Ownership timespan fields
        land_ownership_timespans.tenure AS "ownershipTimespanTenure",
        land_ownership_timespans.price_paid AS "ownershipTimespanPricePaid",
        land_ownership_timespans.date_proprietor_added AS "ownershipTimespanDateProprietorAdded",
        land_ownership_timespans.has_additional_proprietors AS "ownershipTimespanHasAdditionalProprietors",
        land_ownership_timespans.start_snapshot AS "ownershipTimespanStartSnapshot",
        land_ownership_timespans.end_snapshot AS "ownershipTimespanEndSnapshot",
        -- Proprietor
        proprietors.name AS "proprietorName",
        proprietors.company_registration AS "proprietorCompanyRegistration",
        proprietors.cleaned_company_registration AS "cleanedProprietorCompanyRegistration",
        proprietors.address AS "proprietorAddress",
        proprietor_category.name AS "proprietorCategory",
        proprietor_country_incorporated.name AS "proprietorCountry",
        latest_snapshot.date AS "latestSnapshot",
        manifest.next_snapshot_date AS "nextSnapshotInManifest",
        -- User-provided data
        title_user_provided_data.id AS "updId",
        type AS "updType",
        relevant_date AS "updRelevantDate",
        description AS "updDescription",
        uploaded_at AS "updUploadedAt",
        uploaded_by AS "updUploadedBy"
      FROM titles
      INNER JOIN land_ownership_timespans ON titles.id = land_ownership_timespans.title_id
      INNER JOIN proprietors ON land_ownership_timespans.proprietor_id = proprietors.id
      LEFT OUTER JOIN proprietor_category ON proprietors.category_id = proprietor_category.id
      LEFT OUTER JOIN proprietor_country_incorporated ON proprietors.country_incorporated_id = proprietor_country_incorporated.id
      LEFT OUTER JOIN title_user_provided_data ON titles.title_number = title_user_provided_data.title_number
      CROSS JOIN latest_snapshot
      INNER JOIN manifest
        ON manifest.current_snapshot_date = land_ownership_timespans.end_snapshot
        AND (manifest.country =
          CASE proprietor_country_incorporated.name
            WHEN 'UK' THEN 'CCOD'
            ELSE 'OCOD'
          END
        )
      WHERE titles.title_number = $1
    `;
    const result = await this.pool.query(queryText, [titleNumber]);
    const { latestSnapshot } = result.rows[0];
    const locations = import_lodash.default.uniqWith(result.rows.map((row) => ({
      address: row.titleAddress,
      district: row.titleDistrict,
      county: row.titleCounty,
      region: row.titleRegion,
      postcode: row.titlePostcode
    })), import_lodash.default.isEqual);
    const ownershipTimespans = import_lodash.default.uniqWith(result.rows.map((row) => ({
      proprietorName: row.proprietorName,
      proprietorCompanyRegistration: row.proprietorCompanyRegistration,
      proprietorCleanedCompanyRegistration: row.proprietorCleanedCompanyRegistration,
      proprietorAddress: row.proprietorAddress,
      proprietorCategory: row.proprietorCategory,
      proprietorCountry: row.proprietorCountry,
      tenure: row.ownershipTimespanTenure,
      pricePaid: row.ownershipTimespanPricePaid,
      dateProprietorAdded: row.ownershipTimespanDateProprietorAdded,
      hasAdditionalProprietors: row.ownershipTimespanHasAdditionalProprietors,
      hasAdditionalAddresses: row.ownershipTimespanHasAdditionalAddresses,
      startSnapshot: row.ownershipTimespanStartSnapshot,
      endSnapshot: row.ownershipTimespanEndSnapshot,
      nextSnapshotInManifest: row.nextSnapshotInManifest
    })), import_lodash.default.isEqual);
    const userProvidedFiles = import_lodash.default.uniqBy(result.rows.map((row) => ({
      id: row.updId,
      type: row.updType,
      relevantDate: row.updRelevantDate,
      description: row.updDescription,
      uploadedAt: row.updUploadedAt,
      uploadedBy: row.updUploadedBy
    })), "id").filter((upf) => upf.id !== null);
    return {
      latestSnapshot,
      titleNumber,
      locations,
      ownershipTimespans,
      userProvidedFiles
    };
  };
  fetchLandTitlesFromPerson = async (queries, limited) => {
    const result = await this.pool.query(`
    WITH snapshots AS (
      SELECT max(date) as max_date FROM cod_snapshot_manifest
    ),
    queries AS (
      SELECT
        unnest($1::TEXT[]) AS "name",
        unnest($2::INT[]) AS "dob_year",
        unnest($3::INT[]) AS "dob_month"
    )
    SELECT
      titles.title_number AS "titleNumber",
      array_agg(titles.address) AS "titleAddresses",
      array_agg(titles.district) AS "titleDistricts",
      array_agg(titles.county) AS "titleCounties",
      array_agg(titles.region) AS "titleRegions",
      array_agg(proprietors.name) AS "proprietorName",
      array_agg(proprietors.address) AS "proprietorAddress",
      array_agg(company_registration) AS "companyRegistration",
      array_agg(proprietor_country_incorporated.name) AS "countryIncorporated",
      array_agg(land_ownership_timespans.price_paid) AS "pricePaid",
      array_agg(land_ownership_timespans.date_proprietor_added) AS "dateProprietorAdded",
      array_agg(CASE
        WHEN snapshots.max_date=land_ownership_timespans.end_snapshot THEN 'Current'
        ELSE 'Historical'
      END) as "recency",
      array_agg(land_ownership_timespans.start_snapshot) AS "startSnapshot",
      array_agg(land_ownership_timespans.end_snapshot) AS "endSnapshot",
      array_agg(land_ownership_timespans.tenure)::text[] AS "tenure",
      array_agg(title_user_provided_data.id) AS "updId"
    FROM titles
    JOIN land_ownership_timespans
      ON land_ownership_timespans.title_id = titles.id
    JOIN proprietors
      ON land_ownership_timespans.proprietor_id = proprietors.id
    LEFT OUTER JOIN proprietor_country_incorporated
      ON proprietor_country_incorporated.id = proprietors.country_incorporated_id
    LEFT JOIN title_user_provided_data
      ON title_user_provided_data.title_number = titles.title_number
    CROSS JOIN snapshots
    WHERE proprietors.cleaned_company_registration IN (
      SELECT company_id
      FROM pscs
      INNER JOIN queries ON
         pscs.name = queries.name AND
         pscs.dob_year = queries.dob_year AND
         pscs.dob_month = queries.dob_month
    )
    GROUP BY titles.title_number
    ${limited ? "LIMIT 1000" : ""}
    `, [
      queries.map((q) => q.name),
      queries.map((q) => q.dobYear),
      queries.map((q) => q.dobMonth)
    ]);
    return result.rows.map(this.transformGroupedLandTitlesForSearchResults);
  };
  fetchLandTitlesFromTitlesTable = (field) => async (queries, limited) => {
    const queryText = `
    WITH snapshots as (
      SELECT max(date) as max_date FROM cod_snapshot_manifest
    )
    SELECT
      titles.title_number AS "titleNumber",
      array_agg(titles.address) AS "titleAddresses",
      array_agg(titles.district) AS "titleDistricts",
      array_agg(titles.county) AS "titleCounties",
      array_agg(titles.region) AS "titleRegions",
      array_agg(proprietors.name) AS "proprietorName",
      array_agg(proprietors.address) AS "proprietorAddress",
      array_agg(company_registration) AS "companyRegistration",
      array_agg(cleaned_company_registration) AS "cleanedCompanyRegistration",
      array_agg(proprietor_country_incorporated.name) AS "countryIncorporated",
      array_agg(land_ownership_timespans.price_paid) AS "pricePaid",
      array_agg(land_ownership_timespans.date_proprietor_added) AS "dateProprietorAdded",
      array_agg(CASE
        WHEN snapshots.max_date=land_ownership_timespans.end_snapshot THEN 'Current'
        ELSE 'Historical'
      END) as "recency",
      array_agg(land_ownership_timespans.start_snapshot) AS "startSnapshot",
      array_agg(land_ownership_timespans.end_snapshot) AS "endSnapshot",
      array_agg(land_ownership_timespans.tenure)::text[] AS "tenure",
      array_agg(title_user_provided_data.id) AS "updId"
    FROM titles
    JOIN land_ownership_timespans
      ON land_ownership_timespans.title_id = titles.id
    JOIN proprietors
      ON land_ownership_timespans.proprietor_id = proprietors.id
    LEFT OUTER JOIN proprietor_country_incorporated
      ON proprietor_country_incorporated.id = proprietors.country_incorporated_id
    LEFT JOIN title_user_provided_data
      ON title_user_provided_data.title_number = titles.title_number
    CROSS JOIN snapshots
    WHERE
        ${queries.map((_3, i) => `titles.${field} = $${i + 1}`).join(" OR ")}
    GROUP BY titles.title_number
    ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(queryText, queries);
    return result.rows.map(this.transformGroupedLandTitlesForSearchResults);
  };
  fetchLandTitlesByCompanyName = async (companyNames, limited) => {
    const queryText = `
    WITH snapshots as (
      SELECT max(date) as max_date FROM cod_snapshot_manifest
    )
    SELECT
      titles.title_number AS "titleNumber",
      array_agg(titles.address) AS "titleAddresses",
      array_agg(titles.district) AS "titleDistricts",
      array_agg(titles.county) AS "titleCounties",
      array_agg(titles.region) AS "titleRegions",
      array_agg(proprietors.name) AS "proprietorName",
      array_agg(proprietors.address) AS "proprietorAddress",
      array_agg(company_registration) AS "companyRegistration",
      array_agg(cleaned_company_registration) AS "cleanedCompanyRegistration",
      array_agg(proprietor_country_incorporated.name) AS "countryIncorporated",
      array_agg(land_ownership_timespans.price_paid) AS "pricePaid",
      array_agg(land_ownership_timespans.date_proprietor_added) AS "dateProprietorAdded",
      array_agg(CASE
        WHEN snapshots.max_date=land_ownership_timespans.end_snapshot THEN 'Current'
        ELSE 'Historical'
      END) as "recency",
      array_agg(land_ownership_timespans.start_snapshot) AS "startSnapshot",
      array_agg(land_ownership_timespans.end_snapshot) AS "endSnapshot",
      array_agg(land_ownership_timespans.tenure)::text[] AS "tenure",
      array_agg(title_user_provided_data.id) AS "updId"
    FROM proprietors
    LEFT OUTER JOIN proprietor_country_incorporated
      ON proprietor_country_incorporated.id = proprietors.country_incorporated_id
    JOIN land_ownership_timespans
      ON land_ownership_timespans.proprietor_id = proprietors.id
    JOIN titles
      ON land_ownership_timespans.title_id = titles.id
    LEFT JOIN title_user_provided_data
      ON title_user_provided_data.title_number = titles.title_number
    CROSS JOIN snapshots
    WHERE
        ${companyNames.map((c, i) => `LOWER(proprietors.name) = LOWER($${i + 1})`).join(" OR ")}
    GROUP BY titles.title_number
    ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(queryText, companyNames);
    return result.rows.map(this.transformGroupedLandTitlesForSearchResults);
  };
  fetchLandTitleEntityData = async (entity, nonemptyQueries, limited) => {
    const entityQueries = {
      company: this.fetchLandTitlesByCompanyName,
      address: this.fetchLandTitlesFromTitlesTable("address"),
      "land-title": this.fetchLandTitlesFromTitlesTable("title_number"),
      person: this.fetchLandTitlesFromPerson
    };
    return entityQueries[entity](nonemptyQueries, limited);
  };
  transformGroupedLandTitlesForSearchResults = (row) => {
    const ownershipArrays = { ...row };
    delete ownershipArrays.titleNumber;
    delete ownershipArrays.titleAddresses;
    const unique_array_lengths = import_lodash.default.uniq(Object.keys(ownershipArrays).map((a) => ownershipArrays[a].length));
    const number_of_timespans = unique_array_lengths[0];
    (0, import_assert.strict)(unique_array_lengths.length === 1, "Inequal array lengths in title ownership aggregation query");
    const ownershipTimespans = [...Array(number_of_timespans).keys()].map((index) => {
      const timespan = {};
      Object.keys(ownershipArrays).map((field) => {
        timespan[field] = ownershipArrays[field][index];
      });
      return timespan;
    });
    const userProvidedFilesCount = import_lodash.default.uniq(row.updId).filter(Boolean).length;
    return {
      titleNumber: row.titleNumber,
      titleAddresses: row.titleAddresses,
      titleCounties: row.titleCounties,
      titleRegions: row.titleRegions,
      titleDistricts: row.titleDistricts,
      ownershipTimespans,
      userProvidedFilesCount
    };
  };
  titleNumberSearchTypeahead = async (search, exclusions, limit) => {
    const wildcardSearch = search.map((s) => s + "%");
    const query = `
            WITH land_titles AS (
              SELECT DISTINCT title_number
              FROM land_registry.titles
              WHERE title_number LIKE ANY($1)
                  AND NOT title_number = ANY($2)
            ) 
            SELECT title_number AS "titleNumber", count(*) OVER () AS "totalResults"
            FROM land_titles
            LIMIT $3
        `;
    const result = await this.pool.query(query, [
      wildcardSearch,
      exclusions,
      limit
    ]);
    if (result.rows.length > 0) {
      return {
        results: result.rows.map((r) => ({
          query: r.titleNumber,
          sources: ["land_registry::cod"]
        })),
        totalResults: parseInt(result.rows[0].totalResults)
      };
    }
    return {
      results: [],
      totalResults: 0
    };
  };
  verifyTitleNumber = async (addresses) => {
    const query = `
      SELECT DISTINCT title_number AS "titleNumber"
      FROM land_registry.titles
      WHERE title_number = ANY($1)
    `;
    const result = await this.pool.query(query, [addresses]);
    const valid = result.rows.map((r) => r.titleNumber);
    const invalid = addresses.filter((c) => !valid.includes(c));
    return {
      valid,
      invalid
    };
  };
  addUserProvidedData = async (data) => {
    const query = `INSERT INTO title_user_provided_data
    (title_number, type, relevant_date, description, file_uri, uploaded_at, uploaded_by)
    VALUES ($1, $2, $3, $4, $5, $6, $7)`;
    const result = await this.pool.query(query, [
      data.titleNumber,
      data.type,
      data.relevantDate,
      data.description,
      data.fileUri,
      data.uploadedAt,
      data.uploadedBy
    ]);
    return result.rowCount;
  };
  getS3UriFromUserProvidedDataId = async (userProvidedDataId) => {
    const query = `SELECT file_uri FROM title_user_provided_data WHERE id = $1`;
    const result = await this.pool.query(query, [userProvidedDataId]);
    if (result.rowCount === 0) {
      return null;
    }
    return result.rows[0].file_uri;
  };
};

// ../../services/src/queries/ManifestQueries.ts
var ManifestQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  getIngestedCompaniesManifest = async () => {
    const query = `SELECT * FROM companies_house.companies_snapshot_manifest`;
    const result = await this.pool.query(query);
    return result.rows;
  };
  getIngestedLandRegistryManifest = async () => {
    const query = `SELECT * FROM land_registry.cod_snapshot_manifest`;
    const result = await this.pool.query(query);
    return result.rows;
  };
};

// ../../services/src/queries/PersonQueries.ts
var import_lodash2 = __toESM(require_lodash());
var import_pg_format = __toESM(require("pg-format"));
var import_pg_format2 = __toESM(require("pg-format"));
var PersonQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  searchNameTypeahead = async (search, exclusions, disabledSources, limit) => {
    const query = `
      SELECT
        name, dob_year, dob_month, dob_day,
        JSONB_AGG(source) AS sources,
        COUNT(*) OVER() as "totalResults"
      FROM person_name_typeahead_terms
      WHERE
        NOT CONCAT(name, dob_year, dob_month, dob_day) = ANY($1)
        AND NOT (source = ANY($2))
        AND (
          ${search.map((_3, index) => `typeahead_terms_name @@ plainto_tsquery('simple', $${index + 4})`).join(" OR ")}
        )
      GROUP BY 1, 2, 3, 4
      LIMIT $3
    `;
    const result = await this.pool.query(query, [
      exclusions.map((e) => `${e.name}${e.dobYear ?? ""}${e.dobMonth ?? ""}${e.dobDay ?? ""}`),
      disabledSources,
      limit,
      ...search
    ]);
    if (result.rows.length > 0) {
      return {
        results: result.rows.map((r) => ({
          query: {
            name: r.name,
            dobYear: r.dob_year,
            dobMonth: r.dob_month,
            dobDay: r.dob_day
          },
          sources: r.sources
        })),
        totalResults: parseInt(result.rows[0].totalResults)
      };
    }
    return { results: [], totalResults: 0 };
  };
  verifyNames = async (queries) => {
    const whereClause = queries.map((q) => {
      if (q.dobYear === null && q.dobMonth === null && q.dobDay === null) {
        return (0, import_pg_format2.default)("(name = %L AND dob_year IS NULL AND dob_month IS NULL AND dob_day IS NULL)", q.name);
      }
      if (q.dobYear !== null && q.dobMonth === null && q.dobDay === null) {
        return (0, import_pg_format2.default)("(name = %L AND dob_year = %L AND dob_month IS NULL AND dob_day IS NULL)", q.name, q.dobYear);
      }
      if (q.dobYear !== null && q.dobMonth !== null && q.dobDay === null) {
        return (0, import_pg_format2.default)("(name = %L AND dob_year = %L AND dob_month = %L AND dob_day IS NULL)", q.name, q.dobYear, q.dobMonth);
      }
      return (0, import_pg_format2.default)("(name = %L AND dob_year = %L AND dob_month = %L AND dob_day = %L)", q.name, q.dobYear, q.dobMonth, q.dobDay);
    }).join(" OR ");
    const query = `
      SELECT DISTINCT
        name,
        dob_year  AS "dobYear",
        dob_month AS "dobMonth",
        dob_day AS "dobDay"
      FROM person_name_typeahead_terms
      WHERE ${whereClause}
    `;
    const result = await this.pool.query(query);
    const valid = result.rows.map((r) => ({
      name: r.name,
      dobYear: r.dobYear,
      dobMonth: r.dobMonth,
      dobDay: r.dobDay
    }));
    const invalid = queries.filter((c) => !valid.some((v) => import_lodash2.default.isEqual(v, c)));
    return {
      valid,
      invalid
    };
  };
  fetchCompaniesByPerson = async (queries, limited = false) => {
    const query = `
    WITH queries AS (
      SELECT
        unnest($1::TEXT[]) AS "name",
        unnest($2::INT[]) AS "dob_year",
        unnest($3::INT[]) AS "dob_month"
    ), latest_snapshot AS (
      SELECT max(date) AS date FROM companies_snapshot_manifest
    )
      SELECT
        -- We don't expect the company id to ever be null in this case,
        -- but we have this logic for consistency with queries where companies may not have
        -- a company id because they're overseas companies from the Land Registry.
        COALESCE(pscs.company_id, company_names.name) as "companyIdentifier",
        pscs.company_id as "companyNumber",
        company_names.name as "companyName",
        company_information.incorporation_date as "incorporationDate",
        company_information.company_status as "companyStatus",
        company_information.company_category as "companyCategory",
        company_information.sic_codes as "sicCodes",
        ARRAY_AGG(pscs.registration_number ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "pscCompanyNumbers",
        ARRAY_AGG(pscs.name ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "pscNames",
        ARRAY_AGG(pscs.ceased_on ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "ceasedOn"
      FROM pscs
      CROSS JOIN latest_snapshot
      LEFT JOIN companies ON companies.company_number = pscs.company_id
      LEFT JOIN company_names
        ON companies.company_number = company_names.company_number
        AND company_names.end_date = 'current'
      LEFT JOIN company_information
        ON company_information.company_number = company_names.company_number
        AND company_information.end_snapshot = latest_snapshot.date
      WHERE pscs.company_id IN (
        SELECT company_id
        FROM pscs
        INNER JOIN queries ON
           pscs.name = queries.name AND
           pscs.dob_year = queries.dob_year AND
           pscs.dob_month = queries.dob_month
      )
      AND pscs.name IS NOT NULL
      GROUP BY 1, 2, 3, 4, 5, 6, 7
      ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(query, [
      queries.map((q) => q.name),
      queries.map((q) => q.dobYear),
      queries.map((q) => q.dobMonth)
    ]);
    return result.rows;
  };
  fetchLinkedPscsByPerson = async (queries, limited) => {
    const query = `
    WITH queries AS (
      SELECT
        unnest($1::TEXT[]) AS "name",
        unnest($2::INT[]) AS "dob_year",
        unnest($3::INT[]) AS "dob_month"
    ),
    companies_with_queried_pscs AS (
      SELECT company_id, pscs.name, pscs.ceased_on, pscs.dob_year, pscs.dob_month
      FROM pscs
      INNER JOIN queries ON
        pscs.name = queries.name AND
        pscs.dob_year = queries.dob_year AND
        pscs.dob_month = queries.dob_month
    )
    SELECT
      pscs.id as "pscId",
      pscs.name as "pscName",
      pscs.dob_month as "pscDobMonth",
      pscs.dob_year as "pscDobYear",
      pscs.kind as "pscKind",
      pscs.country_registered as "pscCountryRegistered",
      pscs.registration_number as "pscRegistrationNumber",
      ARRAY_AGG(distinct companies_with_queried_pscs.name) as "linkedTo",
      ARRAY_AGG(company_names.name ORDER BY company_names.company_number) as "linkedVia",
      ARRAY_AGG(companies_with_queried_pscs.company_id ORDER BY companies_with_queried_pscs.company_id) as "linkedViaIds"
    FROM pscs
    INNER JOIN companies_with_queried_pscs
      ON companies_with_queried_pscs.company_id = pscs.company_id
      AND NOT (
        pscs.name = companies_with_queried_pscs.name AND
        pscs.dob_year = companies_with_queried_pscs.dob_year AND
        pscs.dob_month = companies_with_queried_pscs.dob_month
      )
    INNER JOIN company_names
      ON companies_with_queried_pscs.company_id = company_names.company_number
      AND company_names.end_date = 'current'
    GROUP BY 1, 2, 3, 4, 5, 6
    ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(query, [
      queries.map((q) => q.name),
      queries.map((q) => q.dobYear),
      queries.map((q) => q.dobMonth)
    ]);
    return result.rows;
  };
  fetchBeneficialOwners = async (isSanctioned) => {
    const filters = isSanctioned ? (0, import_pg_format.default)(`AND is_sanctioned = %L`, isSanctioned.toString()) : "";
    const query = `
      SELECT overseas_entities.name as "overseasEntityName",
      overseas_entities.last_updated as "dateAdded",
      pscs.company_id as "overseasEntityNumber",
      pscs.name as "pscName",
      pscs.is_sanctioned as "isSanctioned",
      pscs.kind as "pscKind",
      pscs.dob_year as "pscDobYear",
      pscs.dob_month as "pscDobMonth",
      pscs.nationality as "pscNationality",
      pscs.legal_authority as "pscLegalAuthority"
      FROM pscs
      LEFT JOIN overseas_entities
      ON pscs.company_id = overseas_entities.overseas_entity_number
      WHERE kind IN (
          '${"individual-beneficial-owner" /* Individual */}',
          '${"corporate-entity-beneficial-owner" /* CorporateEntity */}',
          '${"legal-person-beneficial-owner" /* LegalPerson */}',
          '${"super-secure-beneficial-owner" /* SuperSecure */}'
        )
        ${filters}`;
    const result = await this.pool.query(query);
    return result.rows;
  };
};

// ../../services/src/queries/ShareQueries.ts
var import_assert2 = require("assert");
var ShareQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  insertShareLink = async (uri) => {
    const query = `
        INSERT INTO share_links (id, uri) 
        VALUES (md5($1), $1) 
        ON CONFLICT (id) DO UPDATE SET uri = EXCLUDED.uri 
        RETURNING id`;
    const results = await this.pool.query(query, [uri]);
    (0, import_assert2.strict)(results.rows.length === 1);
    return results.rows[0].id;
  };
  fetchShareLink = async (id) => {
    const query = `UPDATE share_links SET last_used_at = NOW() WHERE id = $1 RETURNING uri`;
    const results = await this.pool.query(query, [id]);
    (0, import_assert2.strict)(results.rows.length === 1);
    return results.rows[0].uri;
  };
};

// ../../services/src/queries/CompanyQueries.ts
var CompanyQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  fetchSubsidiariesByCompany = async (queries, limited = false) => {
    const query = `
        WITH latest_snapshot AS (
            SELECT max(date) AS date
            FROM companies_snapshot_manifest
        ), company_ids_and_names AS (
          SELECT
            company_number AS search_company_number,
            name AS search_company_name
          FROM company_names
          WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[])
          UNION DISTINCT
          SELECT
            cleaned_company_registration AS search_company_number,
            name AS search_company_name
          FROM proprietors
          WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[])
        ), paths AS (
          SELECT descendant_id, cin.search_company_number, cin.search_company_name, min(path_length) AS path_length
          FROM psc_paths
          join company_ids_and_names cin
          ON ancestor_id = cin.search_company_number
          GROUP BY 1, 2, 3
        )
        SELECT
             pscs.company_id                                                                     as "companyNumber",
             p.search_company_number														 	                               as "searchCompanyNumber",
             p.search_company_name														  		                             as "searchCompanyName",
             -- We don't expect the company id to ever be null in this case,
             -- but we have this logic for consistency with queries where companies may not have
             -- a company id because they're overseas companies from the Land Registry.
             pscs.company_id                                                                      as "companyIdentifier",
             company_names.name                                                                   as "companyName",
             company_information.incorporation_date                                               as "incorporationDate",
             company_information.company_status                                                   as "companyStatus",
             company_information.company_category                                                 as "companyCategory",
             company_information.sic_codes                                                        as "sicCodes",
             path_length - 1                                                                      as "tier",
             ARRAY_AGG(pscs.registration_number ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "pscCompanyNumbers",
             ARRAY_AGG(pscs.name ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC)      as "pscNames",
             ARRAY_AGG(pscs.ceased_on ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "ceasedOn"
        FROM pscs
        JOIN paths p ON p.descendant_id = pscs.company_id
        CROSS JOIN latest_snapshot
        LEFT JOIN companies ON companies.company_number = pscs.company_id
        LEFT JOIN company_names
            ON companies.company_number = company_names.company_number
            AND company_names.end_date = 'current'
        LEFT JOIN company_information
            ON company_information.company_number = company_names.company_number
            AND company_information.end_snapshot = latest_snapshot.date
        WHERE pscs.name IS NOT NULL
        AND path_length > 1
        GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        ORDER BY search_company_name, tier ASC
        ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(query, [queries]);
    return result.rows;
  };
  fetchParentCompanies = async (queries, limited = false) => {
    const query = `
      WITH company_ids_and_names AS (
        SELECT
          company_number AS search_company_number,
          name AS search_company_name
        FROM company_names
        WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[])
        UNION DISTINCT
        SELECT
          cleaned_company_registration AS search_company_number,
          name AS search_company_name
        FROM proprietors
        WHERE LOWER(name) = ANY(LOWER($1::TEXT)::TEXT[])
      ), paths AS (
        SELECT
          ancestor_id,
          search_company_number,
          search_company_name,
          ARRAY_AGG(DISTINCT path[2]) AS first_children,
          BOOL_OR(active) AS active_path_exists,
          MIN(path_length) AS path_length
        FROM psc_paths
        JOIN company_ids_and_names cin
          ON descendant_id = cin.search_company_number
        GROUP BY 1, 2, 3
      ), latest_snapshot AS (
        SELECT max(date) AS date
        FROM companies_snapshot_manifest
      ), dissolved_companies as (
        SELECT
          company_number,
          'Dissolved' AS company_status,
        MAX(end_snapshot) AS max_end_snapshot
        FROM companies_house.company_information AS coi
        WHERE end_snapshot < (
          SELECT max(date) AS date
          FROM companies_snapshot_manifest
        )
        group by 1,2
      )
      SELECT
        p.search_company_number                                       AS "searchCompanyNumber",
        p.search_company_name                                         AS "searchCompanyName",
        p.ancestor_id                                                 AS "companyNumber",
        COALESCE(company_names.name, UPPER(pscs.name))                AS "companyName",
        CASE WHEN companies.company_number IS NOT NULL THEN 'UK'
          ELSE pscs.legal_authority END                               AS "legalAuthority",
        company_information.incorporation_date                        AS "incorporationDate",
        COALESCE(
          company_information.company_status,
          dissolved_companies.company_status
        )                                                             AS "companyStatus",
        company_information.company_category                          AS "companyCategory",
        company_information.sic_codes                                 AS "sicCodes",
        CASE WHEN p.active_path_exists IS TRUE THEN 'Active'
          ELSE 'Ceased' END                                           AS "pscStatus",
        p.path_length - 1                                             AS "tier",
        COALESCE(
          ARRAY_LENGTH(
            ARRAY_REMOVE(
              ARRAY_AGG(psc_parent.registration_number_clean),
              NULL
            ),
            1
          ),
          0
        ) = 0 AS "isUltimateParent"
      FROM paths p
      LEFT JOIN pscs
        ON p.first_children[1] = pscs.company_id
        AND p.ancestor_id = pscs.registration_number_clean
      LEFT JOIN pscs as psc_parent
        ON p.ancestor_id = psc_parent.company_id
        AND psc_parent.kind IN (
          'corporate-entity-person-with-significant-control',
          'corporate-entity-beneficial-owner'
        )
      CROSS JOIN latest_snapshot
      LEFT JOIN companies ON companies.company_number = p.ancestor_id
      LEFT JOIN company_names
        ON p.ancestor_id = company_names.company_number
        AND company_names.end_date = 'current'
      LEFT JOIN dissolved_companies
        ON company_names.company_number = dissolved_companies.company_number
      LEFT JOIN company_information
        ON company_information.company_number = company_names.company_number
        AND company_information.end_snapshot = latest_snapshot.date
      WHERE path_length > 1
      GROUP BY 1,2,3,4,5,6,7,8,9,10,11
      ORDER BY search_company_name, tier
      ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(query, [queries]);
    return result.rows;
  };
  fetchOwnershipGraphData = async (queries) => {
    const nodesQuery = `
      WITH latest_snapshot AS (
          SELECT max(date) AS date
          FROM companies_snapshot_manifest
      ), search_company_ids AS (
        SELECT company_number FROM company_names
          WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[])
          UNION DISTINCT
          SELECT cleaned_company_registration FROM proprietors
          WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[])
      ), company_ids AS (
        SELECT
          distinct descendant_id AS company_id,
          path_length = 1 AS in_search
        FROM psc_paths
        WHERE ancestor_id IN (SELECT company_number FROM search_company_ids)
        UNION
        SELECT
          company_number,
          TRUE AS in_search
        FROM search_company_ids
      )
      SELECT
      DISTINCT
        company_id                                    as "companyNumber",
        COALESCE(company_names.name, '[DISSOLVED]')   as "companyName",
        company_information.incorporation_date        as "incorporationDate",
        company_information.company_status            as "companyStatus",
        company_information.company_category          as "companyCategory",
        company_information.sic_codes                 as "sicCodes",
        in_search                                     as "inSearch"
      FROM company_ids
      CROSS JOIN latest_snapshot
      LEFT JOIN companies ON companies.company_number = company_ids.company_id
      LEFT JOIN company_names
          ON companies.company_number = company_names.company_number
          AND company_names.end_date = 'current'
      LEFT JOIN company_information
          ON company_information.company_number = company_names.company_number
          AND company_information.end_snapshot = latest_snapshot.date
    `;
    const nodeResults = await this.pool.query(nodesQuery, [queries]);
    const companyIds = nodeResults.rows.map((row) => row.companyNumber);
    const linksQuery = `
      SELECT
        company_id AS "target",
        registration_number_clean AS "source",
        notified_on AS "notifiedOn",
        ceased_on AS "ceasedOn"
      FROM pscs
      WHERE registration_number_clean = ANY(UPPER($1::TEXT)::TEXT[])`;
    const linkResults = await this.pool.query(linksQuery, [companyIds]);
    return {
      nodes: nodeResults.rows,
      edges: linkResults.rows
    };
  };
  fetchCorporateOwnersByLandTitle = async (field, queries, limited) => {
    const query = `
      WITH title_data AS (
        SELECT
          cleaned_company_registration AS cid,
          proprietors.name AS company_name,
          proprietor_country_incorporated.name AS country_incorporated,
          proprietor_category.name AS proprietor_category,
          ARRAY_AGG(DISTINCT CONCAT(titles.address || ' (' || land_ownership_timespans.tenure || ')')) AS addresses,
          ARRAY_AGG(DISTINCT titles.title_number) AS title_numbers
        FROM titles
        JOIN land_ownership_timespans
          ON land_ownership_timespans.title_id = titles.id
        JOIN proprietors
          ON land_ownership_timespans.proprietor_id = proprietors.id
        LEFT JOIN proprietor_country_incorporated
          ON proprietor_country_incorporated.id = proprietors.country_incorporated_id
        LEFT JOIN proprietor_category
          ON proprietor_category.id = proprietors.category_id
        WHERE
            ${queries.map((_3, i) => `titles.${field} = $${i + 1}`).join(" OR ")}
        GROUP BY 1, 2, 3, 4
      )
        SELECT
          -- Foreign companies from the Land Registry will not have a company number,
          -- but we still need a best guess at uniquely identifying them.
          -- Let's try name plus country.
          COALESCE(companies.company_number, title_data.company_name || '_' || title_data.country_incorporated) as "companyIdentifier",
          companies.company_number as "companyNumber",
          CASE
            WHEN title_data.country_incorporated <> 'UK' OR (title_data.country_incorporated = 'UK' AND company_names.name IS NULL)
              THEN title_data.company_name
            ELSE company_names.name
          END AS "companyName",
          title_data.country_incorporated as "countryIncorporated",
          company_information.incorporation_date as "incorporationDate",
          title_data.proprietor_category as "proprietorCategory",
          company_information.company_status as "companyStatus",
          title_data.addresses,
          title_data.title_numbers AS "titleNumbers",
          ARRAY_AGG(pscs.name ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "pscNames",
          ARRAY_AGG(pscs.ceased_on ORDER BY COALESCE(pscs.ceased_on, '9999-01-01'::date) DESC) as "ceasedOn"
        FROM title_data
        LEFT JOIN pscs ON pscs.company_id = title_data.cid
        LEFT JOIN companies ON companies.company_number = title_data.cid
        LEFT JOIN company_names
          ON companies.company_number = company_names.company_number
          AND company_names.end_date = 'current'
        LEFT JOIN company_information
          ON company_information.company_number = company_names.company_number
          AND company_information.end_snapshot = (SELECT max(date) AS date FROM companies_snapshot_manifest)
        GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9
        ${limited ? "LIMIT 1000" : ""}
      `;
    const result = await this.pool.query(query, queries);
    return result.rows;
  };
  searchCompanyNameTypeahead = async (search, exclusions, disabledSources, limit) => {
    const typeaheadMatch = search.map((_3, index) => `typeahead_terms_name @@ plainto_tsquery('simple', $${index + 4})`).join(" OR ");
    const query = `
      SELECT name, JSON_AGG(source) AS sources, COUNT(*) OVER() as "totalResults"
      FROM company_name_typeahead_terms
      WHERE
        NOT name = ANY($1)
        AND NOT (source = ANY($2))
        AND ${typeaheadMatch}
      GROUP BY 1
      LIMIT $3
    `;
    const result = await this.pool.query(query, [
      exclusions,
      disabledSources,
      limit,
      ...search
    ]);
    if (result.rows.length > 0) {
      return {
        results: result.rows.map((r) => ({
          query: r.name,
          sources: r.sources
        })),
        totalResults: parseInt(result.rows[0].totalResults)
      };
    }
    return { results: [], totalResults: 0 };
  };
  verifyCompanies = async (companies) => {
    const query = `
      SELECT DISTINCT name
      FROM company_name_typeahead_terms
      WHERE LOWER(name) = ANY(LOWER($1::TEXT)::TEXT[])
    `;
    const result = await this.pool.query(query, [companies]);
    const valid = result.rows.map((r) => r.name);
    const invalid = companies.filter((c) => !valid.includes(c));
    return {
      valid,
      invalid
    };
  };
  fetchCompany = async (companyNumber) => {
    const query = `
      SELECT
        companies.company_number                                                             as "number",
        company_name_data.names                                                              as "names",
        company_name_data.end_dates                                                          as "endDates",
        company_information.incorporation_date                                               as "incorporationDate",
        company_information.company_status                                                   as "status",
        company_information.company_category                                                 as "category",
        company_information.sic_codes                                                        as "sicCodes",
        company_information.dissolution_date                                                 as "dissolutionDate",
        company_information.country_of_origin                                                as "countryOfOrigin",
        company_information.end_snapshot                                                     as "endSnapshot"

      FROM companies
      LEFT JOIN (
        SELECT company_number,
        ARRAY_AGG(name)                                                                      as "names",
        ARRAY_AGG(end_date)                                                                  as "end_dates"
        FROM company_names
        GROUP BY company_number
      ) AS company_name_data
      ON companies.company_number = company_name_data.company_number
      LEFT JOIN company_information
      ON companies.company_number = company_information.company_number
      WHERE companies.company_number = $1
    `;
    const result = await this.pool.query(query, [companyNumber]);
    return result.rows ? result.rows[0] : null;
  };
};

// ../../services/src/queries/DonationQueries.ts
var DonationQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  fetchDonationsByCompany = async (queries, limited = false) => {
    const query = `
      WITH donations_by_name AS (
        SELECT
            ec_ref AS "ecRef",
            regulated_entity_name AS "regulatedEntityName",
            value,
            accepted_date AS "acceptedDate",
            donor_name AS "donorName",
            cleaned_company_registration_number AS "cleanedCompanyRegistrationNumber",
            donation_type AS "donationType",
            donation_action AS "donationAction",
            received_date AS "receivedDate",
            reported_date AS "reportedDate"
          FROM electoral_commission.donations
        WHERE LOWER(donor_name) = ANY(LOWER($1::TEXT)::TEXT[])
        OR LOWER(regulated_entity_name) = ANY(LOWER($1::TEXT)::TEXT[])
        )
        SELECT * from donations_by_name
        UNION
        SELECT
          ec_ref AS "ecRef",
          regulated_entity_name AS "regulatedEntityName",
          value,
          accepted_date AS "acceptedDate",
          donor_name AS "donorName",
          cleaned_company_registration_number AS "cleanedCompanyRegistrationNumber",
          donation_type AS "donationType",
          donation_action AS "donationAction",
          received_date AS "receivedDate",
          reported_date AS "reportedDate"
        FROM electoral_commission.donations
        WHERE UPPER(cleaned_company_registration_number) IN (
          SELECT company_number FROM companies_house.company_names
          WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[])
          UNION DISTINCT
          SELECT cleaned_company_registration FROM land_registry.proprietors
          WHERE LOWER(name) = ANY (LOWER($1::TEXT)::TEXT[]))
        ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(query, [queries]);
    return result.rows;
  };
  fetchDonationsByPerson = async (queries, limited = false) => {
    const query = `
        SELECT
          ec_ref AS "ecRef",
          regulated_entity_name AS "regulatedEntityName",
          value,
          accepted_date AS "acceptedDate",
          donor_name AS "donorName",
          cleaned_company_registration_number AS "cleanedCompanyRegistrationNumber",
          donation_type AS "donationType",
          donation_action AS "donationAction",
          received_date AS "receivedDate",
          reported_date AS "reportedDate"
        FROM electoral_commission.donations
        WHERE LOWER(regulated_entity_name) = ANY(LOWER($1::TEXT)::TEXT[])
        OR LOWER(donor_name) = ANY(LOWER($1::TEXT)::TEXT[])
        ${limited ? "LIMIT 1000" : ""}
    `;
    const result = await this.pool.query(query, [queries.map((q) => q.name)]);
    return result.rows;
  };
  fetchDonation = async (ecRef) => {
    const query = `
      SELECT
        ec_ref                               AS "ecRef",
        regulated_entity_name                AS "regulatedEntityName",
        regulated_entity_type                AS "regulatedEntityType",
        value                                AS "value",
        accepted_date                        AS "acceptedDate",
        accounting_unit_name                 AS "accountingUnitName",
        donor_name                           AS "donorName",
        accounting_units_as_central_party    AS "accountingUnitsAsCentralParty",
        is_sponsorship                       AS "isSponsorship",
        donor_status                         AS "donorStatus",
        regulated_donee_type                 AS "regulatedDoneeType",
        company_registration_number          AS "companyRegistrationNumber",
        postcode                             AS "postcode",
        donation_type                        AS "donationType",
        nature_of_donation                   AS "natureOfDonation",
        purpose_of_visit                     AS "purposeOfVisit",
        donation_action                      AS "donationAction",
        received_date                        AS "receivedDate",
        reported_date                        AS "reportedDate",
        is_reported_pre_poll                 AS "isReportedPrePoll",
        reporting_period_name                AS "reportingPeriodName",
        is_bequest                           AS "isBequest",
        is_aggregation                       AS "isAggregation",
        regulated_entity_id                  AS "regulatedEntityId",
        accounting_unit_id                   AS "accountingUnitId",
        donor_id                             AS "donorId",
        campaigning_name                     AS "campaigningName",
        register_name                        AS "registerName",
        is_irish_source                      AS "isIrishSource",
        cleaned_company_registration_number  AS "cleanedCompanyRegistrationNumber"
      FROM electoral_commission.donations
      WHERE ec_ref = $1
    `;
    const result = await this.pool.query(query, [ecRef]);
    return result.rows[0];
  };
};

// ../../services/src/queries/ParliamentQueries.ts
var import_pg_format3 = __toESM(require("pg-format"));
var ParliamentQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  getAllMembers = async () => {
    const query = `
      SELECT
        *
      FROM parliament.members
    `;
    const result = await this.pool.query(query);
    return result.rows;
  };
  searchInterests = async (memberQuery, interestQuery, limited) => {
    const memberFilterFragment = memberQuery.filter((q) => q !== "").map((q) => (0, import_pg_format3.default)(`members.name ILIKE CONCAT('%%', %L, '%%')`, q)).join(" OR ");
    const memberFilter = memberFilterFragment.length > 0 ? `(${memberFilterFragment})` : null;
    const interestTsQuery = interestQuery.split("|").map((q) => q.trim()).filter((q) => q !== "").map((q) => (0, import_pg_format3.default)(`plainto_tsquery('simple', %L)`, q)).join(" || ");
    const tsQuery = interestTsQuery.length > 0 ? interestTsQuery : `plainto_tsquery('simple', '')`;
    const interestFilter = interestTsQuery.length > 0 ? `${interestTsQuery} @@ interest_tsvector` : null;
    const filter = [memberFilter, interestFilter].filter((q) => q).join(` AND `);
    const limit = limited ? "LIMIT 1000" : "";
    const query = `
      SELECT
        parliament_id as "parliamentId",
        members.name as "name",
        members.family_name as "familyName",
        latest_party as "latestParty",
        latest_house as "latestHouse",
        dob_day as "dobDay",
        dob_month as "dobMonth",
        dob_year as "dobYear",
        thumbnail_url as "thumbnailUrl",
        mysociety_snapshot_date as "mySocietySnapshotDate",
        ts_headline('simple', array_to_string(interest, '
'),
          to_tsquery(regexp_replace(cast(${tsQuery} as text), E'(\\'\\\\w+\\')', E'\\\\1:*', 'g')),
          'StartSel=<highlight>, StopSel=</highlight>, HighlightAll=true') as "interest",
        interest_category_id as "categoryId",
        members_interest_categories.name as "categoryName"
      FROM parliament.members
      INNER JOIN parliament.members_interests
        ON members.parliament_id = members_interests.member_parliament_id
      LEFT JOIN parliament.members_interest_categories
        ON members_interests.interest_category_id = members_interest_categories.id
      WHERE ${filter}
      ORDER BY members.family_name
      ${limit};`;
    const result = await this.pool.query(query);
    return result.rows;
  };
  searchParliamentMemberTypeahead = async (search, exclusions, disabledSources, limit) => {
    const typeaheadMatch = search.map((_3, index) => `typeahead_terms_name @@ plainto_tsquery('simple', $${index + 4})`);
    const query = `
      SELECT name, latest_party, COUNT(*) OVER() as "totalResults"
      FROM parliament.members
      WHERE
        NOT name = ANY($1)
        AND NOT (latest_party = ANY($2))
        AND parliament_id IN (SELECT member_parliament_id FROM parliament.members_interests)
        ${typeaheadMatch.length ? `AND (${typeaheadMatch.join(" OR ")})` : ""}
      GROUP BY 1,2
      LIMIT $3
    `;
    const result = await this.pool.query(query, [
      exclusions,
      disabledSources,
      limit,
      ...search
    ]);
    if (result.rows.length > 0) {
      return {
        results: result.rows.map((r) => ({
          query: r.name,
          sources: [r.latest_party]
        })),
        totalResults: parseInt(result.rows[0].totalResults)
      };
    }
    return { results: [], totalResults: 0 };
  };
};

// ../../services/src/queries/CompanyPscsQueries.ts
var CompaniesPscsQueries = class {
  pool;
  constructor(pool) {
    this.pool = pool;
  }
  fetchPeopleByCompany = async (companies, limited) => {
    const query = `
        SELECT
        pscs.id as "pscId",
        pscs.name as "pscName",
        pscs.nationality as "pscNationality",
        pscs.dob_year as "pscDobYear",
        pscs.dob_month as "pscDobMonth",
        pscs.kind as "companyPscKind",
        pscs.country_registered as "pscCountryRegistered",
        ARRAY_AGG(company_names.name) as "linkedCompanyNames",
        ARRAY_AGG(company_names.company_number) as "linkedCompanyIds"
        FROM pscs
        LEFT JOIN company_names
        ON pscs.company_id = company_names.company_number
        WHERE LOWER(company_names.name) = ANY (LOWER($1::TEXT)::TEXT[])
        AND (kind = '${"individual-person-with-significant-control" /* IndividualPerson */}' OR kind = '${"individual-beneficial-owner" /* Individual */}')
        GROUP BY 1,2,3,4,5,6
        ${limited ? "LIMIT 1000" : ""}`;
    const result = await this.pool.query(query, [companies]);
    return result.rows;
  };
};

// ../../services/src/LurchDB.ts
var import_aws_xray_sdk = __toESM(require_lib5());
var LurchDB = class {
  user;
  pool;
  appQueries;
  addressQueries;
  landTitleQueries;
  shareQueries;
  manifestQueries;
  personQueries;
  companyQueries;
  donationQueries;
  parliamentQueries;
  companyPscsQueries;
  constructor(config, enableXray = false) {
    const pgPool = enableXray ? (0, import_aws_xray_sdk.capturePostgres)(pg) : pg;
    const pool = new pgPool.Pool({
      user: config.db.user,
      password: config.db.password,
      host: config.db.host,
      port: config.db.port,
      database: config.db.database
    });
    this.user = config.db.user;
    this.pool = pool;
    this.appQueries = new AppQueries(this.pool);
    this.addressQueries = new AddressQueries(this.pool);
    this.landTitleQueries = new LandTitleQueries(this.pool);
    this.shareQueries = new ShareQueries(this.pool);
    this.manifestQueries = new ManifestQueries(this.pool);
    this.personQueries = new PersonQueries(this.pool);
    this.companyQueries = new CompanyQueries(this.pool);
    this.donationQueries = new DonationQueries(this.pool);
    this.parliamentQueries = new ParliamentQueries(this.pool);
    this.companyPscsQueries = new CompaniesPscsQueries(this.pool);
  }
  close = () => this.pool.end();
  healthcheck = async () => {
    if (this.user) {
      const { rows } = await this.pool.query("select user");
      if (rows.length !== 1 || rows[0].user !== this.user) {
        throw new Error(`Unexpected response from database for 'select user': ${JSON.stringify(rows)}`);
      }
    } else {
      throw new Error(`Attempted to run healthcheck without known database user`);
    }
  };
};

// ../../services/src/Config.ts
var import_client_secrets_manager = __toESM(require_dist_cjs50());

// ../../infra/consts.ts
var region = "eu-west-1";

// ../../services/src/configHelpers.ts
var getParameters = async (paramPath, ssm2) => {
  try {
    let nextToken = void 0;
    let parameters = [];
    do {
      const data = await ssm2.getParametersByPath({
        Path: paramPath,
        Recursive: true,
        WithDecryption: true,
        NextToken: nextToken
      });
      if (data.Parameters) {
        console.log("Paramaters have been fetched");
        parameters = parameters.concat(data.Parameters);
      }
      nextToken = data.NextToken;
    } while (nextToken);
    if (parameters) {
      console.log("Fetched parameters from Parameter Store");
      return parameters;
    } else {
      throw new Error("No parameters fetched from Parameter Store");
    }
  } catch (err) {
    console.log(`Error fetching parameters from Parameter Store with error: ${err}`);
    throw err;
  }
};
var getValueOfParam = (paramKey, parameter) => {
  if (!parameter) {
    throw new Error(`The parameter ${paramKey} hasn't been configured`);
  }
  if (!parameter.Value) {
    throw new Error(`The parameter ${paramKey} has no value`);
  }
  console.log(`Found value of parameter: ${paramKey}`);
  return parameter.Value;
};
var findParameter = (parameters, paramPath, paramKey) => {
  const parameter = parameters.find((param) => param.Name === `${paramPath}${paramKey}`);
  return getValueOfParam(paramKey, parameter);
};

// ../../services/src/Config.ts
var import_credential_provider_node = __toESM(require_dist_cjs48());
var import_client_ssm = __toESM(require_dist_cjs52());

// ../../services/src/localCache.ts
var import_fs = __toESM(require("fs"));
var import_os = __toESM(require("os"));
var homeDirectory = import_os.default.homedir();
var configRoot = `${homeDirectory}/.gu/lurch`;
var localCacheEnabled = !process.env["AWS_EXECUTION_ENV"] && process.env["LURCH_LOCAL_CACHE_ENABLED"] !== "false";
var LURCH_CONFIG_FILE = "lurch.conf";
var getDirectory = (subdir) => `${configRoot}/${subdir ? `${subdir}/` : ""}`;
var writeCache = (data, fileName, subdir) => {
  if (localCacheEnabled) {
    const writeDirectory = getDirectory(subdir);
    if (!import_fs.default.existsSync(writeDirectory)) {
      import_fs.default.mkdirSync(writeDirectory, { recursive: true });
    }
    const path = `${writeDirectory}${fileName}`;
    console.log(`Writing data to ${path}`);
    import_fs.default.writeFileSync(path, data, {});
  }
};
var readCache = (fileName, subdir) => {
  if (!localCacheEnabled) {
    return null;
  }
  const path = `${getDirectory(subdir)}${fileName}`;
  console.log(`Reading cached data from ${path}`);
  if (import_fs.default.existsSync(path)) {
    try {
      return import_fs.default.readFileSync(path, "utf8");
    } catch (e) {
      console.warn(`Failed to read file ${path}`, e);
      return null;
    }
  }
  return null;
};
var readCachedJson = (fileName, subdir, validate) => {
  const data = readCache(fileName, subdir);
  if (data) {
    try {
      const parsed = JSON.parse(data);
      if (validate) {
        validate(parsed);
      }
      return parsed;
    } catch (e) {
      console.warn(`Failed to parse JSON at ${subdir}/${fileName}`, e);
      return null;
    }
  }
  return null;
};

// ../../services/src/Config.ts
var credentialProvider = process.env["AWS_EXECUTION_ENV"] === void 0 ? (0, import_credential_provider_node.defaultProvider)({ profile: "investigations" }) : void 0;
var ssm = new import_client_ssm.SSM({
  region,
  credentials: credentialProvider
});
var getDatabaseMasterPassword = async () => {
  if (process.env["LURCH_DATABASE_RDS_MASTER_PASSWORD_SECRET"] === void 0) {
    console.log("Logging into database as master user using insecure password locally");
    return "lurch";
  }
  console.log("Downloading master user password from secrets manager");
  const client = new import_client_secrets_manager.SecretsManager({
    credentials: credentialProvider
  });
  const response = await client.getSecretValue({
    SecretId: process.env["LURCH_DATABASE_RDS_MASTER_PASSWORD_SECRET"]
  });
  return JSON.parse(response.SecretString).password;
};
var getConfig = async () => {
  const cachedConfig = readCachedJson(LURCH_CONFIG_FILE);
  if (cachedConfig) {
    console.log(`\u{1F4BE} Loading config from ${LURCH_CONFIG_FILE}. To clear cache: npm run clear-config-cache. `);
    return cachedConfig;
  }
  const stage = process.env["STAGE"] || "DEV";
  const paramPath = `/${stage}/pfi-lurch/lurch/`;
  const parameters = await getParameters(paramPath, ssm);
  const parameterNames = parameters.map((param) => {
    return param.Name;
  });
  console.log(`Parameters fetched: ${parameterNames.join(", ")}`);
  const appSecret = findParameter(parameters, paramPath, "app/secret");
  const appRootUrl = findParameter(parameters, paramPath, "app/rootUrl");
  const dbHost = findParameter(parameters, paramPath, "db/host");
  const dbPort = findParameter(parameters, paramPath, "db/port");
  const dbUser = findParameter(parameters, paramPath, "db/user");
  const dbDatabase = findParameter(parameters, paramPath, "db/database");
  const [dbClusterIdentifier] = dbHost.split(".");
  const dbPassword = getDatabaseMasterPassword();
  const authClientId = findParameter(parameters, paramPath, "auth/clientId");
  const authClientSecret = findParameter(parameters, paramPath, "auth/clientSecret");
  const uploadBucket = findParameter(parameters, paramPath, "app/uploadBucket");
  const externalUsers = findParameter(parameters, paramPath, "app/externalUsers");
  try {
    const config = {
      app: {
        inAws: !!process.env["AWS_EXECUTION_ENV"],
        secret: appSecret,
        rootUrl: appRootUrl,
        uploadBucket,
        externalUsers,
        stage: process.env["STAGE"] || "DEV"
      },
      db: {
        host: dbHost,
        port: Number.parseInt(dbPort, 10),
        user: dbUser,
        database: dbDatabase,
        password: await dbPassword,
        dbClusterIdentifier
      },
      auth: {
        clientId: authClientId,
        clientSecret: authClientSecret
      },
      aws: {
        credentialProvider,
        region
      }
    };
    writeCache(JSON.stringify(config), LURCH_CONFIG_FILE);
    return config;
  } catch (e) {
    console.error("Failed to load config!", e);
    throw e;
  }
};

// src/index.ts
var import_postgrator = __toESM(require_postgrator());
var migrate = async (version2) => {
  try {
    const config = await getConfig();
    console.log("Configuring client");
    const db = new LurchDB(config);
    console.log("Configuring migration");
    const connection = await db.pool.connect();
    try {
      const postgrator = new import_postgrator.default({
        driver: "pg",
        database: config.db.database,
        migrationPattern: `${__dirname}/migrations/*`,
        execQuery: (query) => connection.query(query)
      });
      console.log("Starting migration");
      const appliedMigrations = await postgrator.migrate(version2);
      if (appliedMigrations.length > 0) {
        const migrationList = appliedMigrations.map((m) => `${m.action} ${m.version}`).join(", ");
        console.log(`Finished migration. Migration(s) applied: ${migrationList}`);
        console.log("Starting VACUUM ANALYZE");
        await connection.query("VACUUM ANALYZE");
        console.log("Finished VACUUM ANALYZE");
      } else {
        console.log("No migrations applied");
      }
    } finally {
      connection.release();
    }
  } catch (err) {
    console.log(`Error running migrate-db`, err);
    process.exitCode = 1;
  }
};
var version = process.env.VERSION || process.argv[2];
console.log(`Migrating DB to version ${version}`);
migrate(version);
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.29.4
